
serialsocket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005adc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08005bf0  08005bf0  00015bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fdc  08005fdc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005fdc  08005fdc  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fdc  08005fdc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fdc  08005fdc  00015fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001d4  080061b8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  080061b8  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011bd3  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028f1  00000000  00000000  00031e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00007bc0  00000000  00000000  00034704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b08  00000000  00000000  0003c2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ae9  00000000  00000000  0003cdcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018d82  00000000  00000000  0003d8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013d6c  00000000  00000000  00056637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008ee4b  00000000  00000000  0006a3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000033d0  00000000  00000000  000f91f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005bd4 	.word	0x08005bd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005bd4 	.word	0x08005bd4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <customParseRGB>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int customParseRGB(char *input, int *r, int *g, int *b) {
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  input += 4; // Move the pointer past "RGB_"

  int components[3] = {0}; // Array to store the RGB components
 8000b3e:	2400      	movs	r4, #0

  for (int i = 0; i < 3; ++i) {
    int component = 0;
    while (*input && *input != '_') {
      component = component * 10 + (*input - '0');
 8000b40:	f04f 0e0a 	mov.w	lr, #10
int customParseRGB(char *input, int *r, int *g, int *b) {
 8000b44:	b085      	sub	sp, #20
  int components[3] = {0}; // Array to store the RGB components
 8000b46:	e9cd 4401 	strd	r4, r4, [sp, #4]
  input += 4; // Move the pointer past "RGB_"
 8000b4a:	3004      	adds	r0, #4
  int components[3] = {0}; // Array to store the RGB components
 8000b4c:	9403      	str	r4, [sp, #12]
  for (int i = 0; i < 3; ++i) {
 8000b4e:	ad01      	add	r5, sp, #4
 8000b50:	4684      	mov	ip, r0
    int component = 0;
 8000b52:	2700      	movs	r7, #0
 8000b54:	e002      	b.n	8000b5c <customParseRGB+0x20>
      component = component * 10 + (*input - '0');
 8000b56:	3e30      	subs	r6, #48	; 0x30
 8000b58:	fb0e 6707 	mla	r7, lr, r7, r6
      ++input;
 8000b5c:	4660      	mov	r0, ip
    while (*input && *input != '_') {
 8000b5e:	f81c 6b01 	ldrb.w	r6, [ip], #1
 8000b62:	b10e      	cbz	r6, 8000b68 <customParseRGB+0x2c>
 8000b64:	2e5f      	cmp	r6, #95	; 0x5f
 8000b66:	d1f6      	bne.n	8000b56 <customParseRGB+0x1a>
    }
    components[i] = component;
    if (*input == '_') {
 8000b68:	2e5f      	cmp	r6, #95	; 0x5f
    components[i] = component;
 8000b6a:	f845 7b04 	str.w	r7, [r5], #4
    if (*input == '_') {
 8000b6e:	d10c      	bne.n	8000b8a <customParseRGB+0x4e>
      ++input; // Move past the underscore
 8000b70:	3001      	adds	r0, #1
  for (int i = 0; i < 3; ++i) {
 8000b72:	3401      	adds	r4, #1
 8000b74:	2c03      	cmp	r4, #3
 8000b76:	d1eb      	bne.n	8000b50 <customParseRGB+0x14>
    } else if (i < 2 || *input != '\0') {
      return 0; // Invalid input format
    }
  }

  *r = components[0];
 8000b78:	9801      	ldr	r0, [sp, #4]
 8000b7a:	6008      	str	r0, [r1, #0]
  *g = components[1];
  *b = components[2];
  return 1; // Successfully parsed RGB values
 8000b7c:	2001      	movs	r0, #1
  *g = components[1];
 8000b7e:	9902      	ldr	r1, [sp, #8]
 8000b80:	6011      	str	r1, [r2, #0]
  *b = components[2];
 8000b82:	9a03      	ldr	r2, [sp, #12]
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	b005      	add	sp, #20
 8000b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (i < 2 || *input != '\0') {
 8000b8a:	2c02      	cmp	r4, #2
 8000b8c:	d0f1      	beq.n	8000b72 <customParseRGB+0x36>
      return 0; // Invalid input format
 8000b8e:	2000      	movs	r0, #0
 8000b90:	e7f9      	b.n	8000b86 <customParseRGB+0x4a>
	...

08000b94 <transmitLEDState>:

void transmitLEDState(void) {
 8000b94:	b510      	push	{r4, lr}
  char ledStatusJSON[20]; // Adjust the size as per your requirement
  // Assuming you have defined appropriate macros or variables for
  // LED_GPIO_Port and LED_Pin
  int ledStatus = HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin);
 8000b96:	4c0d      	ldr	r4, [pc, #52]	; (8000bcc <transmitLEDState+0x38>)
void transmitLEDState(void) {
 8000b98:	b086      	sub	sp, #24
  int ledStatus = HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin);
 8000b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	f001 f810 	bl	8001bc4 <HAL_GPIO_ReadPin>
  snprintf(ledStatusJSON, 20, "{\"LED\":%d}\r\n", ledStatus);
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <transmitLEDState+0x3c>)
  int ledStatus = HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin);
 8000ba6:	4603      	mov	r3, r0
  snprintf(ledStatusJSON, 20, "{\"LED\":%d}\r\n", ledStatus);
 8000ba8:	2114      	movs	r1, #20
 8000baa:	a801      	add	r0, sp, #4
 8000bac:	f002 fe80 	bl	80038b0 <sniprintf>

  // toggle pin
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb6:	f001 f810 	bl	8001bda <HAL_GPIO_TogglePin>

  // Assuming you have defined huart1 and HAL_UART_Transmit correctly
  HAL_UART_Transmit(&huart1, (uint8_t *)ledStatusJSON, sizeof(ledStatusJSON),
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	2214      	movs	r2, #20
 8000bbe:	a901      	add	r1, sp, #4
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <transmitLEDState+0x40>)
 8000bc2:	f001 ff42 	bl	8002a4a <HAL_UART_Transmit>
                    100);
}
 8000bc6:	b006      	add	sp, #24
 8000bc8:	bd10      	pop	{r4, pc}
 8000bca:	bf00      	nop
 8000bcc:	40011000 	.word	0x40011000
 8000bd0:	08005bf0 	.word	0x08005bf0
 8000bd4:	200002e0 	.word	0x200002e0

08000bd8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bd8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	2414      	movs	r4, #20
void SystemClock_Config(void) {
 8000bdc:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	4622      	mov	r2, r4
 8000be0:	2100      	movs	r1, #0
 8000be2:	a80c      	add	r0, sp, #48	; 0x30
 8000be4:	f002 fefb 	bl	80039de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	4622      	mov	r2, r4
 8000bea:	eb0d 0004 	add.w	r0, sp, r4
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f002 fef5 	bl	80039de <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2210      	movs	r2, #16
 8000bf8:	a801      	add	r0, sp, #4
 8000bfa:	f002 fef0 	bl	80039de <memset>
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c12:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c14:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c16:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c18:	f000 fff4 	bl	8001c04 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000c1c:	230f      	movs	r3, #15
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c22:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c26:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000c28:	4621      	mov	r1, r4
 8000c2a:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2c:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c30:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000c32:	f001 f9a9 	bl	8001f88 <HAL_RCC_ClockConfig>
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000c3a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c3c:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c3e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000c40:	f001 fa5e 	bl	8002100 <HAL_RCCEx_PeriphCLKConfig>
    Error_Handler();
  }
}
 8000c44:	b014      	add	sp, #80	; 0x50
 8000c46:	bd10      	pop	{r4, pc}

08000c48 <main>:
int main(void) {
 8000c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	2510      	movs	r5, #16
int main(void) {
 8000c4e:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8000c50:	f000 fb70 	bl	8001334 <HAL_Init>
  SystemClock_Config();
 8000c54:	f7ff ffc0 	bl	8000bd8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	462a      	mov	r2, r5
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	a80f      	add	r0, sp, #60	; 0x3c
 8000c5e:	f002 febe 	bl	80039de <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	4b9b      	ldr	r3, [pc, #620]	; (8000ed0 <main+0x288>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c6a:	489a      	ldr	r0, [pc, #616]	; (8000ed4 <main+0x28c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	432a      	orrs	r2, r5
 8000c6e:	619a      	str	r2, [r3, #24]
 8000c70:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	402a      	ands	r2, r5
 8000c78:	9205      	str	r2, [sp, #20]
 8000c7a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c80:	f042 0220 	orr.w	r2, r2, #32
 8000c84:	619a      	str	r2, [r3, #24]
 8000c86:	699a      	ldr	r2, [r3, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c88:	f04f 0a0c 	mov.w	sl, #12
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8c:	f002 0220 	and.w	r2, r2, #32
 8000c90:	9206      	str	r2, [sp, #24]
 8000c92:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c96:	f44f 2b60 	mov.w	fp, #917504	; 0xe0000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	f042 0204 	orr.w	r2, r2, #4
 8000c9e:	619a      	str	r2, [r3, #24]
 8000ca0:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 8000ca2:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8000ed8 <main+0x290>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	f002 0204 	and.w	r2, r2, #4
 8000caa:	9207      	str	r2, [sp, #28]
 8000cac:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 8000cb0:	4f8a      	ldr	r7, [pc, #552]	; (8000edc <main+0x294>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	f042 0208 	orr.w	r2, r2, #8
 8000cb6:	619a      	str	r2, [r3, #24]
 8000cb8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	9308      	str	r3, [sp, #32]
 8000cc2:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cc4:	f000 ff84 	bl	8001bd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ccc:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	4880      	ldr	r0, [pc, #512]	; (8000ed4 <main+0x28c>)
 8000cd4:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f000 fe9d 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSHBTN_INT_Pin */
  GPIO_InitStruct.Pin = PUSHBTN_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce2:	4b7f      	ldr	r3, [pc, #508]	; (8000ee0 <main+0x298>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(PUSHBTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	487f      	ldr	r0, [pc, #508]	; (8000ee4 <main+0x29c>)
 8000ce6:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ce8:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(PUSHBTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f000 fe93 	bl	8001a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	2017      	movs	r0, #23
 8000cf8:	f000 fdd4 	bl	80018a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cfc:	2017      	movs	r0, #23
 8000cfe:	f000 fe01 	bl	8001904 <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 115200;
 8000d02:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d06:	4978      	ldr	r1, [pc, #480]	; (8000ee8 <main+0x2a0>)
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000d08:	4640      	mov	r0, r8
  huart1.Init.BaudRate = 115200;
 8000d0a:	e9c8 1300 	strd	r1, r3, [r8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0e:	e9c8 4402 	strd	r4, r4, [r8, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	e9c8 a405 	strd	sl, r4, [r8, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d16:	f8c8 4010 	str.w	r4, [r8, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1a:	f8c8 401c 	str.w	r4, [r8, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000d1e:	f001 fe65 	bl	80029ec <HAL_UART_Init>
  hadc1.Instance = ADC1;
 8000d22:	4b72      	ldr	r3, [pc, #456]	; (8000eec <main+0x2a4>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000d24:	4638      	mov	r0, r7
  hadc2.Instance = ADC2;
 8000d26:	4e72      	ldr	r6, [pc, #456]	; (8000ef0 <main+0x2a8>)
  hadc1.Instance = ADC1;
 8000d28:	603b      	str	r3, [r7, #0]
  hadc1.Init.NbrOfConversion = 1;
 8000d2a:	f8c7 9010 	str.w	r9, [r7, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8000d32:	9411      	str	r4, [sp, #68]	; 0x44
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d34:	60bc      	str	r4, [r7, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d36:	733c      	strb	r4, [r7, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d38:	753c      	strb	r4, [r7, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d3a:	f8c7 b01c 	str.w	fp, [r7, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3e:	607c      	str	r4, [r7, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000d40:	f000 fd20 	bl	8001784 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d44:	a90f      	add	r1, sp, #60	; 0x3c
 8000d46:	4638      	mov	r0, r7
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d48:	e9cd 590f 	strd	r5, r9, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d4c:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d4e:	f000 fbd7 	bl	8001500 <HAL_ADC_ConfigChannel>
  hadc2.Instance = ADC2;
 8000d52:	4b68      	ldr	r3, [pc, #416]	; (8000ef4 <main+0x2ac>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000d54:	4630      	mov	r0, r6
  hadc2.Instance = ADC2;
 8000d56:	6033      	str	r3, [r6, #0]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d58:	f886 900c 	strb.w	r9, [r6, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d5c:	f8c6 9010 	str.w	r9, [r6, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d60:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8000d64:	9411      	str	r4, [sp, #68]	; 0x44
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d66:	60b4      	str	r4, [r6, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d68:	7534      	strb	r4, [r6, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d6a:	f8c6 b01c 	str.w	fp, [r6, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d6e:	6074      	str	r4, [r6, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000d70:	f000 fd08 	bl	8001784 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_7;
 8000d74:	2307      	movs	r3, #7
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d76:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000d7a:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000d7c:	a90f      	add	r1, sp, #60	; 0x3c
 8000d7e:	4630      	mov	r0, r6
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000d80:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000d82:	f000 fbbd 	bl	8001500 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	462a      	mov	r2, r5
 8000d88:	4621      	mov	r1, r4
 8000d8a:	a80b      	add	r0, sp, #44	; 0x2c
 8000d8c:	f002 fe27 	bl	80039de <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d90:	221c      	movs	r2, #28
 8000d92:	4621      	mov	r1, r4
 8000d94:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d96:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9a:	f002 fe20 	bl	80039de <memset>
  htim2.Instance = TIM2;
 8000d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da2:	4d55      	ldr	r5, [pc, #340]	; (8000ef8 <main+0x2b0>)
  htim2.Init.Prescaler = 0;
 8000da4:	e9c5 3400 	strd	r3, r4, [r5]
  htim2.Init.Period = 65535;
 8000da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000db0:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000db2:	4628      	mov	r0, r5
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000db4:	61ab      	str	r3, [r5, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000db8:	f001 fb22 	bl	8002400 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000dc0:	a90b      	add	r1, sp, #44	; 0x2c
 8000dc2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000dc6:	f001 fc54 	bl	8002672 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000dca:	4628      	mov	r0, r5
 8000dcc:	f001 fb70 	bl	80024b0 <HAL_TIM_PWM_Init>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	f001 fb41 	bl	8002458 <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000dd6:	a909      	add	r1, sp, #36	; 0x24
 8000dd8:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dda:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000dde:	f001 fd3d 	bl	800285c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de2:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000de4:	2204      	movs	r2, #4
 8000de6:	a90f      	add	r1, sp, #60	; 0x3c
 8000de8:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 8000dea:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dee:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df0:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000df2:	f001 fbdb 	bl	80025ac <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000df6:	2208      	movs	r2, #8
 8000df8:	a90f      	add	r1, sp, #60	; 0x3c
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	f001 fbd6 	bl	80025ac <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8000e00:	4652      	mov	r2, sl
 8000e02:	a90f      	add	r1, sp, #60	; 0x3c
 8000e04:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e06:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8000e08:	f001 fbaa 	bl	8002560 <HAL_TIM_OC_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f000 f971 	bl	80010f4 <HAL_TIM_MspPostInit>
  HAL_ADC_Start(&hadc1);
 8000e12:	4638      	mov	r0, r7
 8000e14:	f000 fc2e 	bl	8001674 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000e18:	4630      	mov	r0, r6
 8000e1a:	f000 fc2b 	bl	8001674 <HAL_ADC_Start>
  HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer,
 8000e1e:	464a      	mov	r2, r9
 8000e20:	4640      	mov	r0, r8
    float celsius = (357.558 - 0.187364 * tempValue) / 10.0;
 8000e22:	f20f 099c 	addw	r9, pc, #156	; 0x9c
 8000e26:	e9d9 8900 	ldrd	r8, r9, [r9]
  HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer,
 8000e2a:	4934      	ldr	r1, [pc, #208]	; (8000efc <main+0x2b4>)
 8000e2c:	f002 f821 	bl	8002e72 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e30:	2104      	movs	r1, #4
 8000e32:	4628      	mov	r0, r5
 8000e34:	f001 fd10 	bl	8002858 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	f001 fd0c 	bl	8002858 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e40:	4651      	mov	r1, sl
 8000e42:	4628      	mov	r0, r5
 8000e44:	f001 fd08 	bl	8002858 <HAL_TIM_PWM_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8000e48:	2164      	movs	r1, #100	; 0x64
 8000e4a:	4638      	mov	r0, r7
 8000e4c:	f000 faa8 	bl	80013a0 <HAL_ADC_PollForConversion>
    HAL_ADC_PollForConversion(&hadc2, 100);
 8000e50:	2164      	movs	r1, #100	; 0x64
 8000e52:	4630      	mov	r0, r6
 8000e54:	f000 faa4 	bl	80013a0 <HAL_ADC_PollForConversion>
    uint8_t tempValue = HAL_ADC_GetValue(&hadc1);
 8000e58:	4638      	mov	r0, r7
 8000e5a:	f000 fb4d 	bl	80014f8 <HAL_ADC_GetValue>
 8000e5e:	4604      	mov	r4, r0
    uint8_t LDRValue = HAL_ADC_GetValue(&hadc2);
 8000e60:	4630      	mov	r0, r6
 8000e62:	f000 fb49 	bl	80014f8 <HAL_ADC_GetValue>
    snprintf(data_buffer, sizeof(data_buffer),
 8000e66:	b2c0      	uxtb	r0, r0
 8000e68:	9002      	str	r0, [sp, #8]
    float celsius = (357.558 - 0.187364 * tempValue) / 10.0;
 8000e6a:	b2e0      	uxtb	r0, r4
 8000e6c:	f7ff fad4 	bl	8000418 <__aeabi_i2d>
 8000e70:	4642      	mov	r2, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	f7ff fb3a 	bl	80004ec <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	a112      	add	r1, pc, #72	; (adr r1, 8000ec8 <main+0x280>)
 8000e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e82:	f7ff f97b 	bl	800017c <__aeabi_dsub>
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <main+0x2b8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f7ff fc59 	bl	8000740 <__aeabi_ddiv>
 8000e8e:	f7ff fe05 	bl	8000a9c <__aeabi_d2f>
    snprintf(data_buffer, sizeof(data_buffer),
 8000e92:	f7ff fad3 	bl	800043c <__aeabi_f2d>
 8000e96:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <main+0x2bc>)
 8000e98:	e9cd 0100 	strd	r0, r1, [sp]
 8000e9c:	2132      	movs	r1, #50	; 0x32
 8000e9e:	481a      	ldr	r0, [pc, #104]	; (8000f08 <main+0x2c0>)
 8000ea0:	f002 fd06 	bl	80038b0 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)data_buffer, sizeof(data_buffer),
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	2232      	movs	r2, #50	; 0x32
 8000ea8:	4917      	ldr	r1, [pc, #92]	; (8000f08 <main+0x2c0>)
 8000eaa:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <main+0x290>)
 8000eac:	f001 fdcd 	bl	8002a4a <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb4:	f000 fa62 	bl	800137c <HAL_Delay>
  while (1) {
 8000eb8:	e7c6      	b.n	8000e48 <main+0x200>
 8000eba:	bf00      	nop
 8000ebc:	f3af 8000 	nop.w
 8000ec0:	26394fad 	.word	0x26394fad
 8000ec4:	3fc7fb8b 	.word	0x3fc7fb8b
 8000ec8:	916872b0 	.word	0x916872b0
 8000ecc:	407658ed 	.word	0x407658ed
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	200002e0 	.word	0x200002e0
 8000edc:	20000238 	.word	0x20000238
 8000ee0:	10210000 	.word	0x10210000
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40012400 	.word	0x40012400
 8000ef0:	20000268 	.word	0x20000268
 8000ef4:	40012800 	.word	0x40012800
 8000ef8:	20000298 	.word	0x20000298
 8000efc:	200001fc 	.word	0x200001fc
 8000f00:	40240000 	.word	0x40240000
 8000f04:	08005bfd 	.word	0x08005bfd
 8000f08:	20000204 	.word	0x20000204

08000f0c <HAL_GPIO_EXTI_Callback>:
  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4604      	mov	r4, r0
  currentMillis = HAL_GetTick();
 8000f10:	f000 fa2e 	bl	8001370 <HAL_GetTick>
 8000f14:	4d07      	ldr	r5, [pc, #28]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x28>)

  if (GPIO_Pin == PUSHBTN_INT_Pin &&
 8000f16:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  currentMillis = HAL_GetTick();
 8000f1a:	6028      	str	r0, [r5, #0]
  if (GPIO_Pin == PUSHBTN_INT_Pin &&
 8000f1c:	d108      	bne.n	8000f30 <HAL_GPIO_EXTI_Callback+0x24>
      (currentMillis - previousMillis >
 8000f1e:	4c06      	ldr	r4, [pc, #24]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	1ac0      	subs	r0, r0, r3
  if (GPIO_Pin == PUSHBTN_INT_Pin &&
 8000f24:	28c8      	cmp	r0, #200	; 0xc8
 8000f26:	d903      	bls.n	8000f30 <HAL_GPIO_EXTI_Callback+0x24>
       200)) // If The INT Source Is EXTI Line4 (B4 Pin)
  {
    transmitLEDState();
 8000f28:	f7ff fe34 	bl	8000b94 <transmitLEDState>
    previousMillis = currentMillis;
 8000f2c:	682b      	ldr	r3, [r5, #0]
 8000f2e:	6023      	str	r3, [r4, #0]
  }
}
 8000f30:	bd38      	pop	{r3, r4, r5, pc}
 8000f32:	bf00      	nop
 8000f34:	20000200 	.word	0x20000200
 8000f38:	20000328 	.word	0x20000328

08000f3c <HAL_UART_RxCpltCallback>:
// void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
//{
//     clear_buffer(data_buffer, count);
// }
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}

  if (UART1_rxBuffer == '\r') { // when enter is pressed go to this condition
    data_buffer[count++] = '\0';
 8000f3e:	4d29      	ldr	r5, [pc, #164]	; (8000fe4 <HAL_UART_RxCpltCallback+0xa8>)
  if (UART1_rxBuffer == '\r') { // when enter is pressed go to this condition
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <HAL_UART_RxCpltCallback+0xac>)
    data_buffer[count++] = '\0';
 8000f42:	f995 2000 	ldrsb.w	r2, [r5]
  if (UART1_rxBuffer == '\r') { // when enter is pressed go to this condition
 8000f46:	7819      	ldrb	r1, [r3, #0]
    data_buffer[count++] = '\0';
 8000f48:	1c53      	adds	r3, r2, #1
 8000f4a:	b25b      	sxtb	r3, r3
  if (UART1_rxBuffer == '\r') { // when enter is pressed go to this condition
 8000f4c:	290d      	cmp	r1, #13
 8000f4e:	4c27      	ldr	r4, [pc, #156]	; (8000fec <HAL_UART_RxCpltCallback+0xb0>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f50:	b091      	sub	sp, #68	; 0x44
    data_buffer[count++] = '\0';
 8000f52:	702b      	strb	r3, [r5, #0]
  if (UART1_rxBuffer == '\r') { // when enter is pressed go to this condition
 8000f54:	d143      	bne.n	8000fde <HAL_UART_RxCpltCallback+0xa2>
    data_buffer[count++] = '\0';
 8000f56:	2300      	movs	r3, #0
    char sentBuff[60];
    sprintf(sentBuff, "%s\r\n", data_buffer);
 8000f58:	4925      	ldr	r1, [pc, #148]	; (8000ff0 <HAL_UART_RxCpltCallback+0xb4>)
    data_buffer[count++] = '\0';
 8000f5a:	54a3      	strb	r3, [r4, r2]
    sprintf(sentBuff, "%s\r\n", data_buffer);
 8000f5c:	a801      	add	r0, sp, #4
 8000f5e:	4622      	mov	r2, r4
 8000f60:	f002 fcda 	bl	8003918 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)sentBuff, strlen(sentBuff), 100);
 8000f64:	a801      	add	r0, sp, #4
 8000f66:	f7ff f8fd 	bl	8000164 <strlen>
 8000f6a:	a901      	add	r1, sp, #4
 8000f6c:	b282      	uxth	r2, r0
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	4820      	ldr	r0, [pc, #128]	; (8000ff4 <HAL_UART_RxCpltCallback+0xb8>)
 8000f72:	f001 fd6a 	bl	8002a4a <HAL_UART_Transmit>

    if (strncmp(data_buffer, "RGB_", 4) == 0) {
 8000f76:	2204      	movs	r2, #4
 8000f78:	4620      	mov	r0, r4
 8000f7a:	491f      	ldr	r1, [pc, #124]	; (8000ff8 <HAL_UART_RxCpltCallback+0xbc>)
 8000f7c:	f002 fd37 	bl	80039ee <strncmp>
 8000f80:	bb20      	cbnz	r0, 8000fcc <HAL_UART_RxCpltCallback+0x90>
//    	sscanf( data_buffer, "RGB_%d_%d_%d",&RED, &GREEN, &BLUE);
        customParseRGB(data_buffer, &RED, &GREEN, &BLUE);
 8000f82:	4e1e      	ldr	r6, [pc, #120]	; (8000ffc <HAL_UART_RxCpltCallback+0xc0>)
 8000f84:	4f1e      	ldr	r7, [pc, #120]	; (8001000 <HAL_UART_RxCpltCallback+0xc4>)
 8000f86:	4632      	mov	r2, r6
 8000f88:	4639      	mov	r1, r7
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_UART_RxCpltCallback+0xc8>)

      TIM2->CCR2 = (65535 - RED * 255);
 8000f8e:	f64f 74ff 	movw	r4, #65535	; 0xffff
        customParseRGB(data_buffer, &RED, &GREEN, &BLUE);
 8000f92:	f7ff fdd3 	bl	8000b3c <customParseRGB>
      TIM2->CCR2 = (65535 - RED * 255);
 8000f96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f9a:	6839      	ldr	r1, [r7, #0]
      TIM2->CCR3 = (65535 - GREEN * 255);
 8000f9c:	6832      	ldr	r2, [r6, #0]
      TIM2->CCR4 = (65535 - BLUE * 255);
 8000f9e:	681b      	ldr	r3, [r3, #0]
      TIM2->CCR2 = (65535 - RED * 255);
 8000fa0:	eba1 2101 	sub.w	r1, r1, r1, lsl #8
      TIM2->CCR3 = (65535 - GREEN * 255);
 8000fa4:	eba2 2202 	sub.w	r2, r2, r2, lsl #8
      TIM2->CCR4 = (65535 - BLUE * 255);
 8000fa8:	eba3 2303 	sub.w	r3, r3, r3, lsl #8
      TIM2->CCR2 = (65535 - RED * 255);
 8000fac:	4421      	add	r1, r4
      TIM2->CCR3 = (65535 - GREEN * 255);
 8000fae:	4422      	add	r2, r4
      TIM2->CCR4 = (65535 - BLUE * 255);
 8000fb0:	4423      	add	r3, r4
      TIM2->CCR2 = (65535 - RED * 255);
 8000fb2:	6381      	str	r1, [r0, #56]	; 0x38
      TIM2->CCR3 = (65535 - GREEN * 255);
 8000fb4:	63c2      	str	r2, [r0, #60]	; 0x3c
      TIM2->CCR4 = (65535 - BLUE * 255);
 8000fb6:	6403      	str	r3, [r0, #64]	; 0x40
    }
    else if (strcmp(data_buffer, "TOGGLE_LED") == 0) {
      transmitLEDState();
    }
    count = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	702b      	strb	r3, [r5, #0]
  } else {
    data_buffer[count++] = UART1_rxBuffer; // every time when interrput is
  }
  // start next data receive interrupt

  HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	490a      	ldr	r1, [pc, #40]	; (8000fe8 <HAL_UART_RxCpltCallback+0xac>)
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <HAL_UART_RxCpltCallback+0xb8>)
}
 8000fc2:	b011      	add	sp, #68	; 0x44
 8000fc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 8000fc8:	f001 bf53 	b.w	8002e72 <HAL_UART_Receive_IT>
    else if (strcmp(data_buffer, "TOGGLE_LED") == 0) {
 8000fcc:	4620      	mov	r0, r4
 8000fce:	490e      	ldr	r1, [pc, #56]	; (8001008 <HAL_UART_RxCpltCallback+0xcc>)
 8000fd0:	f7ff f8be 	bl	8000150 <strcmp>
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	d1ef      	bne.n	8000fb8 <HAL_UART_RxCpltCallback+0x7c>
      transmitLEDState();
 8000fd8:	f7ff fddc 	bl	8000b94 <transmitLEDState>
 8000fdc:	e7ec      	b.n	8000fb8 <HAL_UART_RxCpltCallback+0x7c>
    data_buffer[count++] = UART1_rxBuffer; // every time when interrput is
 8000fde:	54a1      	strb	r1, [r4, r2]
 8000fe0:	e7ec      	b.n	8000fbc <HAL_UART_RxCpltCallback+0x80>
 8000fe2:	bf00      	nop
 8000fe4:	200001fd 	.word	0x200001fd
 8000fe8:	200001fc 	.word	0x200001fc
 8000fec:	20000204 	.word	0x20000204
 8000ff0:	08005c1d 	.word	0x08005c1d
 8000ff4:	200002e0 	.word	0x200002e0
 8000ff8:	08005c22 	.word	0x08005c22
 8000ffc:	200001f4 	.word	0x200001f4
 8001000:	200001f8 	.word	0x200001f8
 8001004:	200001f0 	.word	0x200001f0
 8001008:	08005c27 	.word	0x08005c27

0800100c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_MspInit+0x3c>)
{
 800100e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001010:	699a      	ldr	r2, [r3, #24]
 8001012:	f042 0201 	orr.w	r2, r2, #1
 8001016:	619a      	str	r2, [r3, #24]
 8001018:	699a      	ldr	r2, [r3, #24]
 800101a:	f002 0201 	and.w	r2, r2, #1
 800101e:	9200      	str	r2, [sp, #0]
 8001020:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	69da      	ldr	r2, [r3, #28]
 8001024:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001028:	61da      	str	r2, [r3, #28]
 800102a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001036:	6853      	ldr	r3, [r2, #4]
 8001038:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800103c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001040:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	b002      	add	sp, #8
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000

08001050 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	2210      	movs	r2, #16
{
 8001052:	b510      	push	{r4, lr}
 8001054:	4604      	mov	r4, r0
 8001056:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	eb0d 0002 	add.w	r0, sp, r2
 800105c:	2100      	movs	r1, #0
 800105e:	f002 fcbe 	bl	80039de <memset>
  if(hadc->Instance==ADC1)
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <HAL_ADC_MspInit+0x70>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10b      	bne.n	8001082 <HAL_ADC_MspInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_ADC_MspInit+0x74>)
 800106c:	699a      	ldr	r2, [r3, #24]
 800106e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001072:	619a      	str	r2, [r3, #24]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800107e:	b008      	add	sp, #32
 8001080:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 8001082:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <HAL_ADC_MspInit+0x78>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d1fa      	bne.n	800107e <HAL_ADC_MspInit+0x2e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_ADC_MspInit+0x74>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	4810      	ldr	r0, [pc, #64]	; (80010cc <HAL_ADC_MspInit+0x7c>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800108c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001090:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001094:	619a      	str	r2, [r3, #24]
 8001096:	699a      	ldr	r2, [r3, #24]
 8001098:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800109c:	9202      	str	r2, [sp, #8]
 800109e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	699a      	ldr	r2, [r3, #24]
 80010a2:	f042 0204 	orr.w	r2, r2, #4
 80010a6:	619a      	str	r2, [r3, #24]
 80010a8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010aa:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	9303      	str	r3, [sp, #12]
 80010b2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f000 fcad 	bl	8001a18 <HAL_GPIO_Init>
}
 80010be:	e7de      	b.n	800107e <HAL_ADC_MspInit+0x2e>
 80010c0:	40012400 	.word	0x40012400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40012800 	.word	0x40012800
 80010cc:	40010800 	.word	0x40010800

080010d0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80010d0:	6803      	ldr	r3, [r0, #0]
{
 80010d2:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80010d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d8:	d10a      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80010de:	69da      	ldr	r2, [r3, #28]
 80010e0:	f042 0201 	orr.w	r2, r2, #1
 80010e4:	61da      	str	r2, [r3, #28]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f0:	b002      	add	sp, #8
 80010f2:	4770      	bx	lr

080010f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f4:	b510      	push	{r4, lr}
 80010f6:	4604      	mov	r4, r0
 80010f8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	2210      	movs	r2, #16
 80010fc:	2100      	movs	r1, #0
 80010fe:	a802      	add	r0, sp, #8
 8001100:	f002 fc6d 	bl	80039de <memset>
  if(htim->Instance==TIM2)
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110a:	d113      	bne.n	8001134 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001110:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = RGB_RED_Pin|RGB_GREEN_Pin|RGB_BLUE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	f042 0204 	orr.w	r2, r2, #4
 8001118:	619a      	str	r2, [r3, #24]
 800111a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	220e      	movs	r2, #14
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f000 fc72 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001134:	b006      	add	sp, #24
 8001136:	bd10      	pop	{r4, pc}
 8001138:	40010800 	.word	0x40010800

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b510      	push	{r4, lr}
 800113e:	4604      	mov	r4, r0
 8001140:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	2210      	movs	r2, #16
 8001144:	2100      	movs	r1, #0
 8001146:	a802      	add	r0, sp, #8
 8001148:	f002 fc49 	bl	80039de <memset>
  if(huart->Instance==USART1)
 800114c:	6822      	ldr	r2, [r4, #0]
 800114e:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001150:	429a      	cmp	r2, r3
 8001152:	d130      	bne.n	80011b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001154:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001158:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	4819      	ldr	r0, [pc, #100]	; (80011c0 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800115c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001160:	619a      	str	r2, [r3, #24]
 8001162:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001166:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800116a:	9200      	str	r2, [sp, #0]
 800116c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	f042 0204 	orr.w	r2, r2, #4
 8001176:	619a      	str	r2, [r3, #24]
 8001178:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f000 fc42 	bl	8001a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <HAL_UART_MspInit+0x84>)
 800119a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f000 fc39 	bl	8001a18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011a6:	2025      	movs	r0, #37	; 0x25
 80011a8:	4622      	mov	r2, r4
 80011aa:	4621      	mov	r1, r4
 80011ac:	f000 fb7a 	bl	80018a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011b0:	2025      	movs	r0, #37	; 0x25
 80011b2:	f000 fba7 	bl	8001904 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011b6:	b006      	add	sp, #24
 80011b8:	bd10      	pop	{r4, pc}
 80011ba:	bf00      	nop
 80011bc:	40013800 	.word	0x40013800
 80011c0:	40010800 	.word	0x40010800

080011c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler>

080011c6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler>

080011c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler>

080011ca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler>

080011cc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <UsageFault_Handler>

080011ce <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:
 80011d0:	4770      	bx	lr

080011d2 <PendSV_Handler>:
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d4:	f000 b8c0 	b.w	8001358 <HAL_IncTick>

080011d8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSHBTN_INT_Pin);
 80011d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011dc:	f000 bd06 	b.w	8001bec <HAL_GPIO_EXTI_IRQHandler>

080011e0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011e0:	4801      	ldr	r0, [pc, #4]	; (80011e8 <USART1_IRQHandler+0x8>)
 80011e2:	f001 bce3 	b.w	8002bac <HAL_UART_IRQHandler>
 80011e6:	bf00      	nop
 80011e8:	200002e0 	.word	0x200002e0

080011ec <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 80011ec:	2001      	movs	r0, #1
 80011ee:	4770      	bx	lr

080011f0 <_kill>:

int _kill(int pid, int sig) {
 80011f0:	b508      	push	{r3, lr}
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80011f2:	f002 fc59 	bl	8003aa8 <__errno>
 80011f6:	2316      	movs	r3, #22
 80011f8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80011fa:	f04f 30ff 	mov.w	r0, #4294967295
 80011fe:	bd08      	pop	{r3, pc}

08001200 <_exit>:

void _exit(int status) {
 8001200:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001202:	f002 fc51 	bl	8003aa8 <__errno>
 8001206:	2316      	movs	r3, #22
 8001208:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {
 800120a:	e7fe      	b.n	800120a <_exit+0xa>

0800120c <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	460d      	mov	r5, r1
 8001210:	4614      	mov	r4, r2
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001212:	460e      	mov	r6, r1
 8001214:	1b73      	subs	r3, r6, r5
 8001216:	429c      	cmp	r4, r3
 8001218:	dc01      	bgt.n	800121e <_read+0x12>
		*ptr++ = __io_getchar();
	}

	return len;
}
 800121a:	4620      	mov	r0, r4
 800121c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800121e:	f3af 8000 	nop.w
 8001222:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001226:	e7f5      	b.n	8001214 <_read+0x8>

08001228 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	460d      	mov	r5, r1
 800122c:	4614      	mov	r4, r2
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800122e:	460e      	mov	r6, r1
 8001230:	1b73      	subs	r3, r6, r5
 8001232:	429c      	cmp	r4, r3
 8001234:	dc01      	bgt.n	800123a <_write+0x12>
		__io_putchar(*ptr++);
	}
	return len;
}
 8001236:	4620      	mov	r0, r4
 8001238:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800123a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800123e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001242:	e7f5      	b.n	8001230 <_write+0x8>

08001244 <_close>:

int _close(int file) {
	(void) file;
	return -1;
}
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	4770      	bx	lr

0800124a <_fstat>:

int _fstat(int file, struct stat *st) {
	(void) file;
	st->st_mode = S_IFCHR;
 800124a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800124e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001250:	604b      	str	r3, [r1, #4]
}
 8001252:	4770      	bx	lr

08001254 <_isatty>:

int _isatty(int file) {
	(void) file;
	return 1;
}
 8001254:	2001      	movs	r0, #1
 8001256:	4770      	bx	lr

08001258 <_lseek>:
int _lseek(int file, int ptr, int dir) {
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
}
 8001258:	2000      	movs	r0, #0
 800125a:	4770      	bx	lr

0800125c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800125c:	4a0b      	ldr	r2, [pc, #44]	; (800128c <_sbrk+0x30>)
{
 800125e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001260:	6811      	ldr	r1, [r2, #0]
{
 8001262:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001264:	b909      	cbnz	r1, 800126a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001266:	490a      	ldr	r1, [pc, #40]	; (8001290 <_sbrk+0x34>)
 8001268:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126a:	6810      	ldr	r0, [r2, #0]
 800126c:	4909      	ldr	r1, [pc, #36]	; (8001294 <_sbrk+0x38>)
 800126e:	4c0a      	ldr	r4, [pc, #40]	; (8001298 <_sbrk+0x3c>)
 8001270:	4403      	add	r3, r0
 8001272:	1b09      	subs	r1, r1, r4
 8001274:	428b      	cmp	r3, r1
 8001276:	d906      	bls.n	8001286 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001278:	f002 fc16 	bl	8003aa8 <__errno>
 800127c:	230c      	movs	r3, #12
 800127e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001280:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001284:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001286:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001288:	e7fc      	b.n	8001284 <_sbrk+0x28>
 800128a:	bf00      	nop
 800128c:	2000032c 	.word	0x2000032c
 8001290:	20000480 	.word	0x20000480
 8001294:	20002800 	.word	0x20002800
 8001298:	00000400 	.word	0x00000400

0800129c <SystemInit>:

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800129c:	4770      	bx	lr
	...

080012a0 <Reset_Handler>:
 80012a0:	f7ff fffc 	bl	800129c <SystemInit>
 80012a4:	480b      	ldr	r0, [pc, #44]	; (80012d4 <LoopFillZerobss+0xe>)
 80012a6:	490c      	ldr	r1, [pc, #48]	; (80012d8 <LoopFillZerobss+0x12>)
 80012a8:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <LoopFillZerobss+0x16>)
 80012aa:	2300      	movs	r3, #0
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:
 80012ae:	58d4      	ldr	r4, [r2, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:
 80012b4:	18c4      	adds	r4, r0, r3
 80012b6:	428c      	cmp	r4, r1
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <LoopFillZerobss+0x1a>)
 80012bc:	4c09      	ldr	r4, [pc, #36]	; (80012e4 <LoopFillZerobss+0x1e>)
 80012be:	2300      	movs	r3, #0
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:
 80012c6:	42a2      	cmp	r2, r4
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>
 80012ca:	f002 fbf3 	bl	8003ab4 <__libc_init_array>
 80012ce:	f7ff fcbb 	bl	8000c48 <main>
 80012d2:	4770      	bx	lr
 80012d4:	20000000 	.word	0x20000000
 80012d8:	200001d4 	.word	0x200001d4
 80012dc:	08005fe4 	.word	0x08005fe4
 80012e0:	200001d4 	.word	0x200001d4
 80012e4:	20000480 	.word	0x20000480

080012e8 <ADC1_2_IRQHandler>:
 80012e8:	e7fe      	b.n	80012e8 <ADC1_2_IRQHandler>
	...

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_InitTick+0x3c>)
{
 80012f0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <HAL_InitTick+0x40>)
 80012fe:	6810      	ldr	r0, [r2, #0]
 8001300:	fbb0 f0f3 	udiv	r0, r0, r3
 8001304:	f000 fb0c 	bl	8001920 <HAL_SYSTICK_Config>
 8001308:	4604      	mov	r4, r0
 800130a:	b958      	cbnz	r0, 8001324 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130c:	2d0f      	cmp	r5, #15
 800130e:	d809      	bhi.n	8001324 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	4602      	mov	r2, r0
 8001312:	4629      	mov	r1, r5
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f000 fac4 	bl	80018a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4620      	mov	r0, r4
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_InitTick+0x44>)
 8001320:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001322:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001324:	2001      	movs	r0, #1
 8001326:	e7fc      	b.n	8001322 <HAL_InitTick+0x36>
 8001328:	20000004 	.word	0x20000004
 800132c:	20000000 	.word	0x20000000
 8001330:	20000008 	.word	0x20000008

08001334 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_Init+0x20>)
{
 8001336:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001338:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	f043 0310 	orr.w	r3, r3, #16
 8001340:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001342:	f000 fa9d 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	200f      	movs	r0, #15
 8001348:	f7ff ffd0 	bl	80012ec <HAL_InitTick>
  HAL_MspInit();
 800134c:	f7ff fe5e 	bl	800100c <HAL_MspInit>
}
 8001350:	2000      	movs	r0, #0
 8001352:	bd08      	pop	{r3, pc}
 8001354:	40022000 	.word	0x40022000

08001358 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001358:	4a03      	ldr	r2, [pc, #12]	; (8001368 <HAL_IncTick+0x10>)
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <HAL_IncTick+0x14>)
 800135c:	6811      	ldr	r1, [r2, #0]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	440b      	add	r3, r1
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000330 	.word	0x20000330
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001370:	4b01      	ldr	r3, [pc, #4]	; (8001378 <HAL_GetTick+0x8>)
 8001372:	6818      	ldr	r0, [r3, #0]
}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000330 	.word	0x20000330

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b538      	push	{r3, r4, r5, lr}
 800137e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff fff6 	bl	8001370 <HAL_GetTick>
 8001384:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001388:	bf1e      	ittt	ne
 800138a:	4b04      	ldrne	r3, [pc, #16]	; (800139c <HAL_Delay+0x20>)
 800138c:	781b      	ldrbne	r3, [r3, #0]
 800138e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001390:	f7ff ffee 	bl	8001370 <HAL_GetTick>
 8001394:	1b43      	subs	r3, r0, r5
 8001396:	42a3      	cmp	r3, r4
 8001398:	d3fa      	bcc.n	8001390 <HAL_Delay+0x14>
  {
  }
}
 800139a:	bd38      	pop	{r3, r4, r5, pc}
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80013a2:	2600      	movs	r6, #0
{
 80013a4:	4604      	mov	r4, r0
 80013a6:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80013a8:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80013aa:	f7ff ffe1 	bl	8001370 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013ae:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80013b0:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	05d2      	lsls	r2, r2, #23
 80013b6:	d508      	bpl.n	80013ca <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80013b8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80013bc:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80013c6:	b003      	add	sp, #12
 80013c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	05d6      	lsls	r6, r2, #23
 80013ce:	d403      	bmi.n	80013d8 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013d2:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80013d6:	d03f      	beq.n	8001458 <HAL_ADC_PollForConversion+0xb8>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013d8:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <HAL_ADC_PollForConversion+0x140>)
 80013da:	2002      	movs	r0, #2
 80013dc:	681e      	ldr	r6, [r3, #0]
 80013de:	f000 ff09 	bl	80021f4 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <HAL_ADC_PollForConversion+0x144>)
 80013e6:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013e8:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80013ec:	4211      	tst	r1, r2
 80013ee:	4a3e      	ldr	r2, [pc, #248]	; (80014e8 <HAL_ADC_PollForConversion+0x148>)
 80013f0:	d153      	bne.n	800149a <HAL_ADC_PollForConversion+0xfa>
 80013f2:	68d8      	ldr	r0, [r3, #12]
 80013f4:	493d      	ldr	r1, [pc, #244]	; (80014ec <HAL_ADC_PollForConversion+0x14c>)
 80013f6:	4208      	tst	r0, r1
 80013f8:	d14f      	bne.n	800149a <HAL_ADC_PollForConversion+0xfa>
 80013fa:	6919      	ldr	r1, [r3, #16]
 80013fc:	4211      	tst	r1, r2
 80013fe:	d15d      	bne.n	80014bc <HAL_ADC_PollForConversion+0x11c>
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <HAL_ADC_PollForConversion+0x150>)
 8001404:	421a      	tst	r2, r3
 8001406:	bf14      	ite	ne
 8001408:	2329      	movne	r3, #41	; 0x29
 800140a:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800140c:	435e      	muls	r6, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800140e:	9b01      	ldr	r3, [sp, #4]
 8001410:	42b3      	cmp	r3, r6
 8001412:	d225      	bcs.n	8001460 <HAL_ADC_PollForConversion+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8001414:	1c6a      	adds	r2, r5, #1
 8001416:	d05c      	beq.n	80014d2 <HAL_ADC_PollForConversion+0x132>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001418:	2d00      	cmp	r5, #0
 800141a:	d155      	bne.n	80014c8 <HAL_ADC_PollForConversion+0x128>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800141c:	9b01      	ldr	r3, [sp, #4]
 800141e:	42b3      	cmp	r3, r6
 8001420:	d257      	bcs.n	80014d2 <HAL_ADC_PollForConversion+0x132>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001422:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	62a3      	str	r3, [r4, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 800142a:	2300      	movs	r3, #0
 800142c:	e00b      	b.n	8001446 <HAL_ADC_PollForConversion+0xa6>
      if(Timeout != HAL_MAX_DELAY)
 800142e:	1c68      	adds	r0, r5, #1
 8001430:	d013      	beq.n	800145a <HAL_ADC_PollForConversion+0xba>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001432:	b965      	cbnz	r5, 800144e <HAL_ADC_PollForConversion+0xae>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f013 0302 	ands.w	r3, r3, #2
 800143c:	d10c      	bne.n	8001458 <HAL_ADC_PollForConversion+0xb8>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800143e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001440:	f042 0204 	orr.w	r2, r2, #4
 8001444:	62a2      	str	r2, [r4, #40]	; 0x28
            return HAL_TIMEOUT;
 8001446:	2003      	movs	r0, #3
            __HAL_UNLOCK(hadc);
 8001448:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            return HAL_TIMEOUT;
 800144c:	e7bb      	b.n	80013c6 <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800144e:	f7ff ff8f 	bl	8001370 <HAL_GetTick>
 8001452:	1bc0      	subs	r0, r0, r7
 8001454:	42a8      	cmp	r0, r5
 8001456:	d8ed      	bhi.n	8001434 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001458:	6822      	ldr	r2, [r4, #0]
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	0799      	lsls	r1, r3, #30
 800145e:	d5e6      	bpl.n	800142e <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001460:	f06f 0312 	mvn.w	r3, #18
 8001464:	6822      	ldr	r2, [r4, #0]
 8001466:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001468:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800146a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146e:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001470:	6893      	ldr	r3, [r2, #8]
 8001472:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001476:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800147a:	d12e      	bne.n	80014da <HAL_ADC_PollForConversion+0x13a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800147c:	7b20      	ldrb	r0, [r4, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800147e:	2800      	cmp	r0, #0
 8001480:	d12b      	bne.n	80014da <HAL_ADC_PollForConversion+0x13a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001482:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001488:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800148a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800148c:	04db      	lsls	r3, r3, #19
 800148e:	d424      	bmi.n	80014da <HAL_ADC_PollForConversion+0x13a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001490:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	62a3      	str	r3, [r4, #40]	; 0x28
 8001498:	e795      	b.n	80013c6 <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800149a:	6919      	ldr	r1, [r3, #16]
 800149c:	4211      	tst	r1, r2
 800149e:	d103      	bne.n	80014a8 <HAL_ADC_PollForConversion+0x108>
 80014a0:	68d9      	ldr	r1, [r3, #12]
 80014a2:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <HAL_ADC_PollForConversion+0x150>)
 80014a4:	4211      	tst	r1, r2
 80014a6:	d00b      	beq.n	80014c0 <HAL_ADC_PollForConversion+0x120>
 80014a8:	6919      	ldr	r1, [r3, #16]
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <HAL_ADC_PollForConversion+0x154>)
 80014ac:	4211      	tst	r1, r2
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_PollForConversion+0x124>
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	4213      	tst	r3, r2
 80014b4:	bf14      	ite	ne
 80014b6:	23fc      	movne	r3, #252	; 0xfc
 80014b8:	2354      	moveq	r3, #84	; 0x54
 80014ba:	e7a7      	b.n	800140c <HAL_ADC_PollForConversion+0x6c>
 80014bc:	2329      	movs	r3, #41	; 0x29
 80014be:	e7a5      	b.n	800140c <HAL_ADC_PollForConversion+0x6c>
 80014c0:	2354      	movs	r3, #84	; 0x54
 80014c2:	e7a3      	b.n	800140c <HAL_ADC_PollForConversion+0x6c>
 80014c4:	23fc      	movs	r3, #252	; 0xfc
 80014c6:	e7a1      	b.n	800140c <HAL_ADC_PollForConversion+0x6c>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014c8:	f7ff ff52 	bl	8001370 <HAL_GetTick>
 80014cc:	1bc0      	subs	r0, r0, r7
 80014ce:	42a8      	cmp	r0, r5
 80014d0:	d8a4      	bhi.n	800141c <HAL_ADC_PollForConversion+0x7c>
      Conversion_Timeout_CPU_cycles ++;
 80014d2:	9b01      	ldr	r3, [sp, #4]
 80014d4:	3301      	adds	r3, #1
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	e799      	b.n	800140e <HAL_ADC_PollForConversion+0x6e>
  return HAL_OK;
 80014da:	2000      	movs	r0, #0
 80014dc:	e773      	b.n	80013c6 <HAL_ADC_PollForConversion+0x26>
 80014de:	bf00      	nop
 80014e0:	20000000 	.word	0x20000000
 80014e4:	24924924 	.word	0x24924924
 80014e8:	12492492 	.word	0x12492492
 80014ec:	00924924 	.word	0x00924924
 80014f0:	00492492 	.word	0x00492492
 80014f4:	00249249 	.word	0x00249249

080014f8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014f8:	6803      	ldr	r3, [r0, #0]
 80014fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001500:	2300      	movs	r3, #0
{ 
 8001502:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001504:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001506:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800150a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800150c:	2b01      	cmp	r3, #1
 800150e:	d06c      	beq.n	80015ea <HAL_ADC_ConfigChannel+0xea>
 8001510:	2301      	movs	r3, #1
 8001512:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001516:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001518:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 800151a:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800151c:	6808      	ldr	r0, [r1, #0]
 800151e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8001522:	d822      	bhi.n	800156a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001524:	261f      	movs	r6, #31
 8001526:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001528:	3b05      	subs	r3, #5
 800152a:	409e      	lsls	r6, r3
 800152c:	ea25 0506 	bic.w	r5, r5, r6
 8001530:	fa00 f303 	lsl.w	r3, r0, r3
 8001534:	432b      	orrs	r3, r5
 8001536:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001538:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800153a:	688b      	ldr	r3, [r1, #8]
 800153c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001540:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001544:	d929      	bls.n	800159a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001546:	68d6      	ldr	r6, [r2, #12]
 8001548:	3d1e      	subs	r5, #30
 800154a:	40a9      	lsls	r1, r5
 800154c:	ea26 0101 	bic.w	r1, r6, r1
 8001550:	40ab      	lsls	r3, r5
 8001552:	430b      	orrs	r3, r1
 8001554:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001556:	f1a0 0310 	sub.w	r3, r0, #16
 800155a:	2b01      	cmp	r3, #1
 800155c:	d925      	bls.n	80015aa <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155e:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001560:	2300      	movs	r3, #0
 8001562:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001566:	b002      	add	sp, #8
 8001568:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800156a:	2d0c      	cmp	r5, #12
 800156c:	f04f 051f 	mov.w	r5, #31
 8001570:	d809      	bhi.n	8001586 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001572:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001574:	3b23      	subs	r3, #35	; 0x23
 8001576:	409d      	lsls	r5, r3
 8001578:	ea26 0505 	bic.w	r5, r6, r5
 800157c:	fa00 f303 	lsl.w	r3, r0, r3
 8001580:	432b      	orrs	r3, r5
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	e7d8      	b.n	8001538 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001586:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001588:	3b41      	subs	r3, #65	; 0x41
 800158a:	409d      	lsls	r5, r3
 800158c:	ea26 0505 	bic.w	r5, r6, r5
 8001590:	fa00 f303 	lsl.w	r3, r0, r3
 8001594:	432b      	orrs	r3, r5
 8001596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001598:	e7ce      	b.n	8001538 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800159a:	6910      	ldr	r0, [r2, #16]
 800159c:	40a9      	lsls	r1, r5
 800159e:	ea20 0101 	bic.w	r1, r0, r1
 80015a2:	40ab      	lsls	r3, r5
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6113      	str	r3, [r2, #16]
 80015a8:	e7d9      	b.n	800155e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_ADC_ConfigChannel+0xf0>)
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d116      	bne.n	80015de <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015b0:	6893      	ldr	r3, [r2, #8]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	d4d3      	bmi.n	800155e <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015b6:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015b8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015be:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015c0:	d1cd      	bne.n	800155e <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_ADC_ConfigChannel+0xf4>)
 80015c4:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <HAL_ADC_ConfigChannel+0xf8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015cc:	220a      	movs	r2, #10
 80015ce:	4353      	muls	r3, r2
            wait_loop_index--;
 80015d0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80015d2:	9b01      	ldr	r3, [sp, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0c2      	beq.n	800155e <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80015d8:	9b01      	ldr	r3, [sp, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	e7f8      	b.n	80015d0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80015e0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e2:	f043 0320 	orr.w	r3, r3, #32
 80015e6:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80015e8:	e7ba      	b.n	8001560 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80015ea:	2002      	movs	r0, #2
 80015ec:	e7bb      	b.n	8001566 <HAL_ADC_ConfigChannel+0x66>
 80015ee:	bf00      	nop
 80015f0:	40012400 	.word	0x40012400
 80015f4:	20000000 	.word	0x20000000
 80015f8:	000f4240 	.word	0x000f4240

080015fc <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80015fc:	2300      	movs	r3, #0
{
 80015fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001600:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001602:	6803      	ldr	r3, [r0, #0]
{
 8001604:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	07d2      	lsls	r2, r2, #31
 800160a:	d502      	bpl.n	8001612 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800160c:	2000      	movs	r0, #0
}
 800160e:	b003      	add	sp, #12
 8001610:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <ADC_Enable+0x70>)
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <ADC_Enable+0x74>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001624:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001626:	9b01      	ldr	r3, [sp, #4]
 8001628:	b9e3      	cbnz	r3, 8001664 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800162a:	f7ff fea1 	bl	8001370 <HAL_GetTick>
 800162e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001630:	6823      	ldr	r3, [r4, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	07db      	lsls	r3, r3, #31
 8001636:	d4e9      	bmi.n	800160c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001638:	f7ff fe9a 	bl	8001370 <HAL_GetTick>
 800163c:	1b40      	subs	r0, r0, r5
 800163e:	2802      	cmp	r0, #2
 8001640:	d9f6      	bls.n	8001630 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f013 0301 	ands.w	r3, r3, #1
 800164a:	d1f1      	bne.n	8001630 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001650:	f042 0210 	orr.w	r2, r2, #16
 8001654:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001656:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001658:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001662:	e7d4      	b.n	800160e <ADC_Enable+0x12>
      wait_loop_index--;
 8001664:	9b01      	ldr	r3, [sp, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	e7dc      	b.n	8001624 <ADC_Enable+0x28>
 800166a:	bf00      	nop
 800166c:	20000000 	.word	0x20000000
 8001670:	000f4240 	.word	0x000f4240

08001674 <HAL_ADC_Start>:
{
 8001674:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001676:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800167a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800167c:	2b01      	cmp	r3, #1
 800167e:	d054      	beq.n	800172a <HAL_ADC_Start+0xb6>
 8001680:	2301      	movs	r3, #1
 8001682:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001686:	f7ff ffb9 	bl	80015fc <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800168a:	2800      	cmp	r0, #0
 800168c:	d149      	bne.n	8001722 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800168e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001690:	4a27      	ldr	r2, [pc, #156]	; (8001730 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8001692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d104      	bne.n	80016b0 <HAL_ADC_Start+0x3c>
 80016a6:	4923      	ldr	r1, [pc, #140]	; (8001734 <HAL_ADC_Start+0xc0>)
 80016a8:	684a      	ldr	r2, [r1, #4]
 80016aa:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80016ae:	d12e      	bne.n	800170e <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016b2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80016b6:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016b8:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016ba:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016bc:	bf41      	itttt	mi
 80016be:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80016c0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80016c4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80016c8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016d0:	bf1c      	itt	ne
 80016d2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80016d4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80016d8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80016da:	2200      	movs	r2, #0
 80016dc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016e0:	f06f 0202 	mvn.w	r2, #2
 80016e4:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80016ec:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80016f0:	d113      	bne.n	800171a <HAL_ADC_Start+0xa6>
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_ADC_Start+0xbc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016f8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80016fc:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016fe:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001702:	d10a      	bne.n	800171a <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800170a:	609a      	str	r2, [r3, #8]
}
 800170c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800170e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001710:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001714:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001716:	684a      	ldr	r2, [r1, #4]
 8001718:	e7cf      	b.n	80016ba <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001720:	e7f3      	b.n	800170a <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8001722:	2300      	movs	r3, #0
 8001724:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001728:	e7f0      	b.n	800170c <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 800172a:	2002      	movs	r0, #2
 800172c:	e7ee      	b.n	800170c <HAL_ADC_Start+0x98>
 800172e:	bf00      	nop
 8001730:	40012800 	.word	0x40012800
 8001734:	40012400 	.word	0x40012400

08001738 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001738:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800173a:	6803      	ldr	r3, [r0, #0]
{
 800173c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	07d1      	lsls	r1, r2, #31
 8001742:	d401      	bmi.n	8001748 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001744:	2000      	movs	r0, #0
}
 8001746:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001750:	f7ff fe0e 	bl	8001370 <HAL_GetTick>
 8001754:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	07db      	lsls	r3, r3, #31
 800175c:	d5f2      	bpl.n	8001744 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800175e:	f7ff fe07 	bl	8001370 <HAL_GetTick>
 8001762:	1b40      	subs	r0, r0, r5
 8001764:	2802      	cmp	r0, #2
 8001766:	d9f6      	bls.n	8001756 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	07da      	lsls	r2, r3, #31
 800176e:	d5f2      	bpl.n	8001756 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001772:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001782:	e7e0      	b.n	8001746 <ADC_ConversionStop_Disable+0xe>

08001784 <HAL_ADC_Init>:
{
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8001786:	4604      	mov	r4, r0
 8001788:	2800      	cmp	r0, #0
 800178a:	d06d      	beq.n	8001868 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800178c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800178e:	b923      	cbnz	r3, 800179a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001790:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001792:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001796:	f7ff fc5b 	bl	8001050 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800179a:	4620      	mov	r0, r4
 800179c:	f7ff ffcc 	bl	8001738 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017a2:	f013 0310 	ands.w	r3, r3, #16
 80017a6:	d161      	bne.n	800186c <HAL_ADC_Init+0xe8>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d15f      	bne.n	800186c <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 80017ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017ae:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80017b0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80017b4:	f022 0202 	bic.w	r2, r2, #2
 80017b8:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017bc:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017be:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80017c0:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017c2:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017c4:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017c6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017ca:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017ce:	d036      	beq.n	800183e <HAL_ADC_Init+0xba>
 80017d0:	1e77      	subs	r7, r6, #1
 80017d2:	427d      	negs	r5, r7
 80017d4:	417d      	adcs	r5, r7
 80017d6:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d8:	7d27      	ldrb	r7, [r4, #20]
 80017da:	2f01      	cmp	r7, #1
 80017dc:	d106      	bne.n	80017ec <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017de:	bb82      	cbnz	r2, 8001842 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017e0:	69a2      	ldr	r2, [r4, #24]
 80017e2:	3a01      	subs	r2, #1
 80017e4:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 80017e8:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80017ec:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017ee:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80017f2:	6857      	ldr	r7, [r2, #4]
 80017f4:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 80017f8:	ea45 0507 	orr.w	r5, r5, r7
 80017fc:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80017fe:	6897      	ldr	r7, [r2, #8]
 8001800:	4d1d      	ldr	r5, [pc, #116]	; (8001878 <HAL_ADC_Init+0xf4>)
 8001802:	ea05 0507 	and.w	r5, r5, r7
 8001806:	ea45 0501 	orr.w	r5, r5, r1
 800180a:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800180c:	d001      	beq.n	8001812 <HAL_ADC_Init+0x8e>
 800180e:	2e01      	cmp	r6, #1
 8001810:	d102      	bne.n	8001818 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001812:	6923      	ldr	r3, [r4, #16]
 8001814:	3b01      	subs	r3, #1
 8001816:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001818:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800181a:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800181e:	432b      	orrs	r3, r5
 8001820:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001822:	6892      	ldr	r2, [r2, #8]
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_ADC_Init+0xf8>)
 8001826:	4013      	ands	r3, r2
 8001828:	4299      	cmp	r1, r3
 800182a:	d113      	bne.n	8001854 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 800182c:	2300      	movs	r3, #0
 800182e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800183c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800183e:	4635      	mov	r5, r6
 8001840:	e7ca      	b.n	80017d8 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001842:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001844:	f042 0220 	orr.w	r2, r2, #32
 8001848:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800184c:	f042 0201 	orr.w	r2, r2, #1
 8001850:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001852:	e7cb      	b.n	80017ec <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8001854:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001856:	f023 0312 	bic.w	r3, r3, #18
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001868:	2001      	movs	r0, #1
 800186a:	e7e7      	b.n	800183c <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001874:	e7f8      	b.n	8001868 <HAL_ADC_Init+0xe4>
 8001876:	bf00      	nop
 8001878:	ffe1f7fd 	.word	0xffe1f7fd
 800187c:	ff1f0efe 	.word	0xff1f0efe

08001880 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4907      	ldr	r1, [pc, #28]	; (80018a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001882:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800188e:	0412      	lsls	r2, r2, #16
 8001890:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800189c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a6:	b530      	push	{r4, r5, lr}
 80018a8:	68dc      	ldr	r4, [r3, #12]
 80018aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	bf28      	it	cs
 80018b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c0:	bf94      	ite	ls
 80018c2:	2400      	movls	r4, #0
 80018c4:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c6:	fa05 f303 	lsl.w	r3, r5, r3
 80018ca:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ce:	40a5      	lsls	r5, r4
 80018d0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80018d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	bfac      	ite	ge
 80018de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	4a07      	ldrlt	r2, [pc, #28]	; (8001900 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	bfab      	itete	ge
 80018ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018fa:	bd30      	pop	{r4, r5, pc}
 80018fc:	e000ed00 	.word	0xe000ed00
 8001900:	e000ed14 	.word	0xe000ed14

08001904 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001904:	2800      	cmp	r0, #0
 8001906:	db07      	blt.n	8001918 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001908:	2301      	movs	r3, #1
 800190a:	0941      	lsrs	r1, r0, #5
 800190c:	4a03      	ldr	r2, [pc, #12]	; (800191c <HAL_NVIC_EnableIRQ+0x18>)
 800190e:	f000 001f 	and.w	r0, r0, #31
 8001912:	4083      	lsls	r3, r0
 8001914:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	3801      	subs	r0, #1
 8001922:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001926:	d20b      	bcs.n	8001940 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001928:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	21f0      	movs	r1, #240	; 0xf0
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001930:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001936:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001938:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001940:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001948:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800194c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800194e:	2a02      	cmp	r2, #2
 8001950:	d006      	beq.n	8001960 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001952:	2204      	movs	r2, #4
 8001954:	6382      	str	r2, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8001956:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 800195e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001960:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001962:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001964:	6811      	ldr	r1, [r2, #0]
 8001966:	f021 010e 	bic.w	r1, r1, #14
 800196a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800196c:	6811      	ldr	r1, [r2, #0]
 800196e:	f021 0101 	bic.w	r1, r1, #1
 8001972:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001974:	2101      	movs	r1, #1
 8001976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	6042      	str	r2, [r0, #4]
  return status; 
 800197e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001980:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 8001984:	e7e8      	b.n	8001958 <HAL_DMA_Abort+0x10>
	...

08001988 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001988:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800198a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800198e:	2b02      	cmp	r3, #2
 8001990:	d003      	beq.n	800199a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001992:	2304      	movs	r3, #4
 8001994:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001996:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001998:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800199a:	6803      	ldr	r3, [r0, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	f022 020e 	bic.w	r2, r2, #14
 80019a2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <HAL_DMA_Abort_IT+0x88>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01f      	beq.n	80019f2 <HAL_DMA_Abort_IT+0x6a>
 80019b2:	3214      	adds	r2, #20
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d01e      	beq.n	80019f6 <HAL_DMA_Abort_IT+0x6e>
 80019b8:	3214      	adds	r2, #20
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01d      	beq.n	80019fa <HAL_DMA_Abort_IT+0x72>
 80019be:	3214      	adds	r2, #20
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d01d      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x78>
 80019c4:	3214      	adds	r2, #20
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01d      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x7e>
 80019ca:	3214      	adds	r2, #20
 80019cc:	4293      	cmp	r3, r2
 80019ce:	bf0c      	ite	eq
 80019d0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80019d4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80019da:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019dc:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80019de:	2301      	movs	r3, #1
 80019e0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80019e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80019e6:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80019ea:	b17b      	cbz	r3, 8001a0c <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80019ec:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80019ee:	4620      	mov	r0, r4
 80019f0:	e7d2      	b.n	8001998 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019f2:	2301      	movs	r3, #1
 80019f4:	e7f0      	b.n	80019d8 <HAL_DMA_Abort_IT+0x50>
 80019f6:	2310      	movs	r3, #16
 80019f8:	e7ee      	b.n	80019d8 <HAL_DMA_Abort_IT+0x50>
 80019fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019fe:	e7eb      	b.n	80019d8 <HAL_DMA_Abort_IT+0x50>
 8001a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a04:	e7e8      	b.n	80019d8 <HAL_DMA_Abort_IT+0x50>
 8001a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a0a:	e7e5      	b.n	80019d8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	e7c3      	b.n	8001998 <HAL_DMA_Abort_IT+0x10>
 8001a10:	40020008 	.word	0x40020008
 8001a14:	40020000 	.word	0x40020000

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a1c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001a1e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a20:	4f61      	ldr	r7, [pc, #388]	; (8001ba8 <HAL_GPIO_Init+0x190>)
 8001a22:	4b62      	ldr	r3, [pc, #392]	; (8001bac <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 8001a24:	f8df c188 	ldr.w	ip, [pc, #392]	; 8001bb0 <HAL_GPIO_Init+0x198>
 8001a28:	f8df e188 	ldr.w	lr, [pc, #392]	; 8001bb4 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2c:	680d      	ldr	r5, [r1, #0]
 8001a2e:	fa35 f406 	lsrs.w	r4, r5, r6
 8001a32:	d102      	bne.n	8001a3a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001a34:	b003      	add	sp, #12
 8001a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001a3a:	f04f 0801 	mov.w	r8, #1
 8001a3e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8001a46:	ea38 0505 	bics.w	r5, r8, r5
 8001a4a:	d176      	bne.n	8001b3a <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8001a4c:	684d      	ldr	r5, [r1, #4]
 8001a4e:	2d03      	cmp	r5, #3
 8001a50:	d807      	bhi.n	8001a62 <HAL_GPIO_Init+0x4a>
 8001a52:	3d01      	subs	r5, #1
 8001a54:	2d02      	cmp	r5, #2
 8001a56:	f200 8081 	bhi.w	8001b5c <HAL_GPIO_Init+0x144>
 8001a5a:	e8df f005 	tbb	[pc, r5]
 8001a5e:	9691      	.short	0x9691
 8001a60:	9c          	.byte	0x9c
 8001a61:	00          	.byte	0x00
 8001a62:	2d12      	cmp	r5, #18
 8001a64:	f000 8094 	beq.w	8001b90 <HAL_GPIO_Init+0x178>
 8001a68:	d869      	bhi.n	8001b3e <HAL_GPIO_Init+0x126>
 8001a6a:	2d11      	cmp	r5, #17
 8001a6c:	f000 808a 	beq.w	8001b84 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a70:	2cff      	cmp	r4, #255	; 0xff
 8001a72:	bf98      	it	ls
 8001a74:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a76:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a7a:	bf88      	it	hi
 8001a7c:	f100 0a04 	addhi.w	sl, r0, #4
 8001a80:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a84:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a88:	bf88      	it	hi
 8001a8a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a8c:	fa09 fb05 	lsl.w	fp, r9, r5
 8001a90:	ea28 080b 	bic.w	r8, r8, fp
 8001a94:	fa02 f505 	lsl.w	r5, r2, r5
 8001a98:	ea48 0505 	orr.w	r5, r8, r5
 8001a9c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001aa4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001aa8:	d047      	beq.n	8001b3a <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aaa:	69bd      	ldr	r5, [r7, #24]
 8001aac:	f026 0803 	bic.w	r8, r6, #3
 8001ab0:	f045 0501 	orr.w	r5, r5, #1
 8001ab4:	61bd      	str	r5, [r7, #24]
 8001ab6:	69bd      	ldr	r5, [r7, #24]
 8001ab8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001abc:	f005 0501 	and.w	r5, r5, #1
 8001ac0:	9501      	str	r5, [sp, #4]
 8001ac2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ac6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aca:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001acc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001ad0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ad4:	fa09 f90b 	lsl.w	r9, r9, fp
 8001ad8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001adc:	4d36      	ldr	r5, [pc, #216]	; (8001bb8 <HAL_GPIO_Init+0x1a0>)
 8001ade:	42a8      	cmp	r0, r5
 8001ae0:	d05d      	beq.n	8001b9e <HAL_GPIO_Init+0x186>
 8001ae2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ae6:	42a8      	cmp	r0, r5
 8001ae8:	d05b      	beq.n	8001ba2 <HAL_GPIO_Init+0x18a>
 8001aea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aee:	42a8      	cmp	r0, r5
 8001af0:	bf0c      	ite	eq
 8001af2:	2502      	moveq	r5, #2
 8001af4:	2503      	movne	r5, #3
 8001af6:	fa05 f50b 	lsl.w	r5, r5, fp
 8001afa:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001afe:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b02:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b04:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b08:	bf14      	ite	ne
 8001b0a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b0c:	43a5      	biceq	r5, r4
 8001b0e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b10:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b12:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b16:	bf14      	ite	ne
 8001b18:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b1a:	43a5      	biceq	r5, r4
 8001b1c:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001b1e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b20:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001b24:	bf14      	ite	ne
 8001b26:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b28:	43a5      	biceq	r5, r4
 8001b2a:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001b2c:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b2e:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001b32:	bf14      	ite	ne
 8001b34:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b36:	43a5      	biceq	r5, r4
 8001b38:	601d      	str	r5, [r3, #0]
	position++;
 8001b3a:	3601      	adds	r6, #1
 8001b3c:	e776      	b.n	8001a2c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8001b3e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8001bbc <HAL_GPIO_Init+0x1a4>
 8001b42:	454d      	cmp	r5, r9
 8001b44:	d00a      	beq.n	8001b5c <HAL_GPIO_Init+0x144>
 8001b46:	d815      	bhi.n	8001b74 <HAL_GPIO_Init+0x15c>
 8001b48:	4575      	cmp	r5, lr
 8001b4a:	d007      	beq.n	8001b5c <HAL_GPIO_Init+0x144>
 8001b4c:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 8001b50:	454d      	cmp	r5, r9
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x144>
 8001b54:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001b58:	454d      	cmp	r5, r9
 8001b5a:	d189      	bne.n	8001a70 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b5c:	688a      	ldr	r2, [r1, #8]
 8001b5e:	b1e2      	cbz	r2, 8001b9a <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b60:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001b62:	bf08      	it	eq
 8001b64:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b68:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001b6c:	bf18      	it	ne
 8001b6e:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001b72:	e77d      	b.n	8001a70 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001b74:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001bc0 <HAL_GPIO_Init+0x1a8>
 8001b78:	454d      	cmp	r5, r9
 8001b7a:	d0ef      	beq.n	8001b5c <HAL_GPIO_Init+0x144>
 8001b7c:	4565      	cmp	r5, ip
 8001b7e:	e7ec      	b.n	8001b5a <HAL_GPIO_Init+0x142>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b80:	68ca      	ldr	r2, [r1, #12]
          break;
 8001b82:	e775      	b.n	8001a70 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b84:	68ca      	ldr	r2, [r1, #12]
 8001b86:	3204      	adds	r2, #4
          break;
 8001b88:	e772      	b.n	8001a70 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b8a:	68ca      	ldr	r2, [r1, #12]
 8001b8c:	3208      	adds	r2, #8
          break;
 8001b8e:	e76f      	b.n	8001a70 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b90:	68ca      	ldr	r2, [r1, #12]
 8001b92:	320c      	adds	r2, #12
          break;
 8001b94:	e76c      	b.n	8001a70 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001b96:	2200      	movs	r2, #0
 8001b98:	e76a      	b.n	8001a70 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	e768      	b.n	8001a70 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b9e:	2500      	movs	r5, #0
 8001ba0:	e7a9      	b.n	8001af6 <HAL_GPIO_Init+0xde>
 8001ba2:	2501      	movs	r5, #1
 8001ba4:	e7a7      	b.n	8001af6 <HAL_GPIO_Init+0xde>
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010400 	.word	0x40010400
 8001bb0:	10320000 	.word	0x10320000
 8001bb4:	10120000 	.word	0x10120000
 8001bb8:	40010800 	.word	0x40010800
 8001bbc:	10220000 	.word	0x10220000
 8001bc0:	10310000 	.word	0x10310000

08001bc4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc4:	6883      	ldr	r3, [r0, #8]
 8001bc6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001bc8:	bf14      	ite	ne
 8001bca:	2001      	movne	r0, #1
 8001bcc:	2000      	moveq	r0, #0
 8001bce:	4770      	bx	lr

08001bd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd0:	b10a      	cbz	r2, 8001bd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bd2:	6101      	str	r1, [r0, #16]
  }
}
 8001bd4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bd6:	0409      	lsls	r1, r1, #16
 8001bd8:	e7fb      	b.n	8001bd2 <HAL_GPIO_WritePin+0x2>

08001bda <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bda:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bdc:	ea01 0203 	and.w	r2, r1, r3
 8001be0:	ea21 0103 	bic.w	r1, r1, r3
 8001be4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001be8:	6101      	str	r1, [r0, #16]
}
 8001bea:	4770      	bx	lr

08001bec <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001bee:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bf0:	6951      	ldr	r1, [r2, #20]
 8001bf2:	4201      	tst	r1, r0
 8001bf4:	d002      	beq.n	8001bfc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf6:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf8:	f7ff f988 	bl	8000f0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001bfc:	bd08      	pop	{r3, pc}
 8001bfe:	bf00      	nop
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c08:	4605      	mov	r5, r0
 8001c0a:	b338      	cbz	r0, 8001c5c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0c:	6803      	ldr	r3, [r0, #0]
 8001c0e:	07db      	lsls	r3, r3, #31
 8001c10:	d410      	bmi.n	8001c34 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	682b      	ldr	r3, [r5, #0]
 8001c14:	079f      	lsls	r7, r3, #30
 8001c16:	d45e      	bmi.n	8001cd6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c18:	682b      	ldr	r3, [r5, #0]
 8001c1a:	0719      	lsls	r1, r3, #28
 8001c1c:	f100 8095 	bmi.w	8001d4a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c20:	682b      	ldr	r3, [r5, #0]
 8001c22:	075a      	lsls	r2, r3, #29
 8001c24:	f100 80c1 	bmi.w	8001daa <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c28:	69e8      	ldr	r0, [r5, #28]
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	f040 812c 	bne.w	8001e88 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001c30:	2000      	movs	r0, #0
 8001c32:	e029      	b.n	8001c88 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c34:	4c90      	ldr	r4, [pc, #576]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001c36:	6863      	ldr	r3, [r4, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d007      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c40:	6863      	ldr	r3, [r4, #4]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d10a      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5c>
 8001c4a:	6863      	ldr	r3, [r4, #4]
 8001c4c:	03de      	lsls	r6, r3, #15
 8001c4e:	d507      	bpl.n	8001c60 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	039c      	lsls	r4, r3, #14
 8001c54:	d5dd      	bpl.n	8001c12 <HAL_RCC_OscConfig+0xe>
 8001c56:	686b      	ldr	r3, [r5, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1da      	bne.n	8001c12 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	e013      	b.n	8001c88 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c60:	686b      	ldr	r3, [r5, #4]
 8001c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c66:	d112      	bne.n	8001c8e <HAL_RCC_OscConfig+0x8a>
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c70:	f7ff fb7e 	bl	8001370 <HAL_GetTick>
 8001c74:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	0398      	lsls	r0, r3, #14
 8001c7a:	d4ca      	bmi.n	8001c12 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff fb78 	bl	8001370 <HAL_GetTick>
 8001c80:	1b80      	subs	r0, r0, r6
 8001c82:	2864      	cmp	r0, #100	; 0x64
 8001c84:	d9f7      	bls.n	8001c76 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001c86:	2003      	movs	r0, #3
}
 8001c88:	b002      	add	sp, #8
 8001c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8e:	b99b      	cbnz	r3, 8001cb8 <HAL_RCC_OscConfig+0xb4>
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6023      	str	r3, [r4, #0]
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fb66 	bl	8001370 <HAL_GetTick>
 8001ca4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	0399      	lsls	r1, r3, #14
 8001caa:	d5b2      	bpl.n	8001c12 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fb60 	bl	8001370 <HAL_GetTick>
 8001cb0:	1b80      	subs	r0, r0, r6
 8001cb2:	2864      	cmp	r0, #100	; 0x64
 8001cb4:	d9f7      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xa2>
 8001cb6:	e7e6      	b.n	8001c86 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	d103      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xc4>
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6023      	str	r3, [r4, #0]
 8001cc6:	e7cf      	b.n	8001c68 <HAL_RCC_OscConfig+0x64>
 8001cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd4:	e7cb      	b.n	8001c6e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	4c68      	ldr	r4, [pc, #416]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	6863      	ldr	r3, [r4, #4]
 8001cda:	f013 0f0c 	tst.w	r3, #12
 8001cde:	d007      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce0:	6863      	ldr	r3, [r4, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d110      	bne.n	8001d0c <HAL_RCC_OscConfig+0x108>
 8001cea:	6863      	ldr	r3, [r4, #4]
 8001cec:	03da      	lsls	r2, r3, #15
 8001cee:	d40d      	bmi.n	8001d0c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	079b      	lsls	r3, r3, #30
 8001cf4:	d502      	bpl.n	8001cfc <HAL_RCC_OscConfig+0xf8>
 8001cf6:	692b      	ldr	r3, [r5, #16]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d1af      	bne.n	8001c5c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	696a      	ldr	r2, [r5, #20]
 8001d00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d08:	6023      	str	r3, [r4, #0]
 8001d0a:	e785      	b.n	8001c18 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0c:	692a      	ldr	r2, [r5, #16]
 8001d0e:	4b5b      	ldr	r3, [pc, #364]	; (8001e7c <HAL_RCC_OscConfig+0x278>)
 8001d10:	b16a      	cbz	r2, 8001d2e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d16:	f7ff fb2b 	bl	8001370 <HAL_GetTick>
 8001d1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	079f      	lsls	r7, r3, #30
 8001d20:	d4ec      	bmi.n	8001cfc <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d22:	f7ff fb25 	bl	8001370 <HAL_GetTick>
 8001d26:	1b80      	subs	r0, r0, r6
 8001d28:	2802      	cmp	r0, #2
 8001d2a:	d9f7      	bls.n	8001d1c <HAL_RCC_OscConfig+0x118>
 8001d2c:	e7ab      	b.n	8001c86 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001d2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d30:	f7ff fb1e 	bl	8001370 <HAL_GetTick>
 8001d34:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	0798      	lsls	r0, r3, #30
 8001d3a:	f57f af6d 	bpl.w	8001c18 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fb17 	bl	8001370 <HAL_GetTick>
 8001d42:	1b80      	subs	r0, r0, r6
 8001d44:	2802      	cmp	r0, #2
 8001d46:	d9f6      	bls.n	8001d36 <HAL_RCC_OscConfig+0x132>
 8001d48:	e79d      	b.n	8001c86 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4a:	69aa      	ldr	r2, [r5, #24]
 8001d4c:	4e4a      	ldr	r6, [pc, #296]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001d4e:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <HAL_RCC_OscConfig+0x278>)
 8001d50:	b1e2      	cbz	r2, 8001d8c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001d52:	2201      	movs	r2, #1
 8001d54:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001d58:	f7ff fb0a 	bl	8001370 <HAL_GetTick>
 8001d5c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001d60:	079b      	lsls	r3, r3, #30
 8001d62:	d50d      	bpl.n	8001d80 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d64:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001d68:	4b45      	ldr	r3, [pc, #276]	; (8001e80 <HAL_RCC_OscConfig+0x27c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d70:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001d72:	bf00      	nop
  }
  while (Delay --);
 8001d74:	9b01      	ldr	r3, [sp, #4]
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	9201      	str	r2, [sp, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f9      	bne.n	8001d72 <HAL_RCC_OscConfig+0x16e>
 8001d7e:	e74f      	b.n	8001c20 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d80:	f7ff faf6 	bl	8001370 <HAL_GetTick>
 8001d84:	1b00      	subs	r0, r0, r4
 8001d86:	2802      	cmp	r0, #2
 8001d88:	d9e9      	bls.n	8001d5e <HAL_RCC_OscConfig+0x15a>
 8001d8a:	e77c      	b.n	8001c86 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001d8c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001d90:	f7ff faee 	bl	8001370 <HAL_GetTick>
 8001d94:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001d98:	079f      	lsls	r7, r3, #30
 8001d9a:	f57f af41 	bpl.w	8001c20 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7ff fae7 	bl	8001370 <HAL_GetTick>
 8001da2:	1b00      	subs	r0, r0, r4
 8001da4:	2802      	cmp	r0, #2
 8001da6:	d9f6      	bls.n	8001d96 <HAL_RCC_OscConfig+0x192>
 8001da8:	e76d      	b.n	8001c86 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001daa:	4c33      	ldr	r4, [pc, #204]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001dac:	69e3      	ldr	r3, [r4, #28]
 8001dae:	00d8      	lsls	r0, r3, #3
 8001db0:	d424      	bmi.n	8001dfc <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001db2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	69e3      	ldr	r3, [r4, #28]
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dba:	61e3      	str	r3, [r4, #28]
 8001dbc:	69e3      	ldr	r3, [r4, #28]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	4e2f      	ldr	r6, [pc, #188]	; (8001e84 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	6833      	ldr	r3, [r6, #0]
 8001dca:	05d9      	lsls	r1, r3, #23
 8001dcc:	d518      	bpl.n	8001e00 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dce:	68eb      	ldr	r3, [r5, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d126      	bne.n	8001e22 <HAL_RCC_OscConfig+0x21e>
 8001dd4:	6a23      	ldr	r3, [r4, #32]
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fac8 	bl	8001370 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001de4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de6:	6a23      	ldr	r3, [r4, #32]
 8001de8:	079b      	lsls	r3, r3, #30
 8001dea:	d53f      	bpl.n	8001e6c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001dec:	2f00      	cmp	r7, #0
 8001dee:	f43f af1b 	beq.w	8001c28 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df2:	69e3      	ldr	r3, [r4, #28]
 8001df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df8:	61e3      	str	r3, [r4, #28]
 8001dfa:	e715      	b.n	8001c28 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001dfc:	2700      	movs	r7, #0
 8001dfe:	e7e2      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e00:	6833      	ldr	r3, [r6, #0]
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e08:	f7ff fab2 	bl	8001370 <HAL_GetTick>
 8001e0c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0e:	6833      	ldr	r3, [r6, #0]
 8001e10:	05da      	lsls	r2, r3, #23
 8001e12:	d4dc      	bmi.n	8001dce <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e14:	f7ff faac 	bl	8001370 <HAL_GetTick>
 8001e18:	eba0 0008 	sub.w	r0, r0, r8
 8001e1c:	2864      	cmp	r0, #100	; 0x64
 8001e1e:	d9f6      	bls.n	8001e0e <HAL_RCC_OscConfig+0x20a>
 8001e20:	e731      	b.n	8001c86 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e22:	b9ab      	cbnz	r3, 8001e50 <HAL_RCC_OscConfig+0x24c>
 8001e24:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2a:	f023 0301 	bic.w	r3, r3, #1
 8001e2e:	6223      	str	r3, [r4, #32]
 8001e30:	6a23      	ldr	r3, [r4, #32]
 8001e32:	f023 0304 	bic.w	r3, r3, #4
 8001e36:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e38:	f7ff fa9a 	bl	8001370 <HAL_GetTick>
 8001e3c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3e:	6a23      	ldr	r3, [r4, #32]
 8001e40:	0798      	lsls	r0, r3, #30
 8001e42:	d5d3      	bpl.n	8001dec <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7ff fa94 	bl	8001370 <HAL_GetTick>
 8001e48:	1b80      	subs	r0, r0, r6
 8001e4a:	4540      	cmp	r0, r8
 8001e4c:	d9f7      	bls.n	8001e3e <HAL_RCC_OscConfig+0x23a>
 8001e4e:	e71a      	b.n	8001c86 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	6a23      	ldr	r3, [r4, #32]
 8001e54:	d103      	bne.n	8001e5e <HAL_RCC_OscConfig+0x25a>
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	6223      	str	r3, [r4, #32]
 8001e5c:	e7ba      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1d0>
 8001e5e:	f023 0301 	bic.w	r3, r3, #1
 8001e62:	6223      	str	r3, [r4, #32]
 8001e64:	6a23      	ldr	r3, [r4, #32]
 8001e66:	f023 0304 	bic.w	r3, r3, #4
 8001e6a:	e7b6      	b.n	8001dda <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fa80 	bl	8001370 <HAL_GetTick>
 8001e70:	1b80      	subs	r0, r0, r6
 8001e72:	4540      	cmp	r0, r8
 8001e74:	d9b7      	bls.n	8001de6 <HAL_RCC_OscConfig+0x1e2>
 8001e76:	e706      	b.n	8001c86 <HAL_RCC_OscConfig+0x82>
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	42420000 	.word	0x42420000
 8001e80:	20000000 	.word	0x20000000
 8001e84:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e88:	4c2a      	ldr	r4, [pc, #168]	; (8001f34 <HAL_RCC_OscConfig+0x330>)
 8001e8a:	6863      	ldr	r3, [r4, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d03e      	beq.n	8001f12 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e94:	2200      	movs	r2, #0
 8001e96:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <HAL_RCC_OscConfig+0x334>)
 8001e98:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e9c:	d12c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fa67 	bl	8001370 <HAL_GetTick>
 8001ea2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	0199      	lsls	r1, r3, #6
 8001ea8:	d420      	bmi.n	8001eec <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eaa:	6a2b      	ldr	r3, [r5, #32]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d105      	bne.n	8001ebe <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eb2:	6862      	ldr	r2, [r4, #4]
 8001eb4:	68a9      	ldr	r1, [r5, #8]
 8001eb6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebe:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001ec0:	6862      	ldr	r2, [r4, #4]
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001ec8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001eca:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ecc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_RCC_OscConfig+0x334>)
 8001ed0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001ed2:	f7ff fa4d 	bl	8001370 <HAL_GetTick>
 8001ed6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	019a      	lsls	r2, r3, #6
 8001edc:	f53f aea8 	bmi.w	8001c30 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff fa46 	bl	8001370 <HAL_GetTick>
 8001ee4:	1b40      	subs	r0, r0, r5
 8001ee6:	2802      	cmp	r0, #2
 8001ee8:	d9f6      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2d4>
 8001eea:	e6cc      	b.n	8001c86 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff fa40 	bl	8001370 <HAL_GetTick>
 8001ef0:	1b80      	subs	r0, r0, r6
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d9d6      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2a0>
 8001ef6:	e6c6      	b.n	8001c86 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fa3a 	bl	8001370 <HAL_GetTick>
 8001efc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	019b      	lsls	r3, r3, #6
 8001f02:	f57f ae95 	bpl.w	8001c30 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7ff fa33 	bl	8001370 <HAL_GetTick>
 8001f0a:	1b40      	subs	r0, r0, r5
 8001f0c:	2802      	cmp	r0, #2
 8001f0e:	d9f6      	bls.n	8001efe <HAL_RCC_OscConfig+0x2fa>
 8001f10:	e6b9      	b.n	8001c86 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f12:	2801      	cmp	r0, #1
 8001f14:	f43f aeb8 	beq.w	8001c88 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001f18:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	6a2a      	ldr	r2, [r5, #32]
 8001f1c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001f20:	4291      	cmp	r1, r2
 8001f22:	f47f ae9b 	bne.w	8001c5c <HAL_RCC_OscConfig+0x58>
 8001f26:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	f43f ae7f 	beq.w	8001c30 <HAL_RCC_OscConfig+0x2c>
 8001f32:	e693      	b.n	8001c5c <HAL_RCC_OscConfig+0x58>
 8001f34:	40021000 	.word	0x40021000
 8001f38:	42420000 	.word	0x42420000

08001f3c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x38>)
 8001f3e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f40:	f003 010c 	and.w	r1, r3, #12
 8001f44:	2908      	cmp	r1, #8
 8001f46:	d112      	bne.n	8001f6e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f48:	480b      	ldr	r0, [pc, #44]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f4a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f4e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f50:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f52:	d509      	bpl.n	8001f68 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f54:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f58:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f5c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x44>)
 8001f60:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f62:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f66:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x48>)
 8001f6a:	4358      	muls	r0, r3
 8001f6c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001f6e:	4803      	ldr	r0, [pc, #12]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	08005c4a 	.word	0x08005c4a
 8001f7c:	007a1200 	.word	0x007a1200
 8001f80:	08005c5a 	.word	0x08005c5a
 8001f84:	003d0900 	.word	0x003d0900

08001f88 <HAL_RCC_ClockConfig>:
{
 8001f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f8c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001f8e:	4604      	mov	r4, r0
 8001f90:	b910      	cbnz	r0, 8001f98 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f92:	2001      	movs	r0, #1
}
 8001f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4a44      	ldr	r2, [pc, #272]	; (80020ac <HAL_RCC_ClockConfig+0x124>)
 8001f9a:	6813      	ldr	r3, [r2, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	428b      	cmp	r3, r1
 8001fa2:	d328      	bcc.n	8001ff6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	6821      	ldr	r1, [r4, #0]
 8001fa6:	078e      	lsls	r6, r1, #30
 8001fa8:	d430      	bmi.n	800200c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001faa:	07ca      	lsls	r2, r1, #31
 8001fac:	d443      	bmi.n	8002036 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fae:	4a3f      	ldr	r2, [pc, #252]	; (80020ac <HAL_RCC_ClockConfig+0x124>)
 8001fb0:	6813      	ldr	r3, [r2, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	42ab      	cmp	r3, r5
 8001fb8:	d865      	bhi.n	8002086 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fba:	6822      	ldr	r2, [r4, #0]
 8001fbc:	4d3c      	ldr	r5, [pc, #240]	; (80020b0 <HAL_RCC_ClockConfig+0x128>)
 8001fbe:	f012 0f04 	tst.w	r2, #4
 8001fc2:	d16c      	bne.n	800209e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	0713      	lsls	r3, r2, #28
 8001fc6:	d506      	bpl.n	8001fd6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fc8:	686b      	ldr	r3, [r5, #4]
 8001fca:	6922      	ldr	r2, [r4, #16]
 8001fcc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fd0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fd4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fd6:	f7ff ffb1 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001fda:	686b      	ldr	r3, [r5, #4]
 8001fdc:	4a35      	ldr	r2, [pc, #212]	; (80020b4 <HAL_RCC_ClockConfig+0x12c>)
 8001fde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	40d8      	lsrs	r0, r3
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCC_ClockConfig+0x130>)
 8001fe8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001fea:	4b34      	ldr	r3, [pc, #208]	; (80020bc <HAL_RCC_ClockConfig+0x134>)
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	f7ff f97d 	bl	80012ec <HAL_InitTick>
  return HAL_OK;
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	e7ce      	b.n	8001f94 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	6813      	ldr	r3, [r2, #0]
 8001ff8:	f023 0307 	bic.w	r3, r3, #7
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002000:	6813      	ldr	r3, [r2, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	428b      	cmp	r3, r1
 8002008:	d1c3      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xa>
 800200a:	e7cb      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <HAL_RCC_ClockConfig+0x128>)
 800200e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002012:	bf1e      	ittt	ne
 8002014:	685a      	ldrne	r2, [r3, #4]
 8002016:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800201a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800201e:	bf42      	ittt	mi
 8002020:	685a      	ldrmi	r2, [r3, #4]
 8002022:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002026:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	68a0      	ldr	r0, [r4, #8]
 800202c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002030:	4302      	orrs	r2, r0
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	e7b9      	b.n	8001faa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002036:	6862      	ldr	r2, [r4, #4]
 8002038:	4e1d      	ldr	r6, [pc, #116]	; (80020b0 <HAL_RCC_ClockConfig+0x128>)
 800203a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203e:	d11a      	bne.n	8002076 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002040:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	d0a5      	beq.n	8001f92 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204c:	f023 0303 	bic.w	r3, r3, #3
 8002050:	4313      	orrs	r3, r2
 8002052:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002054:	f7ff f98c 	bl	8001370 <HAL_GetTick>
 8002058:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	6873      	ldr	r3, [r6, #4]
 800205c:	6862      	ldr	r2, [r4, #4]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002066:	d0a2      	beq.n	8001fae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7ff f982 	bl	8001370 <HAL_GetTick>
 800206c:	1bc0      	subs	r0, r0, r7
 800206e:	4540      	cmp	r0, r8
 8002070:	d9f3      	bls.n	800205a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002072:	2003      	movs	r0, #3
 8002074:	e78e      	b.n	8001f94 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002076:	2a02      	cmp	r2, #2
 8002078:	d102      	bne.n	8002080 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800207e:	e7e1      	b.n	8002044 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002080:	f013 0f02 	tst.w	r3, #2
 8002084:	e7de      	b.n	8002044 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	6813      	ldr	r3, [r2, #0]
 8002088:	f023 0307 	bic.w	r3, r3, #7
 800208c:	432b      	orrs	r3, r5
 800208e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002090:	6813      	ldr	r3, [r2, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	42ab      	cmp	r3, r5
 8002098:	f47f af7b 	bne.w	8001f92 <HAL_RCC_ClockConfig+0xa>
 800209c:	e78d      	b.n	8001fba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209e:	686b      	ldr	r3, [r5, #4]
 80020a0:	68e1      	ldr	r1, [r4, #12]
 80020a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020a6:	430b      	orrs	r3, r1
 80020a8:	606b      	str	r3, [r5, #4]
 80020aa:	e78b      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x3c>
 80020ac:	40022000 	.word	0x40022000
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08005c32 	.word	0x08005c32
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000008 	.word	0x20000008

080020c0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020ce:	6810      	ldr	r0, [r2, #0]
}
 80020d0:	40d8      	lsrs	r0, r3
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000
 80020d8:	08005c42 	.word	0x08005c42
 80020dc:	20000000 	.word	0x20000000

080020e0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	4a03      	ldr	r2, [pc, #12]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020ee:	6810      	ldr	r0, [r2, #0]
}
 80020f0:	40d8      	lsrs	r0, r3
 80020f2:	4770      	bx	lr
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08005c42 	.word	0x08005c42
 80020fc:	20000000 	.word	0x20000000

08002100 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002100:	6803      	ldr	r3, [r0, #0]
{
 8002102:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002106:	07d9      	lsls	r1, r3, #31
{
 8002108:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800210a:	d521      	bpl.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210c:	4c36      	ldr	r4, [pc, #216]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800210e:	69e3      	ldr	r3, [r4, #28]
 8002110:	00da      	lsls	r2, r3, #3
 8002112:	d433      	bmi.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002114:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	69e3      	ldr	r3, [r4, #28]
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211c:	61e3      	str	r3, [r4, #28]
 800211e:	69e3      	ldr	r3, [r4, #28]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4f30      	ldr	r7, [pc, #192]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	05db      	lsls	r3, r3, #23
 800212e:	d527      	bpl.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002130:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002132:	686a      	ldr	r2, [r5, #4]
 8002134:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002138:	d136      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213a:	6a23      	ldr	r3, [r4, #32]
 800213c:	686a      	ldr	r2, [r5, #4]
 800213e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002142:	4313      	orrs	r3, r2
 8002144:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002146:	b11e      	cbz	r6, 8002150 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002148:	69e3      	ldr	r3, [r4, #28]
 800214a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214e:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002150:	6828      	ldr	r0, [r5, #0]
 8002152:	0783      	lsls	r3, r0, #30
 8002154:	d506      	bpl.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002156:	4924      	ldr	r1, [pc, #144]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002158:	68ab      	ldr	r3, [r5, #8]
 800215a:	684a      	ldr	r2, [r1, #4]
 800215c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002160:	431a      	orrs	r2, r3
 8002162:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002164:	f010 0010 	ands.w	r0, r0, #16
 8002168:	d01b      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800216a:	4a1f      	ldr	r2, [pc, #124]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800216c:	68e9      	ldr	r1, [r5, #12]
 800216e:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002170:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002172:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002176:	430b      	orrs	r3, r1
 8002178:	6053      	str	r3, [r2, #4]
 800217a:	e012      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 800217c:	2600      	movs	r6, #0
 800217e:	e7d3      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002186:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002188:	f7ff f8f2 	bl	8001370 <HAL_GetTick>
 800218c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	05d8      	lsls	r0, r3, #23
 8002192:	d4cd      	bmi.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002194:	f7ff f8ec 	bl	8001370 <HAL_GetTick>
 8002198:	eba0 0008 	sub.w	r0, r0, r8
 800219c:	2864      	cmp	r0, #100	; 0x64
 800219e:	d9f6      	bls.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 80021a0:	2003      	movs	r0, #3
}
 80021a2:	b002      	add	sp, #8
 80021a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d0c4      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80021b0:	2001      	movs	r0, #1
 80021b2:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021b4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80021b6:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ba:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021c0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80021c4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021c6:	07d9      	lsls	r1, r3, #31
 80021c8:	d5b7      	bpl.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80021ca:	f7ff f8d1 	bl	8001370 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80021d2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	6a23      	ldr	r3, [r4, #32]
 80021d6:	079a      	lsls	r2, r3, #30
 80021d8:	d4af      	bmi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7ff f8c9 	bl	8001370 <HAL_GetTick>
 80021de:	1bc0      	subs	r0, r0, r7
 80021e0:	4540      	cmp	r0, r8
 80021e2:	d9f7      	bls.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021e4:	e7dc      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	42420000 	.word	0x42420000

080021f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80021f4:	2802      	cmp	r0, #2
{
 80021f6:	b508      	push	{r3, lr}
  switch (PeriphClk)
 80021f8:	d044      	beq.n	8002284 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80021fa:	2810      	cmp	r0, #16
 80021fc:	d003      	beq.n	8002206 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80021fe:	2801      	cmp	r0, #1
 8002200:	d022      	beq.n	8002248 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002202:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8002204:	e034      	b.n	8002270 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8002206:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002208:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002210:	d02e      	beq.n	8002270 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002212:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8002216:	4822      	ldr	r0, [pc, #136]	; (80022a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002218:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800221a:	bf48      	it	mi
 800221c:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800221e:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002220:	bf41      	itttt	mi
 8002222:	4920      	ldrmi	r1, [pc, #128]	; (80022a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002224:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8002228:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800222a:	4a1f      	ldrmi	r2, [pc, #124]	; (80022a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800222c:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800222e:	bf4c      	ite	mi
 8002230:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002234:	4a1d      	ldrpl	r2, [pc, #116]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002236:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002238:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800223c:	d418      	bmi.n	8002270 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 800223e:	2303      	movs	r3, #3
 8002240:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002242:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002246:	e013      	b.n	8002270 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002248:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800224c:	4a13      	ldr	r2, [pc, #76]	; (800229c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800224e:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002250:	4019      	ands	r1, r3
 8002252:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8002256:	d01e      	beq.n	8002296 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002260:	d107      	bne.n	8002272 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8002262:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002266:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8002268:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 800226c:	bf18      	it	ne
 800226e:	4618      	movne	r0, r3
}
 8002270:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002276:	d1c4      	bne.n	8002202 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8002278:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 800227a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800227e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8002282:	e7f3      	b.n	800226c <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002284:	f7ff ff2c 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002290:	3301      	adds	r3, #1
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	e7d5      	b.n	8002242 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8002296:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800229a:	e7e9      	b.n	8002270 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800229c:	40021000 	.word	0x40021000
 80022a0:	08005c5c 	.word	0x08005c5c
 80022a4:	08005c6c 	.word	0x08005c6c
 80022a8:	007a1200 	.word	0x007a1200
 80022ac:	003d0900 	.word	0x003d0900

080022b0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b2:	6a02      	ldr	r2, [r0, #32]
{
 80022b4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022be:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022c2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80022c6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022c8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80022ca:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80022ce:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022d0:	4d0a      	ldr	r5, [pc, #40]	; (80022fc <TIM_OC1_SetConfig+0x4c>)
 80022d2:	42a8      	cmp	r0, r5
 80022d4:	d10b      	bne.n	80022ee <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022d6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80022d8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80022dc:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022de:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022e2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80022e6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80022e8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80022ec:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ee:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022f0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022f2:	684a      	ldr	r2, [r1, #4]
 80022f4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f6:	6203      	str	r3, [r0, #32]
}
 80022f8:	bd70      	pop	{r4, r5, r6, pc}
 80022fa:	bf00      	nop
 80022fc:	40012c00 	.word	0x40012c00

08002300 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002300:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002302:	6a02      	ldr	r2, [r0, #32]
{
 8002304:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800230a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800230c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800230e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002310:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002312:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002316:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002318:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800231a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800231e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002322:	4d0b      	ldr	r5, [pc, #44]	; (8002350 <TIM_OC3_SetConfig+0x50>)
 8002324:	42a8      	cmp	r0, r5
 8002326:	d10d      	bne.n	8002344 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002328:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800232a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800232e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002332:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002336:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800233a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800233c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002340:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002344:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002346:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002348:	684a      	ldr	r2, [r1, #4]
 800234a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800234c:	6203      	str	r3, [r0, #32]
}
 800234e:	bd70      	pop	{r4, r5, r6, pc}
 8002350:	40012c00 	.word	0x40012c00

08002354 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002354:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002356:	6a02      	ldr	r2, [r0, #32]
{
 8002358:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800235a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800235e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002360:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002362:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002364:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002366:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800236a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800236e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002374:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002378:	4d06      	ldr	r5, [pc, #24]	; (8002394 <TIM_OC4_SetConfig+0x40>)
 800237a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800237c:	bf02      	ittt	eq
 800237e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002380:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002384:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002388:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800238a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800238c:	684a      	ldr	r2, [r1, #4]
 800238e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002390:	6203      	str	r3, [r0, #32]
}
 8002392:	bd30      	pop	{r4, r5, pc}
 8002394:	40012c00 	.word	0x40012c00

08002398 <HAL_TIM_OC_MspInit>:
 8002398:	4770      	bx	lr

0800239a <HAL_TIM_PWM_MspInit>:
 800239a:	4770      	bx	lr

0800239c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800239c:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <TIM_Base_SetConfig+0x5c>)
{
 800239e:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023a0:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80023a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023a4:	d005      	beq.n	80023b2 <TIM_Base_SetConfig+0x16>
 80023a6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023aa:	d002      	beq.n	80023b2 <TIM_Base_SetConfig+0x16>
 80023ac:	4c13      	ldr	r4, [pc, #76]	; (80023fc <TIM_Base_SetConfig+0x60>)
 80023ae:	42a0      	cmp	r0, r4
 80023b0:	d110      	bne.n	80023d4 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= Structure->CounterMode;
 80023b2:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023b8:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 80023ba:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023be:	d005      	beq.n	80023cc <TIM_Base_SetConfig+0x30>
 80023c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023c4:	d002      	beq.n	80023cc <TIM_Base_SetConfig+0x30>
 80023c6:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <TIM_Base_SetConfig+0x60>)
 80023c8:	4290      	cmp	r0, r2
 80023ca:	d103      	bne.n	80023d4 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023cc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023d2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d4:	694a      	ldr	r2, [r1, #20]
 80023d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023da:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80023dc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023de:	688b      	ldr	r3, [r1, #8]
 80023e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80023e2:	680b      	ldr	r3, [r1, #0]
 80023e4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <TIM_Base_SetConfig+0x5c>)
 80023e8:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80023ea:	bf04      	itt	eq
 80023ec:	690b      	ldreq	r3, [r1, #16]
 80023ee:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80023f0:	2301      	movs	r3, #1
 80023f2:	6143      	str	r3, [r0, #20]
}
 80023f4:	bd10      	pop	{r4, pc}
 80023f6:	bf00      	nop
 80023f8:	40012c00 	.word	0x40012c00
 80023fc:	40000400 	.word	0x40000400

08002400 <HAL_TIM_Base_Init>:
{
 8002400:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002402:	4604      	mov	r4, r0
 8002404:	b330      	cbz	r0, 8002454 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002406:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800240a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800240e:	b91b      	cbnz	r3, 8002418 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002410:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002414:	f7fe fe5c 	bl	80010d0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800241a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002420:	1d21      	adds	r1, r4, #4
 8002422:	f7ff ffbb 	bl	800239c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002426:	2301      	movs	r3, #1
  return HAL_OK;
 8002428:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800242a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002432:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002436:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800243a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002446:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800244a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800244e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002452:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002454:	2001      	movs	r0, #1
 8002456:	e7fc      	b.n	8002452 <HAL_TIM_Base_Init+0x52>

08002458 <HAL_TIM_OC_Init>:
{
 8002458:	b510      	push	{r4, lr}
  if (htim == NULL)
 800245a:	4604      	mov	r4, r0
 800245c:	b330      	cbz	r0, 80024ac <HAL_TIM_OC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800245e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002462:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002466:	b91b      	cbnz	r3, 8002470 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002468:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800246c:	f7ff ff94 	bl	8002398 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002470:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002472:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002478:	1d21      	adds	r1, r4, #4
 800247a:	f7ff ff8f 	bl	800239c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247e:	2301      	movs	r3, #1
  return HAL_OK;
 8002480:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002482:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002486:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800248a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800248e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002492:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002496:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800249a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800249e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80024a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80024a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80024aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024ac:	2001      	movs	r0, #1
 80024ae:	e7fc      	b.n	80024aa <HAL_TIM_OC_Init+0x52>

080024b0 <HAL_TIM_PWM_Init>:
{
 80024b0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80024b2:	4604      	mov	r4, r0
 80024b4:	b330      	cbz	r0, 8002504 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80024b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024be:	b91b      	cbnz	r3, 80024c8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80024c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80024c4:	f7ff ff69 	bl	800239a <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ca:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d0:	1d21      	adds	r1, r4, #4
 80024d2:	f7ff ff63 	bl	800239c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d6:	2301      	movs	r3, #1
  return HAL_OK;
 80024d8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024da:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80024e2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80024e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80024ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80024fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80024fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002502:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002504:	2001      	movs	r0, #1
 8002506:	e7fc      	b.n	8002502 <HAL_TIM_PWM_Init+0x52>

08002508 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8002508:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800250a:	6a02      	ldr	r2, [r0, #32]
{
 800250c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800250e:	f022 0210 	bic.w	r2, r2, #16
 8002512:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002514:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002516:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002518:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800251a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800251e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002522:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002524:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002528:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800252c:	4d0b      	ldr	r5, [pc, #44]	; (800255c <TIM_OC2_SetConfig+0x54>)
 800252e:	42a8      	cmp	r0, r5
 8002530:	d10d      	bne.n	800254e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002532:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002538:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800253c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002540:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002544:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800254a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800254e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002550:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002552:	684a      	ldr	r2, [r1, #4]
 8002554:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002556:	6203      	str	r3, [r0, #32]
}
 8002558:	bd70      	pop	{r4, r5, r6, pc}
 800255a:	bf00      	nop
 800255c:	40012c00 	.word	0x40012c00

08002560 <HAL_TIM_OC_ConfigChannel>:
{
 8002560:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002562:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002566:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8002568:	2b01      	cmp	r3, #1
 800256a:	d01d      	beq.n	80025a8 <HAL_TIM_OC_ConfigChannel+0x48>
  switch (Channel)
 800256c:	2a08      	cmp	r2, #8
 800256e:	d017      	beq.n	80025a0 <HAL_TIM_OC_ConfigChannel+0x40>
 8002570:	d807      	bhi.n	8002582 <HAL_TIM_OC_ConfigChannel+0x22>
 8002572:	b162      	cbz	r2, 800258e <HAL_TIM_OC_ConfigChannel+0x2e>
 8002574:	2a04      	cmp	r2, #4
 8002576:	d00f      	beq.n	8002598 <HAL_TIM_OC_ConfigChannel+0x38>
 8002578:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800257a:	2300      	movs	r3, #0
 800257c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8002580:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002582:	2a0c      	cmp	r2, #12
 8002584:	d1f8      	bne.n	8002578 <HAL_TIM_OC_ConfigChannel+0x18>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002586:	6800      	ldr	r0, [r0, #0]
 8002588:	f7ff fee4 	bl	8002354 <TIM_OC4_SetConfig>
 800258c:	e002      	b.n	8002594 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800258e:	6800      	ldr	r0, [r0, #0]
 8002590:	f7ff fe8e 	bl	80022b0 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2000      	movs	r0, #0
      break;
 8002596:	e7f0      	b.n	800257a <HAL_TIM_OC_ConfigChannel+0x1a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002598:	6800      	ldr	r0, [r0, #0]
 800259a:	f7ff ffb5 	bl	8002508 <TIM_OC2_SetConfig>
      break;
 800259e:	e7f9      	b.n	8002594 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025a0:	6800      	ldr	r0, [r0, #0]
 80025a2:	f7ff fead 	bl	8002300 <TIM_OC3_SetConfig>
      break;
 80025a6:	e7f5      	b.n	8002594 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 80025a8:	2002      	movs	r0, #2
 80025aa:	e7e9      	b.n	8002580 <HAL_TIM_OC_ConfigChannel+0x20>

080025ac <HAL_TIM_PWM_ConfigChannel>:
{
 80025ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80025ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80025b2:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d050      	beq.n	800265a <HAL_TIM_PWM_ConfigChannel+0xae>
 80025b8:	2301      	movs	r3, #1
  switch (Channel)
 80025ba:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80025bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80025c0:	d03b      	beq.n	800263a <HAL_TIM_PWM_ConfigChannel+0x8e>
 80025c2:	d807      	bhi.n	80025d4 <HAL_TIM_PWM_ConfigChannel+0x28>
 80025c4:	b1c2      	cbz	r2, 80025f8 <HAL_TIM_PWM_ConfigChannel+0x4c>
 80025c6:	2a04      	cmp	r2, #4
 80025c8:	d027      	beq.n	800261a <HAL_TIM_PWM_ConfigChannel+0x6e>
 80025ca:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 80025cc:	2300      	movs	r3, #0
 80025ce:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80025d4:	2a0c      	cmp	r2, #12
 80025d6:	d1f8      	bne.n	80025ca <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025d8:	6800      	ldr	r0, [r0, #0]
 80025da:	f7ff febb 	bl	8002354 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025de:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025e0:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025e6:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025e8:	69c3      	ldr	r3, [r0, #28]
 80025ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025ee:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025f0:	69c3      	ldr	r3, [r0, #28]
 80025f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80025f6:	e02e      	b.n	8002656 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025f8:	6800      	ldr	r0, [r0, #0]
 80025fa:	f7ff fe59 	bl	80022b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025fe:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002600:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002608:	6983      	ldr	r3, [r0, #24]
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002610:	6983      	ldr	r3, [r0, #24]
 8002612:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002614:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2000      	movs	r0, #0
      break;
 8002618:	e7d8      	b.n	80025cc <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800261a:	6800      	ldr	r0, [r0, #0]
 800261c:	f7ff ff74 	bl	8002508 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002620:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002622:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002624:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002628:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800262a:	6983      	ldr	r3, [r0, #24]
 800262c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002630:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002632:	6983      	ldr	r3, [r0, #24]
 8002634:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002638:	e7ec      	b.n	8002614 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800263a:	6800      	ldr	r0, [r0, #0]
 800263c:	f7ff fe60 	bl	8002300 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002640:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002642:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800264a:	69c3      	ldr	r3, [r0, #28]
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002652:	69c3      	ldr	r3, [r0, #28]
 8002654:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002656:	61c3      	str	r3, [r0, #28]
 8002658:	e7dd      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 800265a:	2002      	movs	r0, #2
 800265c:	e7b9      	b.n	80025d2 <HAL_TIM_PWM_ConfigChannel+0x26>

0800265e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800265e:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002660:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002662:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002664:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002668:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800266c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800266e:	6082      	str	r2, [r0, #8]
}
 8002670:	bd10      	pop	{r4, pc}

08002672 <HAL_TIM_ConfigClockSource>:
{
 8002672:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002674:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002678:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800267a:	2b01      	cmp	r3, #1
 800267c:	f04f 0002 	mov.w	r0, #2
 8002680:	f000 808e 	beq.w	80027a0 <HAL_TIM_ConfigClockSource+0x12e>
 8002684:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002686:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800268a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800268c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002690:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002696:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800269a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800269c:	680b      	ldr	r3, [r1, #0]
 800269e:	2b60      	cmp	r3, #96	; 0x60
 80026a0:	d04f      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0xd0>
 80026a2:	d832      	bhi.n	800270a <HAL_TIM_ConfigClockSource+0x98>
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d064      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x100>
 80026a8:	d816      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x66>
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d00d      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x58>
 80026ae:	d80a      	bhi.n	80026c6 <HAL_TIM_ConfigClockSource+0x54>
 80026b0:	f033 0110 	bics.w	r1, r3, #16
 80026b4:	d009      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80026bc:	2300      	movs	r3, #0
 80026be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80026c2:	4610      	mov	r0, r2
 80026c4:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80026c6:	2b30      	cmp	r3, #48	; 0x30
 80026c8:	d1f5      	bne.n	80026b6 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80026ca:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f043 0307 	orr.w	r3, r3, #7
 80026d6:	e028      	b.n	800272a <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80026d8:	2b50      	cmp	r3, #80	; 0x50
 80026da:	d1ec      	bne.n	80026b6 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 80026dc:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80026de:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80026e0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e2:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026e4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ee:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80026f0:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80026fa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80026fc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80026fe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002704:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002708:	e00f      	b.n	800272a <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270e:	d00d      	beq.n	800272c <HAL_TIM_ConfigClockSource+0xba>
 8002710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002714:	d00c      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0xbe>
 8002716:	2b70      	cmp	r3, #112	; 0x70
 8002718:	d1cd      	bne.n	80026b6 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800271a:	68cb      	ldr	r3, [r1, #12]
 800271c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002720:	f7ff ff9d 	bl	800265e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002724:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002726:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 800272a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2200      	movs	r2, #0
 800272e:	e7c2      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8002730:	68cb      	ldr	r3, [r1, #12]
 8002732:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002736:	f7ff ff92 	bl	800265e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800273a:	6883      	ldr	r3, [r0, #8]
 800273c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002740:	e7f3      	b.n	800272a <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8002742:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002744:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8002746:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002748:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 800274c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274e:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002750:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002756:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800275a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800275e:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002762:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002764:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002766:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800276c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002770:	e7db      	b.n	800272a <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8002772:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002774:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002776:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002778:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800277a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002784:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002786:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800278c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002790:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002792:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002794:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800279a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800279e:	e7c4      	b.n	800272a <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 80027a0:	4602      	mov	r2, r0
 80027a2:	e78e      	b.n	80026c2 <HAL_TIM_ConfigClockSource+0x50>

080027a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027a4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027a6:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027a8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027aa:	f001 011f 	and.w	r1, r1, #31
 80027ae:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80027b0:	ea23 0304 	bic.w	r3, r3, r4
 80027b4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027b6:	6a03      	ldr	r3, [r0, #32]
 80027b8:	408a      	lsls	r2, r1
 80027ba:	431a      	orrs	r2, r3
 80027bc:	6202      	str	r2, [r0, #32]
}
 80027be:	bd10      	pop	{r4, pc}

080027c0 <HAL_TIM_OC_Start>:
{
 80027c0:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027c2:	b929      	cbnz	r1, 80027d0 <HAL_TIM_OC_Start+0x10>
 80027c4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d021      	beq.n	8002810 <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027d0:	2904      	cmp	r1, #4
 80027d2:	d107      	bne.n	80027e4 <HAL_TIM_OC_Start+0x24>
 80027d4:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d1f7      	bne.n	80027cc <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027dc:	2302      	movs	r3, #2
 80027de:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80027e2:	e018      	b.n	8002816 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027e4:	2908      	cmp	r1, #8
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_OC_Start+0x38>
 80027e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d1ed      	bne.n	80027cc <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027f0:	2302      	movs	r3, #2
 80027f2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80027f6:	e00e      	b.n	8002816 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027f8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d1e5      	bne.n	80027cc <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002800:	2904      	cmp	r1, #4
 8002802:	d0eb      	beq.n	80027dc <HAL_TIM_OC_Start+0x1c>
 8002804:	2908      	cmp	r1, #8
 8002806:	d0f3      	beq.n	80027f0 <HAL_TIM_OC_Start+0x30>
 8002808:	2302      	movs	r3, #2
 800280a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800280e:	e002      	b.n	8002816 <HAL_TIM_OC_Start+0x56>
 8002810:	2302      	movs	r3, #2
 8002812:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002816:	6800      	ldr	r0, [r0, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	f7ff ffc3 	bl	80027a4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_TIM_OC_Start+0x90>)
 8002820:	4298      	cmp	r0, r3
 8002822:	d10a      	bne.n	800283a <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 8002824:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282a:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800282c:	6883      	ldr	r3, [r0, #8]
 800282e:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002832:	2b06      	cmp	r3, #6
 8002834:	d107      	bne.n	8002846 <HAL_TIM_OC_Start+0x86>
  return HAL_OK;
 8002836:	2000      	movs	r0, #0
 8002838:	e7c9      	b.n	80027ce <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800283a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800283e:	d0f5      	beq.n	800282c <HAL_TIM_OC_Start+0x6c>
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <HAL_TIM_OC_Start+0x94>)
 8002842:	4298      	cmp	r0, r3
 8002844:	d0f2      	beq.n	800282c <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 8002846:	6803      	ldr	r3, [r0, #0]
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6003      	str	r3, [r0, #0]
 800284e:	e7f2      	b.n	8002836 <HAL_TIM_OC_Start+0x76>
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40000400 	.word	0x40000400

08002858 <HAL_TIM_PWM_Start>:
 8002858:	f7ff bfb2 	b.w	80027c0 <HAL_TIM_OC_Start>

0800285c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800285c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800285e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 8002862:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002864:	2a01      	cmp	r2, #1
 8002866:	f04f 0002 	mov.w	r0, #2
 800286a:	d01e      	beq.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800286c:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800286e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002872:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002874:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002876:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800287a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 800287c:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800287e:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002880:	4c0a      	ldr	r4, [pc, #40]	; (80028ac <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002882:	42a2      	cmp	r2, r4
 8002884:	d006      	beq.n	8002894 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8002886:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800288a:	d003      	beq.n	8002894 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 800288c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002890:	42a2      	cmp	r2, r4
 8002892:	d104      	bne.n	800289e <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002894:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002896:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800289a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800289c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800289e:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 80028a0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80028a6:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 80028aa:	bd30      	pop	{r4, r5, pc}
 80028ac:	40012c00 	.word	0x40012c00

080028b0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028b0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	f102 030c 	add.w	r3, r2, #12
 80028b6:	e853 3f00 	ldrex	r3, [r3]
 80028ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028be:	320c      	adds	r2, #12
 80028c0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80028c4:	6802      	ldr	r2, [r0, #0]
 80028c6:	2900      	cmp	r1, #0
 80028c8:	d1f2      	bne.n	80028b0 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ca:	f102 0314 	add.w	r3, r2, #20
 80028ce:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	f102 0c14 	add.w	ip, r2, #20
 80028da:	e84c 3100 	strex	r1, r3, [ip]
 80028de:	2900      	cmp	r1, #0
 80028e0:	d1f3      	bne.n	80028ca <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d10b      	bne.n	8002900 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	f102 030c 	add.w	r3, r2, #12
 80028ec:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f4:	f102 0c0c 	add.w	ip, r2, #12
 80028f8:	e84c 3100 	strex	r1, r3, [ip]
 80028fc:	2900      	cmp	r1, #0
 80028fe:	d1f3      	bne.n	80028e8 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002900:	2320      	movs	r3, #32
 8002902:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002906:	2300      	movs	r3, #0
 8002908:	6303      	str	r3, [r0, #48]	; 0x30
}
 800290a:	4770      	bx	lr

0800290c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800290c:	b510      	push	{r4, lr}
 800290e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002910:	6803      	ldr	r3, [r0, #0]
 8002912:	68c1      	ldr	r1, [r0, #12]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800291a:	430a      	orrs	r2, r1
 800291c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800291e:	6882      	ldr	r2, [r0, #8]
 8002920:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002922:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002924:	4302      	orrs	r2, r0
 8002926:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002928:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800292c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002930:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002932:	430a      	orrs	r2, r1
 8002934:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	69a1      	ldr	r1, [r4, #24]
 800293a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800293e:	430a      	orrs	r2, r1
 8002940:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002942:	4a0e      	ldr	r2, [pc, #56]	; (800297c <UART_SetConfig+0x70>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d115      	bne.n	8002974 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002948:	f7ff fbca 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800294c:	2319      	movs	r3, #25
 800294e:	4343      	muls	r3, r0
 8002950:	6862      	ldr	r2, [r4, #4]
 8002952:	6820      	ldr	r0, [r4, #0]
 8002954:	0092      	lsls	r2, r2, #2
 8002956:	fbb3 f3f2 	udiv	r3, r3, r2
 800295a:	2264      	movs	r2, #100	; 0x64
 800295c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002960:	fb02 3311 	mls	r3, r2, r1, r3
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	3332      	adds	r3, #50	; 0x32
 8002968:	fbb3 f3f2 	udiv	r3, r3, r2
 800296c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002970:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002972:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002974:	f7ff fba4 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002978:	e7e8      	b.n	800294c <UART_SetConfig+0x40>
 800297a:	bf00      	nop
 800297c:	40013800 	.word	0x40013800

08002980 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	4604      	mov	r4, r0
 8002984:	460e      	mov	r6, r1
 8002986:	4617      	mov	r7, r2
 8002988:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298a:	6822      	ldr	r2, [r4, #0]
 800298c:	6813      	ldr	r3, [r2, #0]
 800298e:	ea36 0303 	bics.w	r3, r6, r3
 8002992:	d101      	bne.n	8002998 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002994:	2000      	movs	r0, #0
 8002996:	e028      	b.n	80029ea <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002998:	1c6b      	adds	r3, r5, #1
 800299a:	d0f7      	beq.n	800298c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800299c:	b125      	cbz	r5, 80029a8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 800299e:	f7fe fce7 	bl	8001370 <HAL_GetTick>
 80029a2:	1bc0      	subs	r0, r0, r7
 80029a4:	4285      	cmp	r5, r0
 80029a6:	d2f0      	bcs.n	800298a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029a8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029aa:	f102 030c 	add.w	r3, r2, #12
 80029ae:	e853 3f00 	ldrex	r3, [r3]
 80029b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b6:	320c      	adds	r2, #12
 80029b8:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 80029bc:	6821      	ldr	r1, [r4, #0]
 80029be:	2800      	cmp	r0, #0
 80029c0:	d1f2      	bne.n	80029a8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	f101 0314 	add.w	r3, r1, #20
 80029c6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ca:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	f101 0014 	add.w	r0, r1, #20
 80029d2:	e840 3200 	strex	r2, r3, [r0]
 80029d6:	2a00      	cmp	r2, #0
 80029d8:	d1f3      	bne.n	80029c2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 80029da:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80029dc:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80029de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 80029e2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 80029e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80029ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029ec <HAL_UART_Init>:
{
 80029ec:	b510      	push	{r4, lr}
  if (huart == NULL)
 80029ee:	4604      	mov	r4, r0
 80029f0:	b348      	cbz	r0, 8002a46 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80029f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029fa:	b91b      	cbnz	r3, 8002a04 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80029fc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8002a00:	f7fe fb9c 	bl	800113c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a04:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002a06:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8002a0c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002a0e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002a10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a14:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002a16:	f7ff ff79 	bl	800290c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a2c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a34:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002a36:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a38:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a42:	6360      	str	r0, [r4, #52]	; 0x34
}
 8002a44:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a46:	2001      	movs	r0, #1
 8002a48:	e7fc      	b.n	8002a44 <HAL_UART_Init+0x58>

08002a4a <HAL_UART_Transmit>:
{
 8002a4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a4e:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002a50:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002a54:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002a56:	2b20      	cmp	r3, #32
{
 8002a58:	460e      	mov	r6, r1
 8002a5a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002a5c:	d13c      	bne.n	8002ad8 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8002a5e:	2900      	cmp	r1, #0
 8002a60:	d03c      	beq.n	8002adc <HAL_UART_Transmit+0x92>
 8002a62:	2a00      	cmp	r2, #0
 8002a64:	d03a      	beq.n	8002adc <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a66:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a68:	2500      	movs	r5, #0
 8002a6a:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a6c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8002a70:	f7fe fc7e 	bl	8001370 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a74:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002a76:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8002a7c:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a7e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a80:	d103      	bne.n	8002a8a <HAL_UART_Transmit+0x40>
 8002a82:	6923      	ldr	r3, [r4, #16]
 8002a84:	b90b      	cbnz	r3, 8002a8a <HAL_UART_Transmit+0x40>
 8002a86:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002a88:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8002a8a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	b953      	cbnz	r3, 8002aa6 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a90:	464b      	mov	r3, r9
 8002a92:	4642      	mov	r2, r8
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff ff72 	bl	8002980 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002a9c:	b950      	cbnz	r0, 8002ab4 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8002aa4:	e007      	b.n	8002ab6 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	4620      	mov	r0, r4
 8002aae:	f7ff ff67 	bl	8002980 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002ab2:	b110      	cbz	r0, 8002aba <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8002ab4:	2003      	movs	r0, #3
}
 8002ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aba:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002abc:	b94e      	cbnz	r6, 8002ad2 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002abe:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ac6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002ac8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002aca:	3901      	subs	r1, #1
 8002acc:	b289      	uxth	r1, r1
 8002ace:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002ad0:	e7db      	b.n	8002a8a <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ad2:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002ad6:	e7f6      	b.n	8002ac6 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8002ad8:	2002      	movs	r0, #2
 8002ada:	e7ec      	b.n	8002ab6 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8002adc:	2001      	movs	r0, #1
 8002ade:	e7ea      	b.n	8002ab6 <HAL_UART_Transmit+0x6c>

08002ae0 <HAL_UART_TxCpltCallback>:
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_UART_ErrorCallback>:
 8002ae2:	4770      	bx	lr

08002ae4 <UART_DMAAbortOnError>:
{
 8002ae4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002ae6:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002aea:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002aec:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002aee:	f7ff fff8 	bl	8002ae2 <HAL_UART_ErrorCallback>
}
 8002af2:	bd08      	pop	{r3, pc}

08002af4 <HAL_UARTEx_RxEventCallback>:
}
 8002af4:	4770      	bx	lr

08002af6 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002af6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002afa:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002afc:	2b22      	cmp	r3, #34	; 0x22
 8002afe:	d142      	bne.n	8002b86 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b00:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b02:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b04:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b08:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0a:	d13f      	bne.n	8002b8c <UART_Receive_IT.isra.0+0x96>
 8002b0c:	6901      	ldr	r1, [r0, #16]
 8002b0e:	2900      	cmp	r1, #0
 8002b10:	d13f      	bne.n	8002b92 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b12:	6852      	ldr	r2, [r2, #4]
 8002b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b18:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8002b1c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002b1e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d12d      	bne.n	8002b86 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b2a:	6802      	ldr	r2, [r0, #0]
 8002b2c:	68d1      	ldr	r1, [r2, #12]
 8002b2e:	f021 0120 	bic.w	r1, r1, #32
 8002b32:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b34:	68d1      	ldr	r1, [r2, #12]
 8002b36:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002b3a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b3c:	6951      	ldr	r1, [r2, #20]
 8002b3e:	f021 0101 	bic.w	r1, r1, #1
 8002b42:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002b44:	2220      	movs	r2, #32
 8002b46:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b4a:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b4c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002b4e:	2a01      	cmp	r2, #1
 8002b50:	6802      	ldr	r2, [r0, #0]
 8002b52:	d128      	bne.n	8002ba6 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b54:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	f102 030c 	add.w	r3, r2, #12
 8002b5a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b5e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b62:	f102 0c0c 	add.w	ip, r2, #12
 8002b66:	e84c 3100 	strex	r1, r3, [ip]
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d1f3      	bne.n	8002b56 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b6e:	6813      	ldr	r3, [r2, #0]
 8002b70:	06db      	lsls	r3, r3, #27
 8002b72:	d505      	bpl.n	8002b80 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b74:	9101      	str	r1, [sp, #4]
 8002b76:	6813      	ldr	r3, [r2, #0]
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	6853      	ldr	r3, [r2, #4]
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b80:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002b82:	f7ff ffb7 	bl	8002af4 <HAL_UARTEx_RxEventCallback>
}
 8002b86:	b003      	add	sp, #12
 8002b88:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b8c:	b939      	cbnz	r1, 8002b9e <UART_Receive_IT.isra.0+0xa8>
 8002b8e:	6901      	ldr	r1, [r0, #16]
 8002b90:	b929      	cbnz	r1, 8002b9e <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b92:	6852      	ldr	r2, [r2, #4]
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8002b98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	e7be      	b.n	8002b1c <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b9e:	6852      	ldr	r2, [r2, #4]
 8002ba0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ba4:	e7f7      	b.n	8002b96 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8002ba6:	f7fe f9c9 	bl	8000f3c <HAL_UART_RxCpltCallback>
 8002baa:	e7ec      	b.n	8002b86 <UART_Receive_IT.isra.0+0x90>

08002bac <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bac:	6803      	ldr	r3, [r0, #0]
{
 8002bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bb0:	681a      	ldr	r2, [r3, #0]
{
 8002bb2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002bb4:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb6:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bb8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002bba:	d108      	bne.n	8002bce <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bbc:	0696      	lsls	r6, r2, #26
 8002bbe:	d568      	bpl.n	8002c92 <HAL_UART_IRQHandler+0xe6>
 8002bc0:	068d      	lsls	r5, r1, #26
 8002bc2:	d566      	bpl.n	8002c92 <HAL_UART_IRQHandler+0xe6>
}
 8002bc4:	b002      	add	sp, #8
 8002bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002bca:	f7ff bf94 	b.w	8002af6 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bce:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bd2:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8002bd6:	4305      	orrs	r5, r0
 8002bd8:	d05b      	beq.n	8002c92 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bda:	07d6      	lsls	r6, r2, #31
 8002bdc:	d505      	bpl.n	8002bea <HAL_UART_IRQHandler+0x3e>
 8002bde:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002be0:	bf42      	ittt	mi
 8002be2:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8002be4:	f043 0301 	orrmi.w	r3, r3, #1
 8002be8:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bea:	0753      	lsls	r3, r2, #29
 8002bec:	d504      	bpl.n	8002bf8 <HAL_UART_IRQHandler+0x4c>
 8002bee:	b118      	cbz	r0, 8002bf8 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bf8:	0796      	lsls	r6, r2, #30
 8002bfa:	d504      	bpl.n	8002c06 <HAL_UART_IRQHandler+0x5a>
 8002bfc:	b118      	cbz	r0, 8002c06 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c06:	0715      	lsls	r5, r2, #28
 8002c08:	d507      	bpl.n	8002c1a <HAL_UART_IRQHandler+0x6e>
 8002c0a:	f001 0320 	and.w	r3, r1, #32
 8002c0e:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c10:	bf1e      	ittt	ne
 8002c12:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8002c14:	f043 0308 	orrne.w	r3, r3, #8
 8002c18:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d032      	beq.n	8002c86 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c20:	0692      	lsls	r2, r2, #26
 8002c22:	d504      	bpl.n	8002c2e <HAL_UART_IRQHandler+0x82>
 8002c24:	068b      	lsls	r3, r1, #26
 8002c26:	d502      	bpl.n	8002c2e <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7ff ff64 	bl	8002af6 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2e:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8002c30:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c32:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c34:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c3a:	f002 0208 	and.w	r2, r2, #8
 8002c3e:	ea53 0502 	orrs.w	r5, r3, r2
 8002c42:	d022      	beq.n	8002c8a <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8002c44:	f7ff fe34 	bl	80028b0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	6973      	ldr	r3, [r6, #20]
 8002c4a:	065e      	lsls	r6, r3, #25
 8002c4c:	d518      	bpl.n	8002c80 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	f102 0314 	add.w	r3, r2, #20
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5c:	3214      	adds	r2, #20
 8002c5e:	e842 3100 	strex	r1, r3, [r2]
 8002c62:	2900      	cmp	r1, #0
 8002c64:	d1f3      	bne.n	8002c4e <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8002c66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c68:	b150      	cbz	r0, 8002c80 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c6a:	4b74      	ldr	r3, [pc, #464]	; (8002e3c <HAL_UART_IRQHandler+0x290>)
 8002c6c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c6e:	f7fe fe8b 	bl	8001988 <HAL_DMA_Abort_IT>
 8002c72:	b140      	cbz	r0, 8002c86 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c74:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c76:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8002c78:	b002      	add	sp, #8
 8002c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c7e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7ff ff2e 	bl	8002ae2 <HAL_UART_ErrorCallback>
}
 8002c86:	b002      	add	sp, #8
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002c8a:	f7ff ff2a 	bl	8002ae2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8e:	6465      	str	r5, [r4, #68]	; 0x44
 8002c90:	e7f9      	b.n	8002c86 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c92:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c94:	2801      	cmp	r0, #1
 8002c96:	f040 8094 	bne.w	8002dc2 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c9a:	06d5      	lsls	r5, r2, #27
 8002c9c:	f140 8091 	bpl.w	8002dc2 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ca0:	06c8      	lsls	r0, r1, #27
 8002ca2:	f140 808e 	bpl.w	8002dc2 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	9201      	str	r2, [sp, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	9201      	str	r2, [sp, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	9201      	str	r2, [sp, #4]
 8002cb2:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	0652      	lsls	r2, r2, #25
 8002cb8:	d54d      	bpl.n	8002d56 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002cbc:	680a      	ldr	r2, [r1, #0]
 8002cbe:	6852      	ldr	r2, [r2, #4]
 8002cc0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8002cc2:	2a00      	cmp	r2, #0
 8002cc4:	d0df      	beq.n	8002c86 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cc6:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8002cc8:	4290      	cmp	r0, r2
 8002cca:	d9dc      	bls.n	8002c86 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8002ccc:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cce:	698a      	ldr	r2, [r1, #24]
 8002cd0:	2a20      	cmp	r2, #32
 8002cd2:	d036      	beq.n	8002d42 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd4:	f103 020c 	add.w	r2, r3, #12
 8002cd8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	f103 000c 	add.w	r0, r3, #12
 8002ce4:	e840 2100 	strex	r1, r2, [r0]
 8002ce8:	2900      	cmp	r1, #0
 8002cea:	d1f3      	bne.n	8002cd4 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	f103 0214 	add.w	r2, r3, #20
 8002cf0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	f103 0014 	add.w	r0, r3, #20
 8002cfc:	e840 2100 	strex	r1, r2, [r0]
 8002d00:	2900      	cmp	r1, #0
 8002d02:	d1f3      	bne.n	8002cec <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	f103 0214 	add.w	r2, r3, #20
 8002d08:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	f103 0014 	add.w	r0, r3, #20
 8002d14:	e840 2100 	strex	r1, r2, [r0]
 8002d18:	2900      	cmp	r1, #0
 8002d1a:	d1f3      	bne.n	8002d04 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d22:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d24:	f103 020c 	add.w	r2, r3, #12
 8002d28:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	f103 000c 	add.w	r0, r3, #12
 8002d34:	e840 2100 	strex	r1, r2, [r0]
 8002d38:	2900      	cmp	r1, #0
 8002d3a:	d1f3      	bne.n	8002d24 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d3c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002d3e:	f7fe fe03 	bl	8001948 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d42:	2302      	movs	r3, #2
 8002d44:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d46:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002d48:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002d4a:	1ac9      	subs	r1, r1, r3
 8002d4c:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f7ff fed0 	bl	8002af4 <HAL_UARTEx_RxEventCallback>
 8002d54:	e797      	b.n	8002c86 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d56:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8002d58:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d5a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8002d5c:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d5e:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d090      	beq.n	8002c86 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d64:	1a89      	subs	r1, r1, r2
 8002d66:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002d68:	2900      	cmp	r1, #0
 8002d6a:	d08c      	beq.n	8002c86 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6c:	f103 020c 	add.w	r2, r3, #12
 8002d70:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	f103 050c 	add.w	r5, r3, #12
 8002d7c:	e845 2000 	strex	r0, r2, [r5]
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d1f3      	bne.n	8002d6c <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	f103 0214 	add.w	r2, r3, #20
 8002d88:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	f103 0514 	add.w	r5, r3, #20
 8002d94:	e845 2000 	strex	r0, r2, [r5]
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d1f3      	bne.n	8002d84 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da2:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	f103 020c 	add.w	r2, r3, #12
 8002da8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db0:	f103 050c 	add.w	r5, r3, #12
 8002db4:	e845 2000 	strex	r0, r2, [r5]
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d1f3      	bne.n	8002da4 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	6363      	str	r3, [r4, #52]	; 0x34
 8002dc0:	e7c5      	b.n	8002d4e <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dc2:	0616      	lsls	r6, r2, #24
 8002dc4:	d528      	bpl.n	8002e18 <HAL_UART_IRQHandler+0x26c>
 8002dc6:	060d      	lsls	r5, r1, #24
 8002dc8:	d526      	bpl.n	8002e18 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002dca:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002dce:	2a21      	cmp	r2, #33	; 0x21
 8002dd0:	f47f af59 	bne.w	8002c86 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd4:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dd6:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002ddc:	d117      	bne.n	8002e0e <HAL_UART_IRQHandler+0x262>
 8002dde:	6921      	ldr	r1, [r4, #16]
 8002de0:	b9a9      	cbnz	r1, 8002e0e <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002de2:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002de6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002dea:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dec:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002dee:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002df0:	3a01      	subs	r2, #1
 8002df2:	b292      	uxth	r2, r2
 8002df4:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002df6:	2a00      	cmp	r2, #0
 8002df8:	f47f af45 	bne.w	8002c86 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e02:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	e73b      	b.n	8002c86 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e0e:	1c51      	adds	r1, r2, #1
 8002e10:	6221      	str	r1, [r4, #32]
 8002e12:	7812      	ldrb	r2, [r2, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	e7ea      	b.n	8002dee <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e18:	0650      	lsls	r0, r2, #25
 8002e1a:	f57f af34 	bpl.w	8002c86 <HAL_UART_IRQHandler+0xda>
 8002e1e:	064a      	lsls	r2, r1, #25
 8002e20:	f57f af31 	bpl.w	8002c86 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e24:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002e26:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002e2e:	2320      	movs	r3, #32
 8002e30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8002e34:	f7ff fe54 	bl	8002ae0 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002e38:	e725      	b.n	8002c86 <HAL_UART_IRQHandler+0xda>
 8002e3a:	bf00      	nop
 8002e3c:	08002ae5 	.word	0x08002ae5

08002e40 <UART_Start_Receive_IT>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e40:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 8002e42:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e44:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e46:	2322      	movs	r3, #34	; 0x22
  huart->RxXferSize = Size;
 8002e48:	8582      	strh	r2, [r0, #44]	; 0x2c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e4a:	6902      	ldr	r2, [r0, #16]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e4c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->pRxBuffPtr = pData;
 8002e50:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e52:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e54:	b11a      	cbz	r2, 8002e5e <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e5c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e5e:	695a      	ldr	r2, [r3, #20]
}
 8002e60:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	f042 0220 	orr.w	r2, r2, #32
 8002e6e:	60da      	str	r2, [r3, #12]
}
 8002e70:	4770      	bx	lr

08002e72 <HAL_UART_Receive_IT>:
{
 8002e72:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e74:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8002e78:	2e20      	cmp	r6, #32
 8002e7a:	d106      	bne.n	8002e8a <HAL_UART_Receive_IT+0x18>
    if ((pData == NULL) || (Size == 0U))
 8002e7c:	b141      	cbz	r1, 8002e90 <HAL_UART_Receive_IT+0x1e>
 8002e7e:	b13a      	cbz	r2, 8002e90 <HAL_UART_Receive_IT+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e80:	2400      	movs	r4, #0
 8002e82:	6304      	str	r4, [r0, #48]	; 0x30
}
 8002e84:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e86:	f7ff bfdb 	b.w	8002e40 <UART_Start_Receive_IT>
    return HAL_BUSY;
 8002e8a:	2002      	movs	r0, #2
}
 8002e8c:	bc70      	pop	{r4, r5, r6}
 8002e8e:	4770      	bx	lr
      return HAL_ERROR;
 8002e90:	2001      	movs	r0, #1
 8002e92:	e7fb      	b.n	8002e8c <HAL_UART_Receive_IT+0x1a>

08002e94 <__cvt>:
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e9a:	461f      	mov	r7, r3
 8002e9c:	bfbb      	ittet	lt
 8002e9e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002ea2:	461f      	movlt	r7, r3
 8002ea4:	2300      	movge	r3, #0
 8002ea6:	232d      	movlt	r3, #45	; 0x2d
 8002ea8:	b088      	sub	sp, #32
 8002eaa:	4614      	mov	r4, r2
 8002eac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002eae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002eb0:	7013      	strb	r3, [r2, #0]
 8002eb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002eb4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002eb8:	f023 0820 	bic.w	r8, r3, #32
 8002ebc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ec0:	d005      	beq.n	8002ece <__cvt+0x3a>
 8002ec2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002ec6:	d100      	bne.n	8002eca <__cvt+0x36>
 8002ec8:	3501      	adds	r5, #1
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e000      	b.n	8002ed0 <__cvt+0x3c>
 8002ece:	2303      	movs	r3, #3
 8002ed0:	aa07      	add	r2, sp, #28
 8002ed2:	9204      	str	r2, [sp, #16]
 8002ed4:	aa06      	add	r2, sp, #24
 8002ed6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002eda:	e9cd 3500 	strd	r3, r5, [sp]
 8002ede:	4622      	mov	r2, r4
 8002ee0:	463b      	mov	r3, r7
 8002ee2:	f000 fea5 	bl	8003c30 <_dtoa_r>
 8002ee6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002eea:	4606      	mov	r6, r0
 8002eec:	d102      	bne.n	8002ef4 <__cvt+0x60>
 8002eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ef0:	07db      	lsls	r3, r3, #31
 8002ef2:	d522      	bpl.n	8002f3a <__cvt+0xa6>
 8002ef4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ef8:	eb06 0905 	add.w	r9, r6, r5
 8002efc:	d110      	bne.n	8002f20 <__cvt+0x8c>
 8002efe:	7833      	ldrb	r3, [r6, #0]
 8002f00:	2b30      	cmp	r3, #48	; 0x30
 8002f02:	d10a      	bne.n	8002f1a <__cvt+0x86>
 8002f04:	2200      	movs	r2, #0
 8002f06:	2300      	movs	r3, #0
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4639      	mov	r1, r7
 8002f0c:	f7fd fd56 	bl	80009bc <__aeabi_dcmpeq>
 8002f10:	b918      	cbnz	r0, 8002f1a <__cvt+0x86>
 8002f12:	f1c5 0501 	rsb	r5, r5, #1
 8002f16:	f8ca 5000 	str.w	r5, [sl]
 8002f1a:	f8da 3000 	ldr.w	r3, [sl]
 8002f1e:	4499      	add	r9, r3
 8002f20:	2200      	movs	r2, #0
 8002f22:	2300      	movs	r3, #0
 8002f24:	4620      	mov	r0, r4
 8002f26:	4639      	mov	r1, r7
 8002f28:	f7fd fd48 	bl	80009bc <__aeabi_dcmpeq>
 8002f2c:	b108      	cbz	r0, 8002f32 <__cvt+0x9e>
 8002f2e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002f32:	2230      	movs	r2, #48	; 0x30
 8002f34:	9b07      	ldr	r3, [sp, #28]
 8002f36:	454b      	cmp	r3, r9
 8002f38:	d307      	bcc.n	8002f4a <__cvt+0xb6>
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	9b07      	ldr	r3, [sp, #28]
 8002f3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002f40:	1b9b      	subs	r3, r3, r6
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	b008      	add	sp, #32
 8002f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f4a:	1c59      	adds	r1, r3, #1
 8002f4c:	9107      	str	r1, [sp, #28]
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e7f0      	b.n	8002f34 <__cvt+0xa0>

08002f52 <__exponent>:
 8002f52:	4603      	mov	r3, r0
 8002f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f56:	2900      	cmp	r1, #0
 8002f58:	f803 2b02 	strb.w	r2, [r3], #2
 8002f5c:	bfb6      	itet	lt
 8002f5e:	222d      	movlt	r2, #45	; 0x2d
 8002f60:	222b      	movge	r2, #43	; 0x2b
 8002f62:	4249      	neglt	r1, r1
 8002f64:	2909      	cmp	r1, #9
 8002f66:	7042      	strb	r2, [r0, #1]
 8002f68:	dd2a      	ble.n	8002fc0 <__exponent+0x6e>
 8002f6a:	f10d 0207 	add.w	r2, sp, #7
 8002f6e:	4617      	mov	r7, r2
 8002f70:	260a      	movs	r6, #10
 8002f72:	fb91 f5f6 	sdiv	r5, r1, r6
 8002f76:	4694      	mov	ip, r2
 8002f78:	fb06 1415 	mls	r4, r6, r5, r1
 8002f7c:	3430      	adds	r4, #48	; 0x30
 8002f7e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002f82:	460c      	mov	r4, r1
 8002f84:	2c63      	cmp	r4, #99	; 0x63
 8002f86:	4629      	mov	r1, r5
 8002f88:	f102 32ff 	add.w	r2, r2, #4294967295
 8002f8c:	dcf1      	bgt.n	8002f72 <__exponent+0x20>
 8002f8e:	3130      	adds	r1, #48	; 0x30
 8002f90:	f1ac 0402 	sub.w	r4, ip, #2
 8002f94:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002f98:	4622      	mov	r2, r4
 8002f9a:	1c41      	adds	r1, r0, #1
 8002f9c:	42ba      	cmp	r2, r7
 8002f9e:	d30a      	bcc.n	8002fb6 <__exponent+0x64>
 8002fa0:	f10d 0209 	add.w	r2, sp, #9
 8002fa4:	eba2 020c 	sub.w	r2, r2, ip
 8002fa8:	42bc      	cmp	r4, r7
 8002faa:	bf88      	it	hi
 8002fac:	2200      	movhi	r2, #0
 8002fae:	4413      	add	r3, r2
 8002fb0:	1a18      	subs	r0, r3, r0
 8002fb2:	b003      	add	sp, #12
 8002fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fb6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002fba:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002fbe:	e7ed      	b.n	8002f9c <__exponent+0x4a>
 8002fc0:	2330      	movs	r3, #48	; 0x30
 8002fc2:	3130      	adds	r1, #48	; 0x30
 8002fc4:	7083      	strb	r3, [r0, #2]
 8002fc6:	70c1      	strb	r1, [r0, #3]
 8002fc8:	1d03      	adds	r3, r0, #4
 8002fca:	e7f1      	b.n	8002fb0 <__exponent+0x5e>

08002fcc <_printf_float>:
 8002fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd0:	b091      	sub	sp, #68	; 0x44
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002fd8:	4616      	mov	r6, r2
 8002fda:	461f      	mov	r7, r3
 8002fdc:	4605      	mov	r5, r0
 8002fde:	f000 fd19 	bl	8003a14 <_localeconv_r>
 8002fe2:	6803      	ldr	r3, [r0, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8002fe8:	f7fd f8bc 	bl	8000164 <strlen>
 8002fec:	2300      	movs	r3, #0
 8002fee:	930e      	str	r3, [sp, #56]	; 0x38
 8002ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ff4:	900a      	str	r0, [sp, #40]	; 0x28
 8002ff6:	3307      	adds	r3, #7
 8002ff8:	f023 0307 	bic.w	r3, r3, #7
 8002ffc:	f103 0208 	add.w	r2, r3, #8
 8003000:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003004:	f8d4 b000 	ldr.w	fp, [r4]
 8003008:	f8c8 2000 	str.w	r2, [r8]
 800300c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003010:	4652      	mov	r2, sl
 8003012:	4643      	mov	r3, r8
 8003014:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003018:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800301c:	930b      	str	r3, [sp, #44]	; 0x2c
 800301e:	f04f 32ff 	mov.w	r2, #4294967295
 8003022:	4650      	mov	r0, sl
 8003024:	4b9c      	ldr	r3, [pc, #624]	; (8003298 <_printf_float+0x2cc>)
 8003026:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003028:	f7fd fcfa 	bl	8000a20 <__aeabi_dcmpun>
 800302c:	bb70      	cbnz	r0, 800308c <_printf_float+0xc0>
 800302e:	f04f 32ff 	mov.w	r2, #4294967295
 8003032:	4650      	mov	r0, sl
 8003034:	4b98      	ldr	r3, [pc, #608]	; (8003298 <_printf_float+0x2cc>)
 8003036:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003038:	f7fd fcd4 	bl	80009e4 <__aeabi_dcmple>
 800303c:	bb30      	cbnz	r0, 800308c <_printf_float+0xc0>
 800303e:	2200      	movs	r2, #0
 8003040:	2300      	movs	r3, #0
 8003042:	4650      	mov	r0, sl
 8003044:	4641      	mov	r1, r8
 8003046:	f7fd fcc3 	bl	80009d0 <__aeabi_dcmplt>
 800304a:	b110      	cbz	r0, 8003052 <_printf_float+0x86>
 800304c:	232d      	movs	r3, #45	; 0x2d
 800304e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003052:	4a92      	ldr	r2, [pc, #584]	; (800329c <_printf_float+0x2d0>)
 8003054:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <_printf_float+0x2d4>)
 8003056:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800305a:	bf94      	ite	ls
 800305c:	4690      	movls	r8, r2
 800305e:	4698      	movhi	r8, r3
 8003060:	2303      	movs	r3, #3
 8003062:	f04f 0a00 	mov.w	sl, #0
 8003066:	6123      	str	r3, [r4, #16]
 8003068:	f02b 0304 	bic.w	r3, fp, #4
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	4633      	mov	r3, r6
 8003070:	4621      	mov	r1, r4
 8003072:	4628      	mov	r0, r5
 8003074:	9700      	str	r7, [sp, #0]
 8003076:	aa0f      	add	r2, sp, #60	; 0x3c
 8003078:	f000 f9d6 	bl	8003428 <_printf_common>
 800307c:	3001      	adds	r0, #1
 800307e:	f040 8090 	bne.w	80031a2 <_printf_float+0x1d6>
 8003082:	f04f 30ff 	mov.w	r0, #4294967295
 8003086:	b011      	add	sp, #68	; 0x44
 8003088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800308c:	4652      	mov	r2, sl
 800308e:	4643      	mov	r3, r8
 8003090:	4650      	mov	r0, sl
 8003092:	4641      	mov	r1, r8
 8003094:	f7fd fcc4 	bl	8000a20 <__aeabi_dcmpun>
 8003098:	b148      	cbz	r0, 80030ae <_printf_float+0xe2>
 800309a:	f1b8 0f00 	cmp.w	r8, #0
 800309e:	bfb8      	it	lt
 80030a0:	232d      	movlt	r3, #45	; 0x2d
 80030a2:	4a80      	ldr	r2, [pc, #512]	; (80032a4 <_printf_float+0x2d8>)
 80030a4:	bfb8      	it	lt
 80030a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80030aa:	4b7f      	ldr	r3, [pc, #508]	; (80032a8 <_printf_float+0x2dc>)
 80030ac:	e7d3      	b.n	8003056 <_printf_float+0x8a>
 80030ae:	6863      	ldr	r3, [r4, #4]
 80030b0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	d142      	bne.n	800313e <_printf_float+0x172>
 80030b8:	2306      	movs	r3, #6
 80030ba:	6063      	str	r3, [r4, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	9206      	str	r2, [sp, #24]
 80030c0:	aa0e      	add	r2, sp, #56	; 0x38
 80030c2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80030c6:	aa0d      	add	r2, sp, #52	; 0x34
 80030c8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80030cc:	9203      	str	r2, [sp, #12]
 80030ce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80030d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80030d6:	6023      	str	r3, [r4, #0]
 80030d8:	6863      	ldr	r3, [r4, #4]
 80030da:	4652      	mov	r2, sl
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	4628      	mov	r0, r5
 80030e0:	4643      	mov	r3, r8
 80030e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80030e4:	f7ff fed6 	bl	8002e94 <__cvt>
 80030e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030ea:	4680      	mov	r8, r0
 80030ec:	2947      	cmp	r1, #71	; 0x47
 80030ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80030f0:	d108      	bne.n	8003104 <_printf_float+0x138>
 80030f2:	1cc8      	adds	r0, r1, #3
 80030f4:	db02      	blt.n	80030fc <_printf_float+0x130>
 80030f6:	6863      	ldr	r3, [r4, #4]
 80030f8:	4299      	cmp	r1, r3
 80030fa:	dd40      	ble.n	800317e <_printf_float+0x1b2>
 80030fc:	f1a9 0902 	sub.w	r9, r9, #2
 8003100:	fa5f f989 	uxtb.w	r9, r9
 8003104:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003108:	d81f      	bhi.n	800314a <_printf_float+0x17e>
 800310a:	464a      	mov	r2, r9
 800310c:	3901      	subs	r1, #1
 800310e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003112:	910d      	str	r1, [sp, #52]	; 0x34
 8003114:	f7ff ff1d 	bl	8002f52 <__exponent>
 8003118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800311a:	4682      	mov	sl, r0
 800311c:	1813      	adds	r3, r2, r0
 800311e:	2a01      	cmp	r2, #1
 8003120:	6123      	str	r3, [r4, #16]
 8003122:	dc02      	bgt.n	800312a <_printf_float+0x15e>
 8003124:	6822      	ldr	r2, [r4, #0]
 8003126:	07d2      	lsls	r2, r2, #31
 8003128:	d501      	bpl.n	800312e <_printf_float+0x162>
 800312a:	3301      	adds	r3, #1
 800312c:	6123      	str	r3, [r4, #16]
 800312e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003132:	2b00      	cmp	r3, #0
 8003134:	d09b      	beq.n	800306e <_printf_float+0xa2>
 8003136:	232d      	movs	r3, #45	; 0x2d
 8003138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800313c:	e797      	b.n	800306e <_printf_float+0xa2>
 800313e:	2947      	cmp	r1, #71	; 0x47
 8003140:	d1bc      	bne.n	80030bc <_printf_float+0xf0>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ba      	bne.n	80030bc <_printf_float+0xf0>
 8003146:	2301      	movs	r3, #1
 8003148:	e7b7      	b.n	80030ba <_printf_float+0xee>
 800314a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800314e:	d118      	bne.n	8003182 <_printf_float+0x1b6>
 8003150:	2900      	cmp	r1, #0
 8003152:	6863      	ldr	r3, [r4, #4]
 8003154:	dd0b      	ble.n	800316e <_printf_float+0x1a2>
 8003156:	6121      	str	r1, [r4, #16]
 8003158:	b913      	cbnz	r3, 8003160 <_printf_float+0x194>
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	07d0      	lsls	r0, r2, #31
 800315e:	d502      	bpl.n	8003166 <_printf_float+0x19a>
 8003160:	3301      	adds	r3, #1
 8003162:	440b      	add	r3, r1
 8003164:	6123      	str	r3, [r4, #16]
 8003166:	f04f 0a00 	mov.w	sl, #0
 800316a:	65a1      	str	r1, [r4, #88]	; 0x58
 800316c:	e7df      	b.n	800312e <_printf_float+0x162>
 800316e:	b913      	cbnz	r3, 8003176 <_printf_float+0x1aa>
 8003170:	6822      	ldr	r2, [r4, #0]
 8003172:	07d2      	lsls	r2, r2, #31
 8003174:	d501      	bpl.n	800317a <_printf_float+0x1ae>
 8003176:	3302      	adds	r3, #2
 8003178:	e7f4      	b.n	8003164 <_printf_float+0x198>
 800317a:	2301      	movs	r3, #1
 800317c:	e7f2      	b.n	8003164 <_printf_float+0x198>
 800317e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003184:	4299      	cmp	r1, r3
 8003186:	db05      	blt.n	8003194 <_printf_float+0x1c8>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	6121      	str	r1, [r4, #16]
 800318c:	07d8      	lsls	r0, r3, #31
 800318e:	d5ea      	bpl.n	8003166 <_printf_float+0x19a>
 8003190:	1c4b      	adds	r3, r1, #1
 8003192:	e7e7      	b.n	8003164 <_printf_float+0x198>
 8003194:	2900      	cmp	r1, #0
 8003196:	bfcc      	ite	gt
 8003198:	2201      	movgt	r2, #1
 800319a:	f1c1 0202 	rsble	r2, r1, #2
 800319e:	4413      	add	r3, r2
 80031a0:	e7e0      	b.n	8003164 <_printf_float+0x198>
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	055a      	lsls	r2, r3, #21
 80031a6:	d407      	bmi.n	80031b8 <_printf_float+0x1ec>
 80031a8:	6923      	ldr	r3, [r4, #16]
 80031aa:	4642      	mov	r2, r8
 80031ac:	4631      	mov	r1, r6
 80031ae:	4628      	mov	r0, r5
 80031b0:	47b8      	blx	r7
 80031b2:	3001      	adds	r0, #1
 80031b4:	d12b      	bne.n	800320e <_printf_float+0x242>
 80031b6:	e764      	b.n	8003082 <_printf_float+0xb6>
 80031b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80031bc:	f240 80dd 	bls.w	800337a <_printf_float+0x3ae>
 80031c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031c4:	2200      	movs	r2, #0
 80031c6:	2300      	movs	r3, #0
 80031c8:	f7fd fbf8 	bl	80009bc <__aeabi_dcmpeq>
 80031cc:	2800      	cmp	r0, #0
 80031ce:	d033      	beq.n	8003238 <_printf_float+0x26c>
 80031d0:	2301      	movs	r3, #1
 80031d2:	4631      	mov	r1, r6
 80031d4:	4628      	mov	r0, r5
 80031d6:	4a35      	ldr	r2, [pc, #212]	; (80032ac <_printf_float+0x2e0>)
 80031d8:	47b8      	blx	r7
 80031da:	3001      	adds	r0, #1
 80031dc:	f43f af51 	beq.w	8003082 <_printf_float+0xb6>
 80031e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031e4:	429a      	cmp	r2, r3
 80031e6:	db02      	blt.n	80031ee <_printf_float+0x222>
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	07d8      	lsls	r0, r3, #31
 80031ec:	d50f      	bpl.n	800320e <_printf_float+0x242>
 80031ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031f2:	4631      	mov	r1, r6
 80031f4:	4628      	mov	r0, r5
 80031f6:	47b8      	blx	r7
 80031f8:	3001      	adds	r0, #1
 80031fa:	f43f af42 	beq.w	8003082 <_printf_float+0xb6>
 80031fe:	f04f 0800 	mov.w	r8, #0
 8003202:	f104 091a 	add.w	r9, r4, #26
 8003206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003208:	3b01      	subs	r3, #1
 800320a:	4543      	cmp	r3, r8
 800320c:	dc09      	bgt.n	8003222 <_printf_float+0x256>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	079b      	lsls	r3, r3, #30
 8003212:	f100 8104 	bmi.w	800341e <_printf_float+0x452>
 8003216:	68e0      	ldr	r0, [r4, #12]
 8003218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800321a:	4298      	cmp	r0, r3
 800321c:	bfb8      	it	lt
 800321e:	4618      	movlt	r0, r3
 8003220:	e731      	b.n	8003086 <_printf_float+0xba>
 8003222:	2301      	movs	r3, #1
 8003224:	464a      	mov	r2, r9
 8003226:	4631      	mov	r1, r6
 8003228:	4628      	mov	r0, r5
 800322a:	47b8      	blx	r7
 800322c:	3001      	adds	r0, #1
 800322e:	f43f af28 	beq.w	8003082 <_printf_float+0xb6>
 8003232:	f108 0801 	add.w	r8, r8, #1
 8003236:	e7e6      	b.n	8003206 <_printf_float+0x23a>
 8003238:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800323a:	2b00      	cmp	r3, #0
 800323c:	dc38      	bgt.n	80032b0 <_printf_float+0x2e4>
 800323e:	2301      	movs	r3, #1
 8003240:	4631      	mov	r1, r6
 8003242:	4628      	mov	r0, r5
 8003244:	4a19      	ldr	r2, [pc, #100]	; (80032ac <_printf_float+0x2e0>)
 8003246:	47b8      	blx	r7
 8003248:	3001      	adds	r0, #1
 800324a:	f43f af1a 	beq.w	8003082 <_printf_float+0xb6>
 800324e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003252:	4313      	orrs	r3, r2
 8003254:	d102      	bne.n	800325c <_printf_float+0x290>
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	07d9      	lsls	r1, r3, #31
 800325a:	d5d8      	bpl.n	800320e <_printf_float+0x242>
 800325c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003260:	4631      	mov	r1, r6
 8003262:	4628      	mov	r0, r5
 8003264:	47b8      	blx	r7
 8003266:	3001      	adds	r0, #1
 8003268:	f43f af0b 	beq.w	8003082 <_printf_float+0xb6>
 800326c:	f04f 0900 	mov.w	r9, #0
 8003270:	f104 0a1a 	add.w	sl, r4, #26
 8003274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003276:	425b      	negs	r3, r3
 8003278:	454b      	cmp	r3, r9
 800327a:	dc01      	bgt.n	8003280 <_printf_float+0x2b4>
 800327c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800327e:	e794      	b.n	80031aa <_printf_float+0x1de>
 8003280:	2301      	movs	r3, #1
 8003282:	4652      	mov	r2, sl
 8003284:	4631      	mov	r1, r6
 8003286:	4628      	mov	r0, r5
 8003288:	47b8      	blx	r7
 800328a:	3001      	adds	r0, #1
 800328c:	f43f aef9 	beq.w	8003082 <_printf_float+0xb6>
 8003290:	f109 0901 	add.w	r9, r9, #1
 8003294:	e7ee      	b.n	8003274 <_printf_float+0x2a8>
 8003296:	bf00      	nop
 8003298:	7fefffff 	.word	0x7fefffff
 800329c:	08005c6e 	.word	0x08005c6e
 80032a0:	08005c72 	.word	0x08005c72
 80032a4:	08005c76 	.word	0x08005c76
 80032a8:	08005c7a 	.word	0x08005c7a
 80032ac:	08005c7e 	.word	0x08005c7e
 80032b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032b4:	429a      	cmp	r2, r3
 80032b6:	bfa8      	it	ge
 80032b8:	461a      	movge	r2, r3
 80032ba:	2a00      	cmp	r2, #0
 80032bc:	4691      	mov	r9, r2
 80032be:	dc37      	bgt.n	8003330 <_printf_float+0x364>
 80032c0:	f04f 0b00 	mov.w	fp, #0
 80032c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032c8:	f104 021a 	add.w	r2, r4, #26
 80032cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80032d0:	ebaa 0309 	sub.w	r3, sl, r9
 80032d4:	455b      	cmp	r3, fp
 80032d6:	dc33      	bgt.n	8003340 <_printf_float+0x374>
 80032d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80032dc:	429a      	cmp	r2, r3
 80032de:	db3b      	blt.n	8003358 <_printf_float+0x38c>
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	07da      	lsls	r2, r3, #31
 80032e4:	d438      	bmi.n	8003358 <_printf_float+0x38c>
 80032e6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80032ea:	eba2 0903 	sub.w	r9, r2, r3
 80032ee:	eba2 020a 	sub.w	r2, r2, sl
 80032f2:	4591      	cmp	r9, r2
 80032f4:	bfa8      	it	ge
 80032f6:	4691      	movge	r9, r2
 80032f8:	f1b9 0f00 	cmp.w	r9, #0
 80032fc:	dc34      	bgt.n	8003368 <_printf_float+0x39c>
 80032fe:	f04f 0800 	mov.w	r8, #0
 8003302:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003306:	f104 0a1a 	add.w	sl, r4, #26
 800330a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	eba3 0309 	sub.w	r3, r3, r9
 8003314:	4543      	cmp	r3, r8
 8003316:	f77f af7a 	ble.w	800320e <_printf_float+0x242>
 800331a:	2301      	movs	r3, #1
 800331c:	4652      	mov	r2, sl
 800331e:	4631      	mov	r1, r6
 8003320:	4628      	mov	r0, r5
 8003322:	47b8      	blx	r7
 8003324:	3001      	adds	r0, #1
 8003326:	f43f aeac 	beq.w	8003082 <_printf_float+0xb6>
 800332a:	f108 0801 	add.w	r8, r8, #1
 800332e:	e7ec      	b.n	800330a <_printf_float+0x33e>
 8003330:	4613      	mov	r3, r2
 8003332:	4631      	mov	r1, r6
 8003334:	4642      	mov	r2, r8
 8003336:	4628      	mov	r0, r5
 8003338:	47b8      	blx	r7
 800333a:	3001      	adds	r0, #1
 800333c:	d1c0      	bne.n	80032c0 <_printf_float+0x2f4>
 800333e:	e6a0      	b.n	8003082 <_printf_float+0xb6>
 8003340:	2301      	movs	r3, #1
 8003342:	4631      	mov	r1, r6
 8003344:	4628      	mov	r0, r5
 8003346:	920b      	str	r2, [sp, #44]	; 0x2c
 8003348:	47b8      	blx	r7
 800334a:	3001      	adds	r0, #1
 800334c:	f43f ae99 	beq.w	8003082 <_printf_float+0xb6>
 8003350:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003352:	f10b 0b01 	add.w	fp, fp, #1
 8003356:	e7b9      	b.n	80032cc <_printf_float+0x300>
 8003358:	4631      	mov	r1, r6
 800335a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800335e:	4628      	mov	r0, r5
 8003360:	47b8      	blx	r7
 8003362:	3001      	adds	r0, #1
 8003364:	d1bf      	bne.n	80032e6 <_printf_float+0x31a>
 8003366:	e68c      	b.n	8003082 <_printf_float+0xb6>
 8003368:	464b      	mov	r3, r9
 800336a:	4631      	mov	r1, r6
 800336c:	4628      	mov	r0, r5
 800336e:	eb08 020a 	add.w	r2, r8, sl
 8003372:	47b8      	blx	r7
 8003374:	3001      	adds	r0, #1
 8003376:	d1c2      	bne.n	80032fe <_printf_float+0x332>
 8003378:	e683      	b.n	8003082 <_printf_float+0xb6>
 800337a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800337c:	2a01      	cmp	r2, #1
 800337e:	dc01      	bgt.n	8003384 <_printf_float+0x3b8>
 8003380:	07db      	lsls	r3, r3, #31
 8003382:	d539      	bpl.n	80033f8 <_printf_float+0x42c>
 8003384:	2301      	movs	r3, #1
 8003386:	4642      	mov	r2, r8
 8003388:	4631      	mov	r1, r6
 800338a:	4628      	mov	r0, r5
 800338c:	47b8      	blx	r7
 800338e:	3001      	adds	r0, #1
 8003390:	f43f ae77 	beq.w	8003082 <_printf_float+0xb6>
 8003394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003398:	4631      	mov	r1, r6
 800339a:	4628      	mov	r0, r5
 800339c:	47b8      	blx	r7
 800339e:	3001      	adds	r0, #1
 80033a0:	f43f ae6f 	beq.w	8003082 <_printf_float+0xb6>
 80033a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033a8:	2200      	movs	r2, #0
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80033b0:	f7fd fb04 	bl	80009bc <__aeabi_dcmpeq>
 80033b4:	b9d8      	cbnz	r0, 80033ee <_printf_float+0x422>
 80033b6:	f109 33ff 	add.w	r3, r9, #4294967295
 80033ba:	f108 0201 	add.w	r2, r8, #1
 80033be:	4631      	mov	r1, r6
 80033c0:	4628      	mov	r0, r5
 80033c2:	47b8      	blx	r7
 80033c4:	3001      	adds	r0, #1
 80033c6:	d10e      	bne.n	80033e6 <_printf_float+0x41a>
 80033c8:	e65b      	b.n	8003082 <_printf_float+0xb6>
 80033ca:	2301      	movs	r3, #1
 80033cc:	464a      	mov	r2, r9
 80033ce:	4631      	mov	r1, r6
 80033d0:	4628      	mov	r0, r5
 80033d2:	47b8      	blx	r7
 80033d4:	3001      	adds	r0, #1
 80033d6:	f43f ae54 	beq.w	8003082 <_printf_float+0xb6>
 80033da:	f108 0801 	add.w	r8, r8, #1
 80033de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033e0:	3b01      	subs	r3, #1
 80033e2:	4543      	cmp	r3, r8
 80033e4:	dcf1      	bgt.n	80033ca <_printf_float+0x3fe>
 80033e6:	4653      	mov	r3, sl
 80033e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80033ec:	e6de      	b.n	80031ac <_printf_float+0x1e0>
 80033ee:	f04f 0800 	mov.w	r8, #0
 80033f2:	f104 091a 	add.w	r9, r4, #26
 80033f6:	e7f2      	b.n	80033de <_printf_float+0x412>
 80033f8:	2301      	movs	r3, #1
 80033fa:	4642      	mov	r2, r8
 80033fc:	e7df      	b.n	80033be <_printf_float+0x3f2>
 80033fe:	2301      	movs	r3, #1
 8003400:	464a      	mov	r2, r9
 8003402:	4631      	mov	r1, r6
 8003404:	4628      	mov	r0, r5
 8003406:	47b8      	blx	r7
 8003408:	3001      	adds	r0, #1
 800340a:	f43f ae3a 	beq.w	8003082 <_printf_float+0xb6>
 800340e:	f108 0801 	add.w	r8, r8, #1
 8003412:	68e3      	ldr	r3, [r4, #12]
 8003414:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003416:	1a5b      	subs	r3, r3, r1
 8003418:	4543      	cmp	r3, r8
 800341a:	dcf0      	bgt.n	80033fe <_printf_float+0x432>
 800341c:	e6fb      	b.n	8003216 <_printf_float+0x24a>
 800341e:	f04f 0800 	mov.w	r8, #0
 8003422:	f104 0919 	add.w	r9, r4, #25
 8003426:	e7f4      	b.n	8003412 <_printf_float+0x446>

08003428 <_printf_common>:
 8003428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800342c:	4616      	mov	r6, r2
 800342e:	4699      	mov	r9, r3
 8003430:	688a      	ldr	r2, [r1, #8]
 8003432:	690b      	ldr	r3, [r1, #16]
 8003434:	4607      	mov	r7, r0
 8003436:	4293      	cmp	r3, r2
 8003438:	bfb8      	it	lt
 800343a:	4613      	movlt	r3, r2
 800343c:	6033      	str	r3, [r6, #0]
 800343e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003442:	460c      	mov	r4, r1
 8003444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003448:	b10a      	cbz	r2, 800344e <_printf_common+0x26>
 800344a:	3301      	adds	r3, #1
 800344c:	6033      	str	r3, [r6, #0]
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	0699      	lsls	r1, r3, #26
 8003452:	bf42      	ittt	mi
 8003454:	6833      	ldrmi	r3, [r6, #0]
 8003456:	3302      	addmi	r3, #2
 8003458:	6033      	strmi	r3, [r6, #0]
 800345a:	6825      	ldr	r5, [r4, #0]
 800345c:	f015 0506 	ands.w	r5, r5, #6
 8003460:	d106      	bne.n	8003470 <_printf_common+0x48>
 8003462:	f104 0a19 	add.w	sl, r4, #25
 8003466:	68e3      	ldr	r3, [r4, #12]
 8003468:	6832      	ldr	r2, [r6, #0]
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	42ab      	cmp	r3, r5
 800346e:	dc2b      	bgt.n	80034c8 <_printf_common+0xa0>
 8003470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003474:	1e13      	subs	r3, r2, #0
 8003476:	6822      	ldr	r2, [r4, #0]
 8003478:	bf18      	it	ne
 800347a:	2301      	movne	r3, #1
 800347c:	0692      	lsls	r2, r2, #26
 800347e:	d430      	bmi.n	80034e2 <_printf_common+0xba>
 8003480:	4649      	mov	r1, r9
 8003482:	4638      	mov	r0, r7
 8003484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003488:	47c0      	blx	r8
 800348a:	3001      	adds	r0, #1
 800348c:	d023      	beq.n	80034d6 <_printf_common+0xae>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	6922      	ldr	r2, [r4, #16]
 8003492:	f003 0306 	and.w	r3, r3, #6
 8003496:	2b04      	cmp	r3, #4
 8003498:	bf14      	ite	ne
 800349a:	2500      	movne	r5, #0
 800349c:	6833      	ldreq	r3, [r6, #0]
 800349e:	f04f 0600 	mov.w	r6, #0
 80034a2:	bf08      	it	eq
 80034a4:	68e5      	ldreq	r5, [r4, #12]
 80034a6:	f104 041a 	add.w	r4, r4, #26
 80034aa:	bf08      	it	eq
 80034ac:	1aed      	subeq	r5, r5, r3
 80034ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034b2:	bf08      	it	eq
 80034b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034b8:	4293      	cmp	r3, r2
 80034ba:	bfc4      	itt	gt
 80034bc:	1a9b      	subgt	r3, r3, r2
 80034be:	18ed      	addgt	r5, r5, r3
 80034c0:	42b5      	cmp	r5, r6
 80034c2:	d11a      	bne.n	80034fa <_printf_common+0xd2>
 80034c4:	2000      	movs	r0, #0
 80034c6:	e008      	b.n	80034da <_printf_common+0xb2>
 80034c8:	2301      	movs	r3, #1
 80034ca:	4652      	mov	r2, sl
 80034cc:	4649      	mov	r1, r9
 80034ce:	4638      	mov	r0, r7
 80034d0:	47c0      	blx	r8
 80034d2:	3001      	adds	r0, #1
 80034d4:	d103      	bne.n	80034de <_printf_common+0xb6>
 80034d6:	f04f 30ff 	mov.w	r0, #4294967295
 80034da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034de:	3501      	adds	r5, #1
 80034e0:	e7c1      	b.n	8003466 <_printf_common+0x3e>
 80034e2:	2030      	movs	r0, #48	; 0x30
 80034e4:	18e1      	adds	r1, r4, r3
 80034e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034f0:	4422      	add	r2, r4
 80034f2:	3302      	adds	r3, #2
 80034f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034f8:	e7c2      	b.n	8003480 <_printf_common+0x58>
 80034fa:	2301      	movs	r3, #1
 80034fc:	4622      	mov	r2, r4
 80034fe:	4649      	mov	r1, r9
 8003500:	4638      	mov	r0, r7
 8003502:	47c0      	blx	r8
 8003504:	3001      	adds	r0, #1
 8003506:	d0e6      	beq.n	80034d6 <_printf_common+0xae>
 8003508:	3601      	adds	r6, #1
 800350a:	e7d9      	b.n	80034c0 <_printf_common+0x98>

0800350c <_printf_i>:
 800350c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003510:	7e0f      	ldrb	r7, [r1, #24]
 8003512:	4691      	mov	r9, r2
 8003514:	2f78      	cmp	r7, #120	; 0x78
 8003516:	4680      	mov	r8, r0
 8003518:	460c      	mov	r4, r1
 800351a:	469a      	mov	sl, r3
 800351c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800351e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003522:	d807      	bhi.n	8003534 <_printf_i+0x28>
 8003524:	2f62      	cmp	r7, #98	; 0x62
 8003526:	d80a      	bhi.n	800353e <_printf_i+0x32>
 8003528:	2f00      	cmp	r7, #0
 800352a:	f000 80d5 	beq.w	80036d8 <_printf_i+0x1cc>
 800352e:	2f58      	cmp	r7, #88	; 0x58
 8003530:	f000 80c1 	beq.w	80036b6 <_printf_i+0x1aa>
 8003534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800353c:	e03a      	b.n	80035b4 <_printf_i+0xa8>
 800353e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003542:	2b15      	cmp	r3, #21
 8003544:	d8f6      	bhi.n	8003534 <_printf_i+0x28>
 8003546:	a101      	add	r1, pc, #4	; (adr r1, 800354c <_printf_i+0x40>)
 8003548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800354c:	080035a5 	.word	0x080035a5
 8003550:	080035b9 	.word	0x080035b9
 8003554:	08003535 	.word	0x08003535
 8003558:	08003535 	.word	0x08003535
 800355c:	08003535 	.word	0x08003535
 8003560:	08003535 	.word	0x08003535
 8003564:	080035b9 	.word	0x080035b9
 8003568:	08003535 	.word	0x08003535
 800356c:	08003535 	.word	0x08003535
 8003570:	08003535 	.word	0x08003535
 8003574:	08003535 	.word	0x08003535
 8003578:	080036bf 	.word	0x080036bf
 800357c:	080035e5 	.word	0x080035e5
 8003580:	08003679 	.word	0x08003679
 8003584:	08003535 	.word	0x08003535
 8003588:	08003535 	.word	0x08003535
 800358c:	080036e1 	.word	0x080036e1
 8003590:	08003535 	.word	0x08003535
 8003594:	080035e5 	.word	0x080035e5
 8003598:	08003535 	.word	0x08003535
 800359c:	08003535 	.word	0x08003535
 80035a0:	08003681 	.word	0x08003681
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	602a      	str	r2, [r5, #0]
 80035ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0a0      	b.n	80036fa <_printf_i+0x1ee>
 80035b8:	6820      	ldr	r0, [r4, #0]
 80035ba:	682b      	ldr	r3, [r5, #0]
 80035bc:	0607      	lsls	r7, r0, #24
 80035be:	f103 0104 	add.w	r1, r3, #4
 80035c2:	6029      	str	r1, [r5, #0]
 80035c4:	d501      	bpl.n	80035ca <_printf_i+0xbe>
 80035c6:	681e      	ldr	r6, [r3, #0]
 80035c8:	e003      	b.n	80035d2 <_printf_i+0xc6>
 80035ca:	0646      	lsls	r6, r0, #25
 80035cc:	d5fb      	bpl.n	80035c6 <_printf_i+0xba>
 80035ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035d2:	2e00      	cmp	r6, #0
 80035d4:	da03      	bge.n	80035de <_printf_i+0xd2>
 80035d6:	232d      	movs	r3, #45	; 0x2d
 80035d8:	4276      	negs	r6, r6
 80035da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035de:	230a      	movs	r3, #10
 80035e0:	4859      	ldr	r0, [pc, #356]	; (8003748 <_printf_i+0x23c>)
 80035e2:	e012      	b.n	800360a <_printf_i+0xfe>
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	6820      	ldr	r0, [r4, #0]
 80035e8:	1d19      	adds	r1, r3, #4
 80035ea:	6029      	str	r1, [r5, #0]
 80035ec:	0605      	lsls	r5, r0, #24
 80035ee:	d501      	bpl.n	80035f4 <_printf_i+0xe8>
 80035f0:	681e      	ldr	r6, [r3, #0]
 80035f2:	e002      	b.n	80035fa <_printf_i+0xee>
 80035f4:	0641      	lsls	r1, r0, #25
 80035f6:	d5fb      	bpl.n	80035f0 <_printf_i+0xe4>
 80035f8:	881e      	ldrh	r6, [r3, #0]
 80035fa:	2f6f      	cmp	r7, #111	; 0x6f
 80035fc:	bf0c      	ite	eq
 80035fe:	2308      	moveq	r3, #8
 8003600:	230a      	movne	r3, #10
 8003602:	4851      	ldr	r0, [pc, #324]	; (8003748 <_printf_i+0x23c>)
 8003604:	2100      	movs	r1, #0
 8003606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800360a:	6865      	ldr	r5, [r4, #4]
 800360c:	2d00      	cmp	r5, #0
 800360e:	bfa8      	it	ge
 8003610:	6821      	ldrge	r1, [r4, #0]
 8003612:	60a5      	str	r5, [r4, #8]
 8003614:	bfa4      	itt	ge
 8003616:	f021 0104 	bicge.w	r1, r1, #4
 800361a:	6021      	strge	r1, [r4, #0]
 800361c:	b90e      	cbnz	r6, 8003622 <_printf_i+0x116>
 800361e:	2d00      	cmp	r5, #0
 8003620:	d04b      	beq.n	80036ba <_printf_i+0x1ae>
 8003622:	4615      	mov	r5, r2
 8003624:	fbb6 f1f3 	udiv	r1, r6, r3
 8003628:	fb03 6711 	mls	r7, r3, r1, r6
 800362c:	5dc7      	ldrb	r7, [r0, r7]
 800362e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003632:	4637      	mov	r7, r6
 8003634:	42bb      	cmp	r3, r7
 8003636:	460e      	mov	r6, r1
 8003638:	d9f4      	bls.n	8003624 <_printf_i+0x118>
 800363a:	2b08      	cmp	r3, #8
 800363c:	d10b      	bne.n	8003656 <_printf_i+0x14a>
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	07de      	lsls	r6, r3, #31
 8003642:	d508      	bpl.n	8003656 <_printf_i+0x14a>
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	6861      	ldr	r1, [r4, #4]
 8003648:	4299      	cmp	r1, r3
 800364a:	bfde      	ittt	le
 800364c:	2330      	movle	r3, #48	; 0x30
 800364e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003652:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003656:	1b52      	subs	r2, r2, r5
 8003658:	6122      	str	r2, [r4, #16]
 800365a:	464b      	mov	r3, r9
 800365c:	4621      	mov	r1, r4
 800365e:	4640      	mov	r0, r8
 8003660:	f8cd a000 	str.w	sl, [sp]
 8003664:	aa03      	add	r2, sp, #12
 8003666:	f7ff fedf 	bl	8003428 <_printf_common>
 800366a:	3001      	adds	r0, #1
 800366c:	d14a      	bne.n	8003704 <_printf_i+0x1f8>
 800366e:	f04f 30ff 	mov.w	r0, #4294967295
 8003672:	b004      	add	sp, #16
 8003674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	f043 0320 	orr.w	r3, r3, #32
 800367e:	6023      	str	r3, [r4, #0]
 8003680:	2778      	movs	r7, #120	; 0x78
 8003682:	4832      	ldr	r0, [pc, #200]	; (800374c <_printf_i+0x240>)
 8003684:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	6829      	ldr	r1, [r5, #0]
 800368c:	061f      	lsls	r7, r3, #24
 800368e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003692:	d402      	bmi.n	800369a <_printf_i+0x18e>
 8003694:	065f      	lsls	r7, r3, #25
 8003696:	bf48      	it	mi
 8003698:	b2b6      	uxthmi	r6, r6
 800369a:	07df      	lsls	r7, r3, #31
 800369c:	bf48      	it	mi
 800369e:	f043 0320 	orrmi.w	r3, r3, #32
 80036a2:	6029      	str	r1, [r5, #0]
 80036a4:	bf48      	it	mi
 80036a6:	6023      	strmi	r3, [r4, #0]
 80036a8:	b91e      	cbnz	r6, 80036b2 <_printf_i+0x1a6>
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	f023 0320 	bic.w	r3, r3, #32
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	2310      	movs	r3, #16
 80036b4:	e7a6      	b.n	8003604 <_printf_i+0xf8>
 80036b6:	4824      	ldr	r0, [pc, #144]	; (8003748 <_printf_i+0x23c>)
 80036b8:	e7e4      	b.n	8003684 <_printf_i+0x178>
 80036ba:	4615      	mov	r5, r2
 80036bc:	e7bd      	b.n	800363a <_printf_i+0x12e>
 80036be:	682b      	ldr	r3, [r5, #0]
 80036c0:	6826      	ldr	r6, [r4, #0]
 80036c2:	1d18      	adds	r0, r3, #4
 80036c4:	6961      	ldr	r1, [r4, #20]
 80036c6:	6028      	str	r0, [r5, #0]
 80036c8:	0635      	lsls	r5, r6, #24
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	d501      	bpl.n	80036d2 <_printf_i+0x1c6>
 80036ce:	6019      	str	r1, [r3, #0]
 80036d0:	e002      	b.n	80036d8 <_printf_i+0x1cc>
 80036d2:	0670      	lsls	r0, r6, #25
 80036d4:	d5fb      	bpl.n	80036ce <_printf_i+0x1c2>
 80036d6:	8019      	strh	r1, [r3, #0]
 80036d8:	2300      	movs	r3, #0
 80036da:	4615      	mov	r5, r2
 80036dc:	6123      	str	r3, [r4, #16]
 80036de:	e7bc      	b.n	800365a <_printf_i+0x14e>
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	2100      	movs	r1, #0
 80036e4:	1d1a      	adds	r2, r3, #4
 80036e6:	602a      	str	r2, [r5, #0]
 80036e8:	681d      	ldr	r5, [r3, #0]
 80036ea:	6862      	ldr	r2, [r4, #4]
 80036ec:	4628      	mov	r0, r5
 80036ee:	f000 fa07 	bl	8003b00 <memchr>
 80036f2:	b108      	cbz	r0, 80036f8 <_printf_i+0x1ec>
 80036f4:	1b40      	subs	r0, r0, r5
 80036f6:	6060      	str	r0, [r4, #4]
 80036f8:	6863      	ldr	r3, [r4, #4]
 80036fa:	6123      	str	r3, [r4, #16]
 80036fc:	2300      	movs	r3, #0
 80036fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003702:	e7aa      	b.n	800365a <_printf_i+0x14e>
 8003704:	462a      	mov	r2, r5
 8003706:	4649      	mov	r1, r9
 8003708:	4640      	mov	r0, r8
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	47d0      	blx	sl
 800370e:	3001      	adds	r0, #1
 8003710:	d0ad      	beq.n	800366e <_printf_i+0x162>
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	079b      	lsls	r3, r3, #30
 8003716:	d413      	bmi.n	8003740 <_printf_i+0x234>
 8003718:	68e0      	ldr	r0, [r4, #12]
 800371a:	9b03      	ldr	r3, [sp, #12]
 800371c:	4298      	cmp	r0, r3
 800371e:	bfb8      	it	lt
 8003720:	4618      	movlt	r0, r3
 8003722:	e7a6      	b.n	8003672 <_printf_i+0x166>
 8003724:	2301      	movs	r3, #1
 8003726:	4632      	mov	r2, r6
 8003728:	4649      	mov	r1, r9
 800372a:	4640      	mov	r0, r8
 800372c:	47d0      	blx	sl
 800372e:	3001      	adds	r0, #1
 8003730:	d09d      	beq.n	800366e <_printf_i+0x162>
 8003732:	3501      	adds	r5, #1
 8003734:	68e3      	ldr	r3, [r4, #12]
 8003736:	9903      	ldr	r1, [sp, #12]
 8003738:	1a5b      	subs	r3, r3, r1
 800373a:	42ab      	cmp	r3, r5
 800373c:	dcf2      	bgt.n	8003724 <_printf_i+0x218>
 800373e:	e7eb      	b.n	8003718 <_printf_i+0x20c>
 8003740:	2500      	movs	r5, #0
 8003742:	f104 0619 	add.w	r6, r4, #25
 8003746:	e7f5      	b.n	8003734 <_printf_i+0x228>
 8003748:	08005c80 	.word	0x08005c80
 800374c:	08005c91 	.word	0x08005c91

08003750 <std>:
 8003750:	2300      	movs	r3, #0
 8003752:	b510      	push	{r4, lr}
 8003754:	4604      	mov	r4, r0
 8003756:	e9c0 3300 	strd	r3, r3, [r0]
 800375a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800375e:	6083      	str	r3, [r0, #8]
 8003760:	8181      	strh	r1, [r0, #12]
 8003762:	6643      	str	r3, [r0, #100]	; 0x64
 8003764:	81c2      	strh	r2, [r0, #14]
 8003766:	6183      	str	r3, [r0, #24]
 8003768:	4619      	mov	r1, r3
 800376a:	2208      	movs	r2, #8
 800376c:	305c      	adds	r0, #92	; 0x5c
 800376e:	f000 f936 	bl	80039de <memset>
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <std+0x38>)
 8003774:	6224      	str	r4, [r4, #32]
 8003776:	6263      	str	r3, [r4, #36]	; 0x24
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <std+0x3c>)
 800377a:	62a3      	str	r3, [r4, #40]	; 0x28
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <std+0x40>)
 800377e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <std+0x44>)
 8003782:	6323      	str	r3, [r4, #48]	; 0x30
 8003784:	bd10      	pop	{r4, pc}
 8003786:	bf00      	nop
 8003788:	08003959 	.word	0x08003959
 800378c:	0800397b 	.word	0x0800397b
 8003790:	080039b3 	.word	0x080039b3
 8003794:	080039d7 	.word	0x080039d7

08003798 <stdio_exit_handler>:
 8003798:	4a02      	ldr	r2, [pc, #8]	; (80037a4 <stdio_exit_handler+0xc>)
 800379a:	4903      	ldr	r1, [pc, #12]	; (80037a8 <stdio_exit_handler+0x10>)
 800379c:	4803      	ldr	r0, [pc, #12]	; (80037ac <stdio_exit_handler+0x14>)
 800379e:	f000 b869 	b.w	8003874 <_fwalk_sglue>
 80037a2:	bf00      	nop
 80037a4:	2000000c 	.word	0x2000000c
 80037a8:	08005495 	.word	0x08005495
 80037ac:	20000018 	.word	0x20000018

080037b0 <cleanup_stdio>:
 80037b0:	6841      	ldr	r1, [r0, #4]
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <cleanup_stdio+0x34>)
 80037b4:	b510      	push	{r4, lr}
 80037b6:	4299      	cmp	r1, r3
 80037b8:	4604      	mov	r4, r0
 80037ba:	d001      	beq.n	80037c0 <cleanup_stdio+0x10>
 80037bc:	f001 fe6a 	bl	8005494 <_fflush_r>
 80037c0:	68a1      	ldr	r1, [r4, #8]
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <cleanup_stdio+0x38>)
 80037c4:	4299      	cmp	r1, r3
 80037c6:	d002      	beq.n	80037ce <cleanup_stdio+0x1e>
 80037c8:	4620      	mov	r0, r4
 80037ca:	f001 fe63 	bl	8005494 <_fflush_r>
 80037ce:	68e1      	ldr	r1, [r4, #12]
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <cleanup_stdio+0x3c>)
 80037d2:	4299      	cmp	r1, r3
 80037d4:	d004      	beq.n	80037e0 <cleanup_stdio+0x30>
 80037d6:	4620      	mov	r0, r4
 80037d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037dc:	f001 be5a 	b.w	8005494 <_fflush_r>
 80037e0:	bd10      	pop	{r4, pc}
 80037e2:	bf00      	nop
 80037e4:	20000334 	.word	0x20000334
 80037e8:	2000039c 	.word	0x2000039c
 80037ec:	20000404 	.word	0x20000404

080037f0 <global_stdio_init.part.0>:
 80037f0:	b510      	push	{r4, lr}
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <global_stdio_init.part.0+0x30>)
 80037f4:	4c0b      	ldr	r4, [pc, #44]	; (8003824 <global_stdio_init.part.0+0x34>)
 80037f6:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <global_stdio_init.part.0+0x38>)
 80037f8:	4620      	mov	r0, r4
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	2104      	movs	r1, #4
 80037fe:	2200      	movs	r2, #0
 8003800:	f7ff ffa6 	bl	8003750 <std>
 8003804:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003808:	2201      	movs	r2, #1
 800380a:	2109      	movs	r1, #9
 800380c:	f7ff ffa0 	bl	8003750 <std>
 8003810:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003814:	2202      	movs	r2, #2
 8003816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800381a:	2112      	movs	r1, #18
 800381c:	f7ff bf98 	b.w	8003750 <std>
 8003820:	2000046c 	.word	0x2000046c
 8003824:	20000334 	.word	0x20000334
 8003828:	08003799 	.word	0x08003799

0800382c <__sfp_lock_acquire>:
 800382c:	4801      	ldr	r0, [pc, #4]	; (8003834 <__sfp_lock_acquire+0x8>)
 800382e:	f000 b965 	b.w	8003afc <__retarget_lock_acquire_recursive>
 8003832:	bf00      	nop
 8003834:	20000475 	.word	0x20000475

08003838 <__sfp_lock_release>:
 8003838:	4801      	ldr	r0, [pc, #4]	; (8003840 <__sfp_lock_release+0x8>)
 800383a:	f000 b960 	b.w	8003afe <__retarget_lock_release_recursive>
 800383e:	bf00      	nop
 8003840:	20000475 	.word	0x20000475

08003844 <__sinit>:
 8003844:	b510      	push	{r4, lr}
 8003846:	4604      	mov	r4, r0
 8003848:	f7ff fff0 	bl	800382c <__sfp_lock_acquire>
 800384c:	6a23      	ldr	r3, [r4, #32]
 800384e:	b11b      	cbz	r3, 8003858 <__sinit+0x14>
 8003850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003854:	f7ff bff0 	b.w	8003838 <__sfp_lock_release>
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <__sinit+0x28>)
 800385a:	6223      	str	r3, [r4, #32]
 800385c:	4b04      	ldr	r3, [pc, #16]	; (8003870 <__sinit+0x2c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f5      	bne.n	8003850 <__sinit+0xc>
 8003864:	f7ff ffc4 	bl	80037f0 <global_stdio_init.part.0>
 8003868:	e7f2      	b.n	8003850 <__sinit+0xc>
 800386a:	bf00      	nop
 800386c:	080037b1 	.word	0x080037b1
 8003870:	2000046c 	.word	0x2000046c

08003874 <_fwalk_sglue>:
 8003874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003878:	4607      	mov	r7, r0
 800387a:	4688      	mov	r8, r1
 800387c:	4614      	mov	r4, r2
 800387e:	2600      	movs	r6, #0
 8003880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003884:	f1b9 0901 	subs.w	r9, r9, #1
 8003888:	d505      	bpl.n	8003896 <_fwalk_sglue+0x22>
 800388a:	6824      	ldr	r4, [r4, #0]
 800388c:	2c00      	cmp	r4, #0
 800388e:	d1f7      	bne.n	8003880 <_fwalk_sglue+0xc>
 8003890:	4630      	mov	r0, r6
 8003892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003896:	89ab      	ldrh	r3, [r5, #12]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d907      	bls.n	80038ac <_fwalk_sglue+0x38>
 800389c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038a0:	3301      	adds	r3, #1
 80038a2:	d003      	beq.n	80038ac <_fwalk_sglue+0x38>
 80038a4:	4629      	mov	r1, r5
 80038a6:	4638      	mov	r0, r7
 80038a8:	47c0      	blx	r8
 80038aa:	4306      	orrs	r6, r0
 80038ac:	3568      	adds	r5, #104	; 0x68
 80038ae:	e7e9      	b.n	8003884 <_fwalk_sglue+0x10>

080038b0 <sniprintf>:
 80038b0:	b40c      	push	{r2, r3}
 80038b2:	b530      	push	{r4, r5, lr}
 80038b4:	4b17      	ldr	r3, [pc, #92]	; (8003914 <sniprintf+0x64>)
 80038b6:	1e0c      	subs	r4, r1, #0
 80038b8:	681d      	ldr	r5, [r3, #0]
 80038ba:	b09d      	sub	sp, #116	; 0x74
 80038bc:	da08      	bge.n	80038d0 <sniprintf+0x20>
 80038be:	238b      	movs	r3, #139	; 0x8b
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	602b      	str	r3, [r5, #0]
 80038c6:	b01d      	add	sp, #116	; 0x74
 80038c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038cc:	b002      	add	sp, #8
 80038ce:	4770      	bx	lr
 80038d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80038d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038d8:	bf0c      	ite	eq
 80038da:	4623      	moveq	r3, r4
 80038dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038e0:	9304      	str	r3, [sp, #16]
 80038e2:	9307      	str	r3, [sp, #28]
 80038e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038e8:	9002      	str	r0, [sp, #8]
 80038ea:	9006      	str	r0, [sp, #24]
 80038ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038f0:	4628      	mov	r0, r5
 80038f2:	ab21      	add	r3, sp, #132	; 0x84
 80038f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80038f6:	a902      	add	r1, sp, #8
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	f001 fc4b 	bl	8005194 <_svfiprintf_r>
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	bfbc      	itt	lt
 8003902:	238b      	movlt	r3, #139	; 0x8b
 8003904:	602b      	strlt	r3, [r5, #0]
 8003906:	2c00      	cmp	r4, #0
 8003908:	d0dd      	beq.n	80038c6 <sniprintf+0x16>
 800390a:	2200      	movs	r2, #0
 800390c:	9b02      	ldr	r3, [sp, #8]
 800390e:	701a      	strb	r2, [r3, #0]
 8003910:	e7d9      	b.n	80038c6 <sniprintf+0x16>
 8003912:	bf00      	nop
 8003914:	20000064 	.word	0x20000064

08003918 <siprintf>:
 8003918:	b40e      	push	{r1, r2, r3}
 800391a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800391e:	b500      	push	{lr}
 8003920:	b09c      	sub	sp, #112	; 0x70
 8003922:	ab1d      	add	r3, sp, #116	; 0x74
 8003924:	9002      	str	r0, [sp, #8]
 8003926:	9006      	str	r0, [sp, #24]
 8003928:	9107      	str	r1, [sp, #28]
 800392a:	9104      	str	r1, [sp, #16]
 800392c:	4808      	ldr	r0, [pc, #32]	; (8003950 <siprintf+0x38>)
 800392e:	4909      	ldr	r1, [pc, #36]	; (8003954 <siprintf+0x3c>)
 8003930:	f853 2b04 	ldr.w	r2, [r3], #4
 8003934:	9105      	str	r1, [sp, #20]
 8003936:	6800      	ldr	r0, [r0, #0]
 8003938:	a902      	add	r1, sp, #8
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	f001 fc2a 	bl	8005194 <_svfiprintf_r>
 8003940:	2200      	movs	r2, #0
 8003942:	9b02      	ldr	r3, [sp, #8]
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	b01c      	add	sp, #112	; 0x70
 8003948:	f85d eb04 	ldr.w	lr, [sp], #4
 800394c:	b003      	add	sp, #12
 800394e:	4770      	bx	lr
 8003950:	20000064 	.word	0x20000064
 8003954:	ffff0208 	.word	0xffff0208

08003958 <__sread>:
 8003958:	b510      	push	{r4, lr}
 800395a:	460c      	mov	r4, r1
 800395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003960:	f000 f87e 	bl	8003a60 <_read_r>
 8003964:	2800      	cmp	r0, #0
 8003966:	bfab      	itete	ge
 8003968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800396a:	89a3      	ldrhlt	r3, [r4, #12]
 800396c:	181b      	addge	r3, r3, r0
 800396e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003972:	bfac      	ite	ge
 8003974:	6563      	strge	r3, [r4, #84]	; 0x54
 8003976:	81a3      	strhlt	r3, [r4, #12]
 8003978:	bd10      	pop	{r4, pc}

0800397a <__swrite>:
 800397a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800397e:	461f      	mov	r7, r3
 8003980:	898b      	ldrh	r3, [r1, #12]
 8003982:	4605      	mov	r5, r0
 8003984:	05db      	lsls	r3, r3, #23
 8003986:	460c      	mov	r4, r1
 8003988:	4616      	mov	r6, r2
 800398a:	d505      	bpl.n	8003998 <__swrite+0x1e>
 800398c:	2302      	movs	r3, #2
 800398e:	2200      	movs	r2, #0
 8003990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003994:	f000 f852 	bl	8003a3c <_lseek_r>
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	4632      	mov	r2, r6
 800399c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a0:	81a3      	strh	r3, [r4, #12]
 80039a2:	4628      	mov	r0, r5
 80039a4:	463b      	mov	r3, r7
 80039a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ae:	f000 b869 	b.w	8003a84 <_write_r>

080039b2 <__sseek>:
 80039b2:	b510      	push	{r4, lr}
 80039b4:	460c      	mov	r4, r1
 80039b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ba:	f000 f83f 	bl	8003a3c <_lseek_r>
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	bf15      	itete	ne
 80039c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80039c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039ce:	81a3      	strheq	r3, [r4, #12]
 80039d0:	bf18      	it	ne
 80039d2:	81a3      	strhne	r3, [r4, #12]
 80039d4:	bd10      	pop	{r4, pc}

080039d6 <__sclose>:
 80039d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039da:	f000 b81f 	b.w	8003a1c <_close_r>

080039de <memset>:
 80039de:	4603      	mov	r3, r0
 80039e0:	4402      	add	r2, r0
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d100      	bne.n	80039e8 <memset+0xa>
 80039e6:	4770      	bx	lr
 80039e8:	f803 1b01 	strb.w	r1, [r3], #1
 80039ec:	e7f9      	b.n	80039e2 <memset+0x4>

080039ee <strncmp>:
 80039ee:	b510      	push	{r4, lr}
 80039f0:	b16a      	cbz	r2, 8003a0e <strncmp+0x20>
 80039f2:	3901      	subs	r1, #1
 80039f4:	1884      	adds	r4, r0, r2
 80039f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d103      	bne.n	8003a0a <strncmp+0x1c>
 8003a02:	42a0      	cmp	r0, r4
 8003a04:	d001      	beq.n	8003a0a <strncmp+0x1c>
 8003a06:	2a00      	cmp	r2, #0
 8003a08:	d1f5      	bne.n	80039f6 <strncmp+0x8>
 8003a0a:	1ad0      	subs	r0, r2, r3
 8003a0c:	bd10      	pop	{r4, pc}
 8003a0e:	4610      	mov	r0, r2
 8003a10:	e7fc      	b.n	8003a0c <strncmp+0x1e>
	...

08003a14 <_localeconv_r>:
 8003a14:	4800      	ldr	r0, [pc, #0]	; (8003a18 <_localeconv_r+0x4>)
 8003a16:	4770      	bx	lr
 8003a18:	20000158 	.word	0x20000158

08003a1c <_close_r>:
 8003a1c:	b538      	push	{r3, r4, r5, lr}
 8003a1e:	2300      	movs	r3, #0
 8003a20:	4d05      	ldr	r5, [pc, #20]	; (8003a38 <_close_r+0x1c>)
 8003a22:	4604      	mov	r4, r0
 8003a24:	4608      	mov	r0, r1
 8003a26:	602b      	str	r3, [r5, #0]
 8003a28:	f7fd fc0c 	bl	8001244 <_close>
 8003a2c:	1c43      	adds	r3, r0, #1
 8003a2e:	d102      	bne.n	8003a36 <_close_r+0x1a>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	b103      	cbz	r3, 8003a36 <_close_r+0x1a>
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
 8003a38:	20000470 	.word	0x20000470

08003a3c <_lseek_r>:
 8003a3c:	b538      	push	{r3, r4, r5, lr}
 8003a3e:	4604      	mov	r4, r0
 8003a40:	4608      	mov	r0, r1
 8003a42:	4611      	mov	r1, r2
 8003a44:	2200      	movs	r2, #0
 8003a46:	4d05      	ldr	r5, [pc, #20]	; (8003a5c <_lseek_r+0x20>)
 8003a48:	602a      	str	r2, [r5, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f7fd fc04 	bl	8001258 <_lseek>
 8003a50:	1c43      	adds	r3, r0, #1
 8003a52:	d102      	bne.n	8003a5a <_lseek_r+0x1e>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	b103      	cbz	r3, 8003a5a <_lseek_r+0x1e>
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	bd38      	pop	{r3, r4, r5, pc}
 8003a5c:	20000470 	.word	0x20000470

08003a60 <_read_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4604      	mov	r4, r0
 8003a64:	4608      	mov	r0, r1
 8003a66:	4611      	mov	r1, r2
 8003a68:	2200      	movs	r2, #0
 8003a6a:	4d05      	ldr	r5, [pc, #20]	; (8003a80 <_read_r+0x20>)
 8003a6c:	602a      	str	r2, [r5, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f7fd fbcc 	bl	800120c <_read>
 8003a74:	1c43      	adds	r3, r0, #1
 8003a76:	d102      	bne.n	8003a7e <_read_r+0x1e>
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	b103      	cbz	r3, 8003a7e <_read_r+0x1e>
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	bd38      	pop	{r3, r4, r5, pc}
 8003a80:	20000470 	.word	0x20000470

08003a84 <_write_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4604      	mov	r4, r0
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	4d05      	ldr	r5, [pc, #20]	; (8003aa4 <_write_r+0x20>)
 8003a90:	602a      	str	r2, [r5, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f7fd fbc8 	bl	8001228 <_write>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_write_r+0x1e>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_write_r+0x1e>
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	20000470 	.word	0x20000470

08003aa8 <__errno>:
 8003aa8:	4b01      	ldr	r3, [pc, #4]	; (8003ab0 <__errno+0x8>)
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000064 	.word	0x20000064

08003ab4 <__libc_init_array>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	2600      	movs	r6, #0
 8003ab8:	4d0c      	ldr	r5, [pc, #48]	; (8003aec <__libc_init_array+0x38>)
 8003aba:	4c0d      	ldr	r4, [pc, #52]	; (8003af0 <__libc_init_array+0x3c>)
 8003abc:	1b64      	subs	r4, r4, r5
 8003abe:	10a4      	asrs	r4, r4, #2
 8003ac0:	42a6      	cmp	r6, r4
 8003ac2:	d109      	bne.n	8003ad8 <__libc_init_array+0x24>
 8003ac4:	f002 f886 	bl	8005bd4 <_init>
 8003ac8:	2600      	movs	r6, #0
 8003aca:	4d0a      	ldr	r5, [pc, #40]	; (8003af4 <__libc_init_array+0x40>)
 8003acc:	4c0a      	ldr	r4, [pc, #40]	; (8003af8 <__libc_init_array+0x44>)
 8003ace:	1b64      	subs	r4, r4, r5
 8003ad0:	10a4      	asrs	r4, r4, #2
 8003ad2:	42a6      	cmp	r6, r4
 8003ad4:	d105      	bne.n	8003ae2 <__libc_init_array+0x2e>
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003adc:	4798      	blx	r3
 8003ade:	3601      	adds	r6, #1
 8003ae0:	e7ee      	b.n	8003ac0 <__libc_init_array+0xc>
 8003ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae6:	4798      	blx	r3
 8003ae8:	3601      	adds	r6, #1
 8003aea:	e7f2      	b.n	8003ad2 <__libc_init_array+0x1e>
 8003aec:	08005fdc 	.word	0x08005fdc
 8003af0:	08005fdc 	.word	0x08005fdc
 8003af4:	08005fdc 	.word	0x08005fdc
 8003af8:	08005fe0 	.word	0x08005fe0

08003afc <__retarget_lock_acquire_recursive>:
 8003afc:	4770      	bx	lr

08003afe <__retarget_lock_release_recursive>:
 8003afe:	4770      	bx	lr

08003b00 <memchr>:
 8003b00:	4603      	mov	r3, r0
 8003b02:	b510      	push	{r4, lr}
 8003b04:	b2c9      	uxtb	r1, r1
 8003b06:	4402      	add	r2, r0
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	d101      	bne.n	8003b12 <memchr+0x12>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	e003      	b.n	8003b1a <memchr+0x1a>
 8003b12:	7804      	ldrb	r4, [r0, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	428c      	cmp	r4, r1
 8003b18:	d1f6      	bne.n	8003b08 <memchr+0x8>
 8003b1a:	bd10      	pop	{r4, pc}

08003b1c <quorem>:
 8003b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b20:	6903      	ldr	r3, [r0, #16]
 8003b22:	690c      	ldr	r4, [r1, #16]
 8003b24:	4607      	mov	r7, r0
 8003b26:	42a3      	cmp	r3, r4
 8003b28:	db7f      	blt.n	8003c2a <quorem+0x10e>
 8003b2a:	3c01      	subs	r4, #1
 8003b2c:	f100 0514 	add.w	r5, r0, #20
 8003b30:	f101 0814 	add.w	r8, r1, #20
 8003b34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b42:	3301      	adds	r3, #1
 8003b44:	429a      	cmp	r2, r3
 8003b46:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003b4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b52:	d331      	bcc.n	8003bb8 <quorem+0x9c>
 8003b54:	f04f 0e00 	mov.w	lr, #0
 8003b58:	4640      	mov	r0, r8
 8003b5a:	46ac      	mov	ip, r5
 8003b5c:	46f2      	mov	sl, lr
 8003b5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003b62:	b293      	uxth	r3, r2
 8003b64:	fb06 e303 	mla	r3, r6, r3, lr
 8003b68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b6c:	0c1a      	lsrs	r2, r3, #16
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	fb06 220e 	mla	r2, r6, lr, r2
 8003b74:	ebaa 0303 	sub.w	r3, sl, r3
 8003b78:	f8dc a000 	ldr.w	sl, [ip]
 8003b7c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b80:	fa1f fa8a 	uxth.w	sl, sl
 8003b84:	4453      	add	r3, sl
 8003b86:	f8dc a000 	ldr.w	sl, [ip]
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003b90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b9a:	4581      	cmp	r9, r0
 8003b9c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003ba0:	f84c 3b04 	str.w	r3, [ip], #4
 8003ba4:	d2db      	bcs.n	8003b5e <quorem+0x42>
 8003ba6:	f855 300b 	ldr.w	r3, [r5, fp]
 8003baa:	b92b      	cbnz	r3, 8003bb8 <quorem+0x9c>
 8003bac:	9b01      	ldr	r3, [sp, #4]
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	429d      	cmp	r5, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	d32d      	bcc.n	8003c12 <quorem+0xf6>
 8003bb6:	613c      	str	r4, [r7, #16]
 8003bb8:	4638      	mov	r0, r7
 8003bba:	f001 f993 	bl	8004ee4 <__mcmp>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	db23      	blt.n	8003c0a <quorem+0xee>
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	3601      	adds	r6, #1
 8003bc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8003bcc:	f8d1 c000 	ldr.w	ip, [r1]
 8003bd0:	b293      	uxth	r3, r2
 8003bd2:	1ac3      	subs	r3, r0, r3
 8003bd4:	0c12      	lsrs	r2, r2, #16
 8003bd6:	fa1f f08c 	uxth.w	r0, ip
 8003bda:	4403      	add	r3, r0
 8003bdc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003be0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bea:	45c1      	cmp	r9, r8
 8003bec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003bf0:	f841 3b04 	str.w	r3, [r1], #4
 8003bf4:	d2e8      	bcs.n	8003bc8 <quorem+0xac>
 8003bf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bfe:	b922      	cbnz	r2, 8003c0a <quorem+0xee>
 8003c00:	3b04      	subs	r3, #4
 8003c02:	429d      	cmp	r5, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	d30a      	bcc.n	8003c1e <quorem+0x102>
 8003c08:	613c      	str	r4, [r7, #16]
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	b003      	add	sp, #12
 8003c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	3b04      	subs	r3, #4
 8003c16:	2a00      	cmp	r2, #0
 8003c18:	d1cd      	bne.n	8003bb6 <quorem+0x9a>
 8003c1a:	3c01      	subs	r4, #1
 8003c1c:	e7c8      	b.n	8003bb0 <quorem+0x94>
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	3b04      	subs	r3, #4
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	d1f0      	bne.n	8003c08 <quorem+0xec>
 8003c26:	3c01      	subs	r4, #1
 8003c28:	e7eb      	b.n	8003c02 <quorem+0xe6>
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	e7ee      	b.n	8003c0c <quorem+0xf0>
	...

08003c30 <_dtoa_r>:
 8003c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c34:	4616      	mov	r6, r2
 8003c36:	461f      	mov	r7, r3
 8003c38:	69c4      	ldr	r4, [r0, #28]
 8003c3a:	b099      	sub	sp, #100	; 0x64
 8003c3c:	4605      	mov	r5, r0
 8003c3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003c42:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003c46:	b974      	cbnz	r4, 8003c66 <_dtoa_r+0x36>
 8003c48:	2010      	movs	r0, #16
 8003c4a:	f000 fe1d 	bl	8004888 <malloc>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	61e8      	str	r0, [r5, #28]
 8003c52:	b920      	cbnz	r0, 8003c5e <_dtoa_r+0x2e>
 8003c54:	21ef      	movs	r1, #239	; 0xef
 8003c56:	4bac      	ldr	r3, [pc, #688]	; (8003f08 <_dtoa_r+0x2d8>)
 8003c58:	48ac      	ldr	r0, [pc, #688]	; (8003f0c <_dtoa_r+0x2dc>)
 8003c5a:	f001 fc7b 	bl	8005554 <__assert_func>
 8003c5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003c62:	6004      	str	r4, [r0, #0]
 8003c64:	60c4      	str	r4, [r0, #12]
 8003c66:	69eb      	ldr	r3, [r5, #28]
 8003c68:	6819      	ldr	r1, [r3, #0]
 8003c6a:	b151      	cbz	r1, 8003c82 <_dtoa_r+0x52>
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	2301      	movs	r3, #1
 8003c70:	4093      	lsls	r3, r2
 8003c72:	604a      	str	r2, [r1, #4]
 8003c74:	608b      	str	r3, [r1, #8]
 8003c76:	4628      	mov	r0, r5
 8003c78:	f000 fefa 	bl	8004a70 <_Bfree>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	69eb      	ldr	r3, [r5, #28]
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	1e3b      	subs	r3, r7, #0
 8003c84:	bfaf      	iteee	ge
 8003c86:	2300      	movge	r3, #0
 8003c88:	2201      	movlt	r2, #1
 8003c8a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003c8e:	9305      	strlt	r3, [sp, #20]
 8003c90:	bfa8      	it	ge
 8003c92:	f8c8 3000 	strge.w	r3, [r8]
 8003c96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003c9a:	4b9d      	ldr	r3, [pc, #628]	; (8003f10 <_dtoa_r+0x2e0>)
 8003c9c:	bfb8      	it	lt
 8003c9e:	f8c8 2000 	strlt.w	r2, [r8]
 8003ca2:	ea33 0309 	bics.w	r3, r3, r9
 8003ca6:	d119      	bne.n	8003cdc <_dtoa_r+0xac>
 8003ca8:	f242 730f 	movw	r3, #9999	; 0x270f
 8003cac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003cb4:	4333      	orrs	r3, r6
 8003cb6:	f000 8589 	beq.w	80047cc <_dtoa_r+0xb9c>
 8003cba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003cbc:	b953      	cbnz	r3, 8003cd4 <_dtoa_r+0xa4>
 8003cbe:	4b95      	ldr	r3, [pc, #596]	; (8003f14 <_dtoa_r+0x2e4>)
 8003cc0:	e023      	b.n	8003d0a <_dtoa_r+0xda>
 8003cc2:	4b95      	ldr	r3, [pc, #596]	; (8003f18 <_dtoa_r+0x2e8>)
 8003cc4:	9303      	str	r3, [sp, #12]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	9803      	ldr	r0, [sp, #12]
 8003cce:	b019      	add	sp, #100	; 0x64
 8003cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd4:	4b8f      	ldr	r3, [pc, #572]	; (8003f14 <_dtoa_r+0x2e4>)
 8003cd6:	9303      	str	r3, [sp, #12]
 8003cd8:	3303      	adds	r3, #3
 8003cda:	e7f5      	b.n	8003cc8 <_dtoa_r+0x98>
 8003cdc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003ce0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003ce4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2300      	movs	r3, #0
 8003cec:	f7fc fe66 	bl	80009bc <__aeabi_dcmpeq>
 8003cf0:	4680      	mov	r8, r0
 8003cf2:	b160      	cbz	r0, 8003d0e <_dtoa_r+0xde>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8562 	beq.w	80047c6 <_dtoa_r+0xb96>
 8003d02:	4b86      	ldr	r3, [pc, #536]	; (8003f1c <_dtoa_r+0x2ec>)
 8003d04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	9303      	str	r3, [sp, #12]
 8003d0c:	e7de      	b.n	8003ccc <_dtoa_r+0x9c>
 8003d0e:	ab16      	add	r3, sp, #88	; 0x58
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	ab17      	add	r3, sp, #92	; 0x5c
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	4628      	mov	r0, r5
 8003d18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003d1c:	f001 f98a 	bl	8005034 <__d2b>
 8003d20:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003d24:	4682      	mov	sl, r0
 8003d26:	2c00      	cmp	r4, #0
 8003d28:	d07e      	beq.n	8003e28 <_dtoa_r+0x1f8>
 8003d2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d30:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d38:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003d3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d40:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003d44:	4619      	mov	r1, r3
 8003d46:	2200      	movs	r2, #0
 8003d48:	4b75      	ldr	r3, [pc, #468]	; (8003f20 <_dtoa_r+0x2f0>)
 8003d4a:	f7fc fa17 	bl	800017c <__aeabi_dsub>
 8003d4e:	a368      	add	r3, pc, #416	; (adr r3, 8003ef0 <_dtoa_r+0x2c0>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fbca 	bl	80004ec <__aeabi_dmul>
 8003d58:	a367      	add	r3, pc, #412	; (adr r3, 8003ef8 <_dtoa_r+0x2c8>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f7fc fa0f 	bl	8000180 <__adddf3>
 8003d62:	4606      	mov	r6, r0
 8003d64:	4620      	mov	r0, r4
 8003d66:	460f      	mov	r7, r1
 8003d68:	f7fc fb56 	bl	8000418 <__aeabi_i2d>
 8003d6c:	a364      	add	r3, pc, #400	; (adr r3, 8003f00 <_dtoa_r+0x2d0>)
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f7fc fbbb 	bl	80004ec <__aeabi_dmul>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	4639      	mov	r1, r7
 8003d7e:	f7fc f9ff 	bl	8000180 <__adddf3>
 8003d82:	4606      	mov	r6, r0
 8003d84:	460f      	mov	r7, r1
 8003d86:	f7fc fe61 	bl	8000a4c <__aeabi_d2iz>
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	4683      	mov	fp, r0
 8003d8e:	2300      	movs	r3, #0
 8003d90:	4630      	mov	r0, r6
 8003d92:	4639      	mov	r1, r7
 8003d94:	f7fc fe1c 	bl	80009d0 <__aeabi_dcmplt>
 8003d98:	b148      	cbz	r0, 8003dae <_dtoa_r+0x17e>
 8003d9a:	4658      	mov	r0, fp
 8003d9c:	f7fc fb3c 	bl	8000418 <__aeabi_i2d>
 8003da0:	4632      	mov	r2, r6
 8003da2:	463b      	mov	r3, r7
 8003da4:	f7fc fe0a 	bl	80009bc <__aeabi_dcmpeq>
 8003da8:	b908      	cbnz	r0, 8003dae <_dtoa_r+0x17e>
 8003daa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003dae:	f1bb 0f16 	cmp.w	fp, #22
 8003db2:	d857      	bhi.n	8003e64 <_dtoa_r+0x234>
 8003db4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003db8:	4b5a      	ldr	r3, [pc, #360]	; (8003f24 <_dtoa_r+0x2f4>)
 8003dba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f7fc fe05 	bl	80009d0 <__aeabi_dcmplt>
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	d04e      	beq.n	8003e68 <_dtoa_r+0x238>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003dd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8003dd2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003dd4:	1b1b      	subs	r3, r3, r4
 8003dd6:	1e5a      	subs	r2, r3, #1
 8003dd8:	bf46      	itte	mi
 8003dda:	f1c3 0901 	rsbmi	r9, r3, #1
 8003dde:	2300      	movmi	r3, #0
 8003de0:	f04f 0900 	movpl.w	r9, #0
 8003de4:	9209      	str	r2, [sp, #36]	; 0x24
 8003de6:	bf48      	it	mi
 8003de8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003dea:	f1bb 0f00 	cmp.w	fp, #0
 8003dee:	db3d      	blt.n	8003e6c <_dtoa_r+0x23c>
 8003df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003df2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003df6:	445b      	add	r3, fp
 8003df8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	930a      	str	r3, [sp, #40]	; 0x28
 8003dfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e00:	2b09      	cmp	r3, #9
 8003e02:	d867      	bhi.n	8003ed4 <_dtoa_r+0x2a4>
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	bfc4      	itt	gt
 8003e08:	3b04      	subgt	r3, #4
 8003e0a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003e0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e0e:	bfc8      	it	gt
 8003e10:	2400      	movgt	r4, #0
 8003e12:	f1a3 0302 	sub.w	r3, r3, #2
 8003e16:	bfd8      	it	le
 8003e18:	2401      	movle	r4, #1
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	f200 8086 	bhi.w	8003f2c <_dtoa_r+0x2fc>
 8003e20:	e8df f003 	tbb	[pc, r3]
 8003e24:	5637392c 	.word	0x5637392c
 8003e28:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003e2c:	441c      	add	r4, r3
 8003e2e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	bfc1      	itttt	gt
 8003e36:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003e3a:	fa09 f903 	lslgt.w	r9, r9, r3
 8003e3e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8003e42:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003e46:	bfd6      	itet	le
 8003e48:	f1c3 0320 	rsble	r3, r3, #32
 8003e4c:	ea49 0003 	orrgt.w	r0, r9, r3
 8003e50:	fa06 f003 	lslle.w	r0, r6, r3
 8003e54:	f7fc fad0 	bl	80003f8 <__aeabi_ui2d>
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003e5e:	3c01      	subs	r4, #1
 8003e60:	9213      	str	r2, [sp, #76]	; 0x4c
 8003e62:	e76f      	b.n	8003d44 <_dtoa_r+0x114>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e7b3      	b.n	8003dd0 <_dtoa_r+0x1a0>
 8003e68:	900f      	str	r0, [sp, #60]	; 0x3c
 8003e6a:	e7b2      	b.n	8003dd2 <_dtoa_r+0x1a2>
 8003e6c:	f1cb 0300 	rsb	r3, fp, #0
 8003e70:	930a      	str	r3, [sp, #40]	; 0x28
 8003e72:	2300      	movs	r3, #0
 8003e74:	eba9 090b 	sub.w	r9, r9, fp
 8003e78:	930e      	str	r3, [sp, #56]	; 0x38
 8003e7a:	e7c0      	b.n	8003dfe <_dtoa_r+0x1ce>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	dc55      	bgt.n	8003f32 <_dtoa_r+0x302>
 8003e86:	2301      	movs	r3, #1
 8003e88:	461a      	mov	r2, r3
 8003e8a:	9306      	str	r3, [sp, #24]
 8003e8c:	9308      	str	r3, [sp, #32]
 8003e8e:	9223      	str	r2, [sp, #140]	; 0x8c
 8003e90:	e00b      	b.n	8003eaa <_dtoa_r+0x27a>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e7f3      	b.n	8003e7e <_dtoa_r+0x24e>
 8003e96:	2300      	movs	r3, #0
 8003e98:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e9c:	445b      	add	r3, fp
 8003e9e:	9306      	str	r3, [sp, #24]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	9308      	str	r3, [sp, #32]
 8003ea6:	bfb8      	it	lt
 8003ea8:	2301      	movlt	r3, #1
 8003eaa:	2100      	movs	r1, #0
 8003eac:	2204      	movs	r2, #4
 8003eae:	69e8      	ldr	r0, [r5, #28]
 8003eb0:	f102 0614 	add.w	r6, r2, #20
 8003eb4:	429e      	cmp	r6, r3
 8003eb6:	d940      	bls.n	8003f3a <_dtoa_r+0x30a>
 8003eb8:	6041      	str	r1, [r0, #4]
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f000 fd98 	bl	80049f0 <_Balloc>
 8003ec0:	9003      	str	r0, [sp, #12]
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	d13c      	bne.n	8003f40 <_dtoa_r+0x310>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	f240 11af 	movw	r1, #431	; 0x1af
 8003ecc:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <_dtoa_r+0x2f8>)
 8003ece:	e6c3      	b.n	8003c58 <_dtoa_r+0x28>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e7e1      	b.n	8003e98 <_dtoa_r+0x268>
 8003ed4:	2401      	movs	r4, #1
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	940b      	str	r4, [sp, #44]	; 0x2c
 8003eda:	9322      	str	r3, [sp, #136]	; 0x88
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	9306      	str	r3, [sp, #24]
 8003ee4:	9308      	str	r3, [sp, #32]
 8003ee6:	2312      	movs	r3, #18
 8003ee8:	e7d1      	b.n	8003e8e <_dtoa_r+0x25e>
 8003eea:	bf00      	nop
 8003eec:	f3af 8000 	nop.w
 8003ef0:	636f4361 	.word	0x636f4361
 8003ef4:	3fd287a7 	.word	0x3fd287a7
 8003ef8:	8b60c8b3 	.word	0x8b60c8b3
 8003efc:	3fc68a28 	.word	0x3fc68a28
 8003f00:	509f79fb 	.word	0x509f79fb
 8003f04:	3fd34413 	.word	0x3fd34413
 8003f08:	08005caf 	.word	0x08005caf
 8003f0c:	08005cc6 	.word	0x08005cc6
 8003f10:	7ff00000 	.word	0x7ff00000
 8003f14:	08005cab 	.word	0x08005cab
 8003f18:	08005ca2 	.word	0x08005ca2
 8003f1c:	08005c7f 	.word	0x08005c7f
 8003f20:	3ff80000 	.word	0x3ff80000
 8003f24:	08005db0 	.word	0x08005db0
 8003f28:	08005d1e 	.word	0x08005d1e
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f30:	e7d4      	b.n	8003edc <_dtoa_r+0x2ac>
 8003f32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f34:	9306      	str	r3, [sp, #24]
 8003f36:	9308      	str	r3, [sp, #32]
 8003f38:	e7b7      	b.n	8003eaa <_dtoa_r+0x27a>
 8003f3a:	3101      	adds	r1, #1
 8003f3c:	0052      	lsls	r2, r2, #1
 8003f3e:	e7b7      	b.n	8003eb0 <_dtoa_r+0x280>
 8003f40:	69eb      	ldr	r3, [r5, #28]
 8003f42:	9a03      	ldr	r2, [sp, #12]
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	9b08      	ldr	r3, [sp, #32]
 8003f48:	2b0e      	cmp	r3, #14
 8003f4a:	f200 80a8 	bhi.w	800409e <_dtoa_r+0x46e>
 8003f4e:	2c00      	cmp	r4, #0
 8003f50:	f000 80a5 	beq.w	800409e <_dtoa_r+0x46e>
 8003f54:	f1bb 0f00 	cmp.w	fp, #0
 8003f58:	dd34      	ble.n	8003fc4 <_dtoa_r+0x394>
 8003f5a:	4b9a      	ldr	r3, [pc, #616]	; (80041c4 <_dtoa_r+0x594>)
 8003f5c:	f00b 020f 	and.w	r2, fp, #15
 8003f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003f68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f6c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003f70:	ea4f 142b 	mov.w	r4, fp, asr #4
 8003f74:	d016      	beq.n	8003fa4 <_dtoa_r+0x374>
 8003f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f7a:	4b93      	ldr	r3, [pc, #588]	; (80041c8 <_dtoa_r+0x598>)
 8003f7c:	2703      	movs	r7, #3
 8003f7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f82:	f7fc fbdd 	bl	8000740 <__aeabi_ddiv>
 8003f86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f8a:	f004 040f 	and.w	r4, r4, #15
 8003f8e:	4e8e      	ldr	r6, [pc, #568]	; (80041c8 <_dtoa_r+0x598>)
 8003f90:	b954      	cbnz	r4, 8003fa8 <_dtoa_r+0x378>
 8003f92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f9a:	f7fc fbd1 	bl	8000740 <__aeabi_ddiv>
 8003f9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fa2:	e029      	b.n	8003ff8 <_dtoa_r+0x3c8>
 8003fa4:	2702      	movs	r7, #2
 8003fa6:	e7f2      	b.n	8003f8e <_dtoa_r+0x35e>
 8003fa8:	07e1      	lsls	r1, r4, #31
 8003faa:	d508      	bpl.n	8003fbe <_dtoa_r+0x38e>
 8003fac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003fb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003fb4:	f7fc fa9a 	bl	80004ec <__aeabi_dmul>
 8003fb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003fbc:	3701      	adds	r7, #1
 8003fbe:	1064      	asrs	r4, r4, #1
 8003fc0:	3608      	adds	r6, #8
 8003fc2:	e7e5      	b.n	8003f90 <_dtoa_r+0x360>
 8003fc4:	f000 80a5 	beq.w	8004112 <_dtoa_r+0x4e2>
 8003fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fcc:	f1cb 0400 	rsb	r4, fp, #0
 8003fd0:	4b7c      	ldr	r3, [pc, #496]	; (80041c4 <_dtoa_r+0x594>)
 8003fd2:	f004 020f 	and.w	r2, r4, #15
 8003fd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f7fc fa85 	bl	80004ec <__aeabi_dmul>
 8003fe2:	2702      	movs	r7, #2
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fea:	4e77      	ldr	r6, [pc, #476]	; (80041c8 <_dtoa_r+0x598>)
 8003fec:	1124      	asrs	r4, r4, #4
 8003fee:	2c00      	cmp	r4, #0
 8003ff0:	f040 8084 	bne.w	80040fc <_dtoa_r+0x4cc>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1d2      	bne.n	8003f9e <_dtoa_r+0x36e>
 8003ff8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003ffc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004000:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8087 	beq.w	8004116 <_dtoa_r+0x4e6>
 8004008:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800400c:	2200      	movs	r2, #0
 800400e:	4b6f      	ldr	r3, [pc, #444]	; (80041cc <_dtoa_r+0x59c>)
 8004010:	f7fc fcde 	bl	80009d0 <__aeabi_dcmplt>
 8004014:	2800      	cmp	r0, #0
 8004016:	d07e      	beq.n	8004116 <_dtoa_r+0x4e6>
 8004018:	9b08      	ldr	r3, [sp, #32]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d07b      	beq.n	8004116 <_dtoa_r+0x4e6>
 800401e:	9b06      	ldr	r3, [sp, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	dd38      	ble.n	8004096 <_dtoa_r+0x466>
 8004024:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004028:	2200      	movs	r2, #0
 800402a:	4b69      	ldr	r3, [pc, #420]	; (80041d0 <_dtoa_r+0x5a0>)
 800402c:	f7fc fa5e 	bl	80004ec <__aeabi_dmul>
 8004030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004034:	9c06      	ldr	r4, [sp, #24]
 8004036:	f10b 38ff 	add.w	r8, fp, #4294967295
 800403a:	3701      	adds	r7, #1
 800403c:	4638      	mov	r0, r7
 800403e:	f7fc f9eb 	bl	8000418 <__aeabi_i2d>
 8004042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004046:	f7fc fa51 	bl	80004ec <__aeabi_dmul>
 800404a:	2200      	movs	r2, #0
 800404c:	4b61      	ldr	r3, [pc, #388]	; (80041d4 <_dtoa_r+0x5a4>)
 800404e:	f7fc f897 	bl	8000180 <__adddf3>
 8004052:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004056:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800405a:	9611      	str	r6, [sp, #68]	; 0x44
 800405c:	2c00      	cmp	r4, #0
 800405e:	d15d      	bne.n	800411c <_dtoa_r+0x4ec>
 8004060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004064:	2200      	movs	r2, #0
 8004066:	4b5c      	ldr	r3, [pc, #368]	; (80041d8 <_dtoa_r+0x5a8>)
 8004068:	f7fc f888 	bl	800017c <__aeabi_dsub>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004074:	4633      	mov	r3, r6
 8004076:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004078:	f7fc fcc8 	bl	8000a0c <__aeabi_dcmpgt>
 800407c:	2800      	cmp	r0, #0
 800407e:	f040 8295 	bne.w	80045ac <_dtoa_r+0x97c>
 8004082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004086:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004088:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800408c:	f7fc fca0 	bl	80009d0 <__aeabi_dcmplt>
 8004090:	2800      	cmp	r0, #0
 8004092:	f040 8289 	bne.w	80045a8 <_dtoa_r+0x978>
 8004096:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800409a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800409e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f2c0 8151 	blt.w	8004348 <_dtoa_r+0x718>
 80040a6:	f1bb 0f0e 	cmp.w	fp, #14
 80040aa:	f300 814d 	bgt.w	8004348 <_dtoa_r+0x718>
 80040ae:	4b45      	ldr	r3, [pc, #276]	; (80041c4 <_dtoa_r+0x594>)
 80040b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80040b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80040bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f280 80da 	bge.w	8004278 <_dtoa_r+0x648>
 80040c4:	9b08      	ldr	r3, [sp, #32]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f300 80d6 	bgt.w	8004278 <_dtoa_r+0x648>
 80040cc:	f040 826b 	bne.w	80045a6 <_dtoa_r+0x976>
 80040d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040d4:	2200      	movs	r2, #0
 80040d6:	4b40      	ldr	r3, [pc, #256]	; (80041d8 <_dtoa_r+0x5a8>)
 80040d8:	f7fc fa08 	bl	80004ec <__aeabi_dmul>
 80040dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040e0:	f7fc fc8a 	bl	80009f8 <__aeabi_dcmpge>
 80040e4:	9c08      	ldr	r4, [sp, #32]
 80040e6:	4626      	mov	r6, r4
 80040e8:	2800      	cmp	r0, #0
 80040ea:	f040 8241 	bne.w	8004570 <_dtoa_r+0x940>
 80040ee:	2331      	movs	r3, #49	; 0x31
 80040f0:	9f03      	ldr	r7, [sp, #12]
 80040f2:	f10b 0b01 	add.w	fp, fp, #1
 80040f6:	f807 3b01 	strb.w	r3, [r7], #1
 80040fa:	e23d      	b.n	8004578 <_dtoa_r+0x948>
 80040fc:	07e2      	lsls	r2, r4, #31
 80040fe:	d505      	bpl.n	800410c <_dtoa_r+0x4dc>
 8004100:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004104:	f7fc f9f2 	bl	80004ec <__aeabi_dmul>
 8004108:	2301      	movs	r3, #1
 800410a:	3701      	adds	r7, #1
 800410c:	1064      	asrs	r4, r4, #1
 800410e:	3608      	adds	r6, #8
 8004110:	e76d      	b.n	8003fee <_dtoa_r+0x3be>
 8004112:	2702      	movs	r7, #2
 8004114:	e770      	b.n	8003ff8 <_dtoa_r+0x3c8>
 8004116:	46d8      	mov	r8, fp
 8004118:	9c08      	ldr	r4, [sp, #32]
 800411a:	e78f      	b.n	800403c <_dtoa_r+0x40c>
 800411c:	9903      	ldr	r1, [sp, #12]
 800411e:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <_dtoa_r+0x594>)
 8004120:	4421      	add	r1, r4
 8004122:	9112      	str	r1, [sp, #72]	; 0x48
 8004124:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004126:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800412a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800412e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004132:	2900      	cmp	r1, #0
 8004134:	d054      	beq.n	80041e0 <_dtoa_r+0x5b0>
 8004136:	2000      	movs	r0, #0
 8004138:	4928      	ldr	r1, [pc, #160]	; (80041dc <_dtoa_r+0x5ac>)
 800413a:	f7fc fb01 	bl	8000740 <__aeabi_ddiv>
 800413e:	463b      	mov	r3, r7
 8004140:	4632      	mov	r2, r6
 8004142:	f7fc f81b 	bl	800017c <__aeabi_dsub>
 8004146:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800414a:	9f03      	ldr	r7, [sp, #12]
 800414c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004150:	f7fc fc7c 	bl	8000a4c <__aeabi_d2iz>
 8004154:	4604      	mov	r4, r0
 8004156:	f7fc f95f 	bl	8000418 <__aeabi_i2d>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004162:	f7fc f80b 	bl	800017c <__aeabi_dsub>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	3430      	adds	r4, #48	; 0x30
 800416c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004170:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004174:	f807 4b01 	strb.w	r4, [r7], #1
 8004178:	f7fc fc2a 	bl	80009d0 <__aeabi_dcmplt>
 800417c:	2800      	cmp	r0, #0
 800417e:	d173      	bne.n	8004268 <_dtoa_r+0x638>
 8004180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004184:	2000      	movs	r0, #0
 8004186:	4911      	ldr	r1, [pc, #68]	; (80041cc <_dtoa_r+0x59c>)
 8004188:	f7fb fff8 	bl	800017c <__aeabi_dsub>
 800418c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004190:	f7fc fc1e 	bl	80009d0 <__aeabi_dcmplt>
 8004194:	2800      	cmp	r0, #0
 8004196:	f040 80b6 	bne.w	8004306 <_dtoa_r+0x6d6>
 800419a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800419c:	429f      	cmp	r7, r3
 800419e:	f43f af7a 	beq.w	8004096 <_dtoa_r+0x466>
 80041a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041a6:	2200      	movs	r2, #0
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <_dtoa_r+0x5a0>)
 80041aa:	f7fc f99f 	bl	80004ec <__aeabi_dmul>
 80041ae:	2200      	movs	r2, #0
 80041b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <_dtoa_r+0x5a0>)
 80041ba:	f7fc f997 	bl	80004ec <__aeabi_dmul>
 80041be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041c2:	e7c3      	b.n	800414c <_dtoa_r+0x51c>
 80041c4:	08005db0 	.word	0x08005db0
 80041c8:	08005d88 	.word	0x08005d88
 80041cc:	3ff00000 	.word	0x3ff00000
 80041d0:	40240000 	.word	0x40240000
 80041d4:	401c0000 	.word	0x401c0000
 80041d8:	40140000 	.word	0x40140000
 80041dc:	3fe00000 	.word	0x3fe00000
 80041e0:	4630      	mov	r0, r6
 80041e2:	4639      	mov	r1, r7
 80041e4:	f7fc f982 	bl	80004ec <__aeabi_dmul>
 80041e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041ee:	9c03      	ldr	r4, [sp, #12]
 80041f0:	9314      	str	r3, [sp, #80]	; 0x50
 80041f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041f6:	f7fc fc29 	bl	8000a4c <__aeabi_d2iz>
 80041fa:	9015      	str	r0, [sp, #84]	; 0x54
 80041fc:	f7fc f90c 	bl	8000418 <__aeabi_i2d>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004208:	f7fb ffb8 	bl	800017c <__aeabi_dsub>
 800420c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800420e:	4606      	mov	r6, r0
 8004210:	3330      	adds	r3, #48	; 0x30
 8004212:	f804 3b01 	strb.w	r3, [r4], #1
 8004216:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004218:	460f      	mov	r7, r1
 800421a:	429c      	cmp	r4, r3
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	d124      	bne.n	800426c <_dtoa_r+0x63c>
 8004222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004226:	4baf      	ldr	r3, [pc, #700]	; (80044e4 <_dtoa_r+0x8b4>)
 8004228:	f7fb ffaa 	bl	8000180 <__adddf3>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4630      	mov	r0, r6
 8004232:	4639      	mov	r1, r7
 8004234:	f7fc fbea 	bl	8000a0c <__aeabi_dcmpgt>
 8004238:	2800      	cmp	r0, #0
 800423a:	d163      	bne.n	8004304 <_dtoa_r+0x6d4>
 800423c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004240:	2000      	movs	r0, #0
 8004242:	49a8      	ldr	r1, [pc, #672]	; (80044e4 <_dtoa_r+0x8b4>)
 8004244:	f7fb ff9a 	bl	800017c <__aeabi_dsub>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4630      	mov	r0, r6
 800424e:	4639      	mov	r1, r7
 8004250:	f7fc fbbe 	bl	80009d0 <__aeabi_dcmplt>
 8004254:	2800      	cmp	r0, #0
 8004256:	f43f af1e 	beq.w	8004096 <_dtoa_r+0x466>
 800425a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800425c:	1e7b      	subs	r3, r7, #1
 800425e:	9314      	str	r3, [sp, #80]	; 0x50
 8004260:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004264:	2b30      	cmp	r3, #48	; 0x30
 8004266:	d0f8      	beq.n	800425a <_dtoa_r+0x62a>
 8004268:	46c3      	mov	fp, r8
 800426a:	e03b      	b.n	80042e4 <_dtoa_r+0x6b4>
 800426c:	4b9e      	ldr	r3, [pc, #632]	; (80044e8 <_dtoa_r+0x8b8>)
 800426e:	f7fc f93d 	bl	80004ec <__aeabi_dmul>
 8004272:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004276:	e7bc      	b.n	80041f2 <_dtoa_r+0x5c2>
 8004278:	9f03      	ldr	r7, [sp, #12]
 800427a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800427e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004282:	4640      	mov	r0, r8
 8004284:	4649      	mov	r1, r9
 8004286:	f7fc fa5b 	bl	8000740 <__aeabi_ddiv>
 800428a:	f7fc fbdf 	bl	8000a4c <__aeabi_d2iz>
 800428e:	4604      	mov	r4, r0
 8004290:	f7fc f8c2 	bl	8000418 <__aeabi_i2d>
 8004294:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004298:	f7fc f928 	bl	80004ec <__aeabi_dmul>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4640      	mov	r0, r8
 80042a2:	4649      	mov	r1, r9
 80042a4:	f7fb ff6a 	bl	800017c <__aeabi_dsub>
 80042a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80042ac:	f807 6b01 	strb.w	r6, [r7], #1
 80042b0:	9e03      	ldr	r6, [sp, #12]
 80042b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80042b6:	1bbe      	subs	r6, r7, r6
 80042b8:	45b4      	cmp	ip, r6
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	d136      	bne.n	800432e <_dtoa_r+0x6fe>
 80042c0:	f7fb ff5e 	bl	8000180 <__adddf3>
 80042c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042c8:	4680      	mov	r8, r0
 80042ca:	4689      	mov	r9, r1
 80042cc:	f7fc fb9e 	bl	8000a0c <__aeabi_dcmpgt>
 80042d0:	bb58      	cbnz	r0, 800432a <_dtoa_r+0x6fa>
 80042d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042d6:	4640      	mov	r0, r8
 80042d8:	4649      	mov	r1, r9
 80042da:	f7fc fb6f 	bl	80009bc <__aeabi_dcmpeq>
 80042de:	b108      	cbz	r0, 80042e4 <_dtoa_r+0x6b4>
 80042e0:	07e3      	lsls	r3, r4, #31
 80042e2:	d422      	bmi.n	800432a <_dtoa_r+0x6fa>
 80042e4:	4651      	mov	r1, sl
 80042e6:	4628      	mov	r0, r5
 80042e8:	f000 fbc2 	bl	8004a70 <_Bfree>
 80042ec:	2300      	movs	r3, #0
 80042ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80042f0:	703b      	strb	r3, [r7, #0]
 80042f2:	f10b 0301 	add.w	r3, fp, #1
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f43f ace6 	beq.w	8003ccc <_dtoa_r+0x9c>
 8004300:	601f      	str	r7, [r3, #0]
 8004302:	e4e3      	b.n	8003ccc <_dtoa_r+0x9c>
 8004304:	4627      	mov	r7, r4
 8004306:	463b      	mov	r3, r7
 8004308:	461f      	mov	r7, r3
 800430a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800430e:	2a39      	cmp	r2, #57	; 0x39
 8004310:	d107      	bne.n	8004322 <_dtoa_r+0x6f2>
 8004312:	9a03      	ldr	r2, [sp, #12]
 8004314:	429a      	cmp	r2, r3
 8004316:	d1f7      	bne.n	8004308 <_dtoa_r+0x6d8>
 8004318:	2230      	movs	r2, #48	; 0x30
 800431a:	9903      	ldr	r1, [sp, #12]
 800431c:	f108 0801 	add.w	r8, r8, #1
 8004320:	700a      	strb	r2, [r1, #0]
 8004322:	781a      	ldrb	r2, [r3, #0]
 8004324:	3201      	adds	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	e79e      	b.n	8004268 <_dtoa_r+0x638>
 800432a:	46d8      	mov	r8, fp
 800432c:	e7eb      	b.n	8004306 <_dtoa_r+0x6d6>
 800432e:	2200      	movs	r2, #0
 8004330:	4b6d      	ldr	r3, [pc, #436]	; (80044e8 <_dtoa_r+0x8b8>)
 8004332:	f7fc f8db 	bl	80004ec <__aeabi_dmul>
 8004336:	2200      	movs	r2, #0
 8004338:	2300      	movs	r3, #0
 800433a:	4680      	mov	r8, r0
 800433c:	4689      	mov	r9, r1
 800433e:	f7fc fb3d 	bl	80009bc <__aeabi_dcmpeq>
 8004342:	2800      	cmp	r0, #0
 8004344:	d09b      	beq.n	800427e <_dtoa_r+0x64e>
 8004346:	e7cd      	b.n	80042e4 <_dtoa_r+0x6b4>
 8004348:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800434a:	2a00      	cmp	r2, #0
 800434c:	f000 80c4 	beq.w	80044d8 <_dtoa_r+0x8a8>
 8004350:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004352:	2a01      	cmp	r2, #1
 8004354:	f300 80a8 	bgt.w	80044a8 <_dtoa_r+0x878>
 8004358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800435a:	2a00      	cmp	r2, #0
 800435c:	f000 80a0 	beq.w	80044a0 <_dtoa_r+0x870>
 8004360:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004364:	464f      	mov	r7, r9
 8004366:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800436a:	2101      	movs	r1, #1
 800436c:	441a      	add	r2, r3
 800436e:	4628      	mov	r0, r5
 8004370:	4499      	add	r9, r3
 8004372:	9209      	str	r2, [sp, #36]	; 0x24
 8004374:	f000 fc32 	bl	8004bdc <__i2b>
 8004378:	4606      	mov	r6, r0
 800437a:	b15f      	cbz	r7, 8004394 <_dtoa_r+0x764>
 800437c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800437e:	2b00      	cmp	r3, #0
 8004380:	dd08      	ble.n	8004394 <_dtoa_r+0x764>
 8004382:	42bb      	cmp	r3, r7
 8004384:	bfa8      	it	ge
 8004386:	463b      	movge	r3, r7
 8004388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800438a:	eba9 0903 	sub.w	r9, r9, r3
 800438e:	1aff      	subs	r7, r7, r3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	9309      	str	r3, [sp, #36]	; 0x24
 8004394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004396:	b1f3      	cbz	r3, 80043d6 <_dtoa_r+0x7a6>
 8004398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80a0 	beq.w	80044e0 <_dtoa_r+0x8b0>
 80043a0:	2c00      	cmp	r4, #0
 80043a2:	dd10      	ble.n	80043c6 <_dtoa_r+0x796>
 80043a4:	4631      	mov	r1, r6
 80043a6:	4622      	mov	r2, r4
 80043a8:	4628      	mov	r0, r5
 80043aa:	f000 fcd5 	bl	8004d58 <__pow5mult>
 80043ae:	4652      	mov	r2, sl
 80043b0:	4601      	mov	r1, r0
 80043b2:	4606      	mov	r6, r0
 80043b4:	4628      	mov	r0, r5
 80043b6:	f000 fc27 	bl	8004c08 <__multiply>
 80043ba:	4680      	mov	r8, r0
 80043bc:	4651      	mov	r1, sl
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 fb56 	bl	8004a70 <_Bfree>
 80043c4:	46c2      	mov	sl, r8
 80043c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c8:	1b1a      	subs	r2, r3, r4
 80043ca:	d004      	beq.n	80043d6 <_dtoa_r+0x7a6>
 80043cc:	4651      	mov	r1, sl
 80043ce:	4628      	mov	r0, r5
 80043d0:	f000 fcc2 	bl	8004d58 <__pow5mult>
 80043d4:	4682      	mov	sl, r0
 80043d6:	2101      	movs	r1, #1
 80043d8:	4628      	mov	r0, r5
 80043da:	f000 fbff 	bl	8004bdc <__i2b>
 80043de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043e0:	4604      	mov	r4, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f340 8082 	ble.w	80044ec <_dtoa_r+0x8bc>
 80043e8:	461a      	mov	r2, r3
 80043ea:	4601      	mov	r1, r0
 80043ec:	4628      	mov	r0, r5
 80043ee:	f000 fcb3 	bl	8004d58 <__pow5mult>
 80043f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043f4:	4604      	mov	r4, r0
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	dd7b      	ble.n	80044f2 <_dtoa_r+0x8c2>
 80043fa:	f04f 0800 	mov.w	r8, #0
 80043fe:	6923      	ldr	r3, [r4, #16]
 8004400:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004404:	6918      	ldr	r0, [r3, #16]
 8004406:	f000 fb9b 	bl	8004b40 <__hi0bits>
 800440a:	f1c0 0020 	rsb	r0, r0, #32
 800440e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004410:	4418      	add	r0, r3
 8004412:	f010 001f 	ands.w	r0, r0, #31
 8004416:	f000 8092 	beq.w	800453e <_dtoa_r+0x90e>
 800441a:	f1c0 0320 	rsb	r3, r0, #32
 800441e:	2b04      	cmp	r3, #4
 8004420:	f340 8085 	ble.w	800452e <_dtoa_r+0x8fe>
 8004424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004426:	f1c0 001c 	rsb	r0, r0, #28
 800442a:	4403      	add	r3, r0
 800442c:	4481      	add	r9, r0
 800442e:	4407      	add	r7, r0
 8004430:	9309      	str	r3, [sp, #36]	; 0x24
 8004432:	f1b9 0f00 	cmp.w	r9, #0
 8004436:	dd05      	ble.n	8004444 <_dtoa_r+0x814>
 8004438:	4651      	mov	r1, sl
 800443a:	464a      	mov	r2, r9
 800443c:	4628      	mov	r0, r5
 800443e:	f000 fce5 	bl	8004e0c <__lshift>
 8004442:	4682      	mov	sl, r0
 8004444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	dd05      	ble.n	8004456 <_dtoa_r+0x826>
 800444a:	4621      	mov	r1, r4
 800444c:	461a      	mov	r2, r3
 800444e:	4628      	mov	r0, r5
 8004450:	f000 fcdc 	bl	8004e0c <__lshift>
 8004454:	4604      	mov	r4, r0
 8004456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d072      	beq.n	8004542 <_dtoa_r+0x912>
 800445c:	4621      	mov	r1, r4
 800445e:	4650      	mov	r0, sl
 8004460:	f000 fd40 	bl	8004ee4 <__mcmp>
 8004464:	2800      	cmp	r0, #0
 8004466:	da6c      	bge.n	8004542 <_dtoa_r+0x912>
 8004468:	2300      	movs	r3, #0
 800446a:	4651      	mov	r1, sl
 800446c:	220a      	movs	r2, #10
 800446e:	4628      	mov	r0, r5
 8004470:	f000 fb20 	bl	8004ab4 <__multadd>
 8004474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004476:	4682      	mov	sl, r0
 8004478:	f10b 3bff 	add.w	fp, fp, #4294967295
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 81ac 	beq.w	80047da <_dtoa_r+0xbaa>
 8004482:	2300      	movs	r3, #0
 8004484:	4631      	mov	r1, r6
 8004486:	220a      	movs	r2, #10
 8004488:	4628      	mov	r0, r5
 800448a:	f000 fb13 	bl	8004ab4 <__multadd>
 800448e:	9b06      	ldr	r3, [sp, #24]
 8004490:	4606      	mov	r6, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	f300 8093 	bgt.w	80045be <_dtoa_r+0x98e>
 8004498:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800449a:	2b02      	cmp	r3, #2
 800449c:	dc59      	bgt.n	8004552 <_dtoa_r+0x922>
 800449e:	e08e      	b.n	80045be <_dtoa_r+0x98e>
 80044a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80044a6:	e75d      	b.n	8004364 <_dtoa_r+0x734>
 80044a8:	9b08      	ldr	r3, [sp, #32]
 80044aa:	1e5c      	subs	r4, r3, #1
 80044ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ae:	42a3      	cmp	r3, r4
 80044b0:	bfbf      	itttt	lt
 80044b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80044b4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80044b6:	1ae3      	sublt	r3, r4, r3
 80044b8:	18d2      	addlt	r2, r2, r3
 80044ba:	bfa8      	it	ge
 80044bc:	1b1c      	subge	r4, r3, r4
 80044be:	9b08      	ldr	r3, [sp, #32]
 80044c0:	bfbe      	ittt	lt
 80044c2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80044c4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80044c6:	2400      	movlt	r4, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bfb5      	itete	lt
 80044cc:	eba9 0703 	sublt.w	r7, r9, r3
 80044d0:	464f      	movge	r7, r9
 80044d2:	2300      	movlt	r3, #0
 80044d4:	9b08      	ldrge	r3, [sp, #32]
 80044d6:	e747      	b.n	8004368 <_dtoa_r+0x738>
 80044d8:	464f      	mov	r7, r9
 80044da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80044dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80044de:	e74c      	b.n	800437a <_dtoa_r+0x74a>
 80044e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044e2:	e773      	b.n	80043cc <_dtoa_r+0x79c>
 80044e4:	3fe00000 	.word	0x3fe00000
 80044e8:	40240000 	.word	0x40240000
 80044ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	dc18      	bgt.n	8004524 <_dtoa_r+0x8f4>
 80044f2:	9b04      	ldr	r3, [sp, #16]
 80044f4:	b9b3      	cbnz	r3, 8004524 <_dtoa_r+0x8f4>
 80044f6:	9b05      	ldr	r3, [sp, #20]
 80044f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044fc:	b993      	cbnz	r3, 8004524 <_dtoa_r+0x8f4>
 80044fe:	9b05      	ldr	r3, [sp, #20]
 8004500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004504:	0d1b      	lsrs	r3, r3, #20
 8004506:	051b      	lsls	r3, r3, #20
 8004508:	b17b      	cbz	r3, 800452a <_dtoa_r+0x8fa>
 800450a:	f04f 0801 	mov.w	r8, #1
 800450e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004510:	f109 0901 	add.w	r9, r9, #1
 8004514:	3301      	adds	r3, #1
 8004516:	9309      	str	r3, [sp, #36]	; 0x24
 8004518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800451a:	2b00      	cmp	r3, #0
 800451c:	f47f af6f 	bne.w	80043fe <_dtoa_r+0x7ce>
 8004520:	2001      	movs	r0, #1
 8004522:	e774      	b.n	800440e <_dtoa_r+0x7de>
 8004524:	f04f 0800 	mov.w	r8, #0
 8004528:	e7f6      	b.n	8004518 <_dtoa_r+0x8e8>
 800452a:	4698      	mov	r8, r3
 800452c:	e7f4      	b.n	8004518 <_dtoa_r+0x8e8>
 800452e:	d080      	beq.n	8004432 <_dtoa_r+0x802>
 8004530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004532:	331c      	adds	r3, #28
 8004534:	441a      	add	r2, r3
 8004536:	4499      	add	r9, r3
 8004538:	441f      	add	r7, r3
 800453a:	9209      	str	r2, [sp, #36]	; 0x24
 800453c:	e779      	b.n	8004432 <_dtoa_r+0x802>
 800453e:	4603      	mov	r3, r0
 8004540:	e7f6      	b.n	8004530 <_dtoa_r+0x900>
 8004542:	9b08      	ldr	r3, [sp, #32]
 8004544:	2b00      	cmp	r3, #0
 8004546:	dc34      	bgt.n	80045b2 <_dtoa_r+0x982>
 8004548:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800454a:	2b02      	cmp	r3, #2
 800454c:	dd31      	ble.n	80045b2 <_dtoa_r+0x982>
 800454e:	9b08      	ldr	r3, [sp, #32]
 8004550:	9306      	str	r3, [sp, #24]
 8004552:	9b06      	ldr	r3, [sp, #24]
 8004554:	b963      	cbnz	r3, 8004570 <_dtoa_r+0x940>
 8004556:	4621      	mov	r1, r4
 8004558:	2205      	movs	r2, #5
 800455a:	4628      	mov	r0, r5
 800455c:	f000 faaa 	bl	8004ab4 <__multadd>
 8004560:	4601      	mov	r1, r0
 8004562:	4604      	mov	r4, r0
 8004564:	4650      	mov	r0, sl
 8004566:	f000 fcbd 	bl	8004ee4 <__mcmp>
 800456a:	2800      	cmp	r0, #0
 800456c:	f73f adbf 	bgt.w	80040ee <_dtoa_r+0x4be>
 8004570:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004572:	9f03      	ldr	r7, [sp, #12]
 8004574:	ea6f 0b03 	mvn.w	fp, r3
 8004578:	f04f 0800 	mov.w	r8, #0
 800457c:	4621      	mov	r1, r4
 800457e:	4628      	mov	r0, r5
 8004580:	f000 fa76 	bl	8004a70 <_Bfree>
 8004584:	2e00      	cmp	r6, #0
 8004586:	f43f aead 	beq.w	80042e4 <_dtoa_r+0x6b4>
 800458a:	f1b8 0f00 	cmp.w	r8, #0
 800458e:	d005      	beq.n	800459c <_dtoa_r+0x96c>
 8004590:	45b0      	cmp	r8, r6
 8004592:	d003      	beq.n	800459c <_dtoa_r+0x96c>
 8004594:	4641      	mov	r1, r8
 8004596:	4628      	mov	r0, r5
 8004598:	f000 fa6a 	bl	8004a70 <_Bfree>
 800459c:	4631      	mov	r1, r6
 800459e:	4628      	mov	r0, r5
 80045a0:	f000 fa66 	bl	8004a70 <_Bfree>
 80045a4:	e69e      	b.n	80042e4 <_dtoa_r+0x6b4>
 80045a6:	2400      	movs	r4, #0
 80045a8:	4626      	mov	r6, r4
 80045aa:	e7e1      	b.n	8004570 <_dtoa_r+0x940>
 80045ac:	46c3      	mov	fp, r8
 80045ae:	4626      	mov	r6, r4
 80045b0:	e59d      	b.n	80040ee <_dtoa_r+0x4be>
 80045b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80c8 	beq.w	800474a <_dtoa_r+0xb1a>
 80045ba:	9b08      	ldr	r3, [sp, #32]
 80045bc:	9306      	str	r3, [sp, #24]
 80045be:	2f00      	cmp	r7, #0
 80045c0:	dd05      	ble.n	80045ce <_dtoa_r+0x99e>
 80045c2:	4631      	mov	r1, r6
 80045c4:	463a      	mov	r2, r7
 80045c6:	4628      	mov	r0, r5
 80045c8:	f000 fc20 	bl	8004e0c <__lshift>
 80045cc:	4606      	mov	r6, r0
 80045ce:	f1b8 0f00 	cmp.w	r8, #0
 80045d2:	d05b      	beq.n	800468c <_dtoa_r+0xa5c>
 80045d4:	4628      	mov	r0, r5
 80045d6:	6871      	ldr	r1, [r6, #4]
 80045d8:	f000 fa0a 	bl	80049f0 <_Balloc>
 80045dc:	4607      	mov	r7, r0
 80045de:	b928      	cbnz	r0, 80045ec <_dtoa_r+0x9bc>
 80045e0:	4602      	mov	r2, r0
 80045e2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80045e6:	4b81      	ldr	r3, [pc, #516]	; (80047ec <_dtoa_r+0xbbc>)
 80045e8:	f7ff bb36 	b.w	8003c58 <_dtoa_r+0x28>
 80045ec:	6932      	ldr	r2, [r6, #16]
 80045ee:	f106 010c 	add.w	r1, r6, #12
 80045f2:	3202      	adds	r2, #2
 80045f4:	0092      	lsls	r2, r2, #2
 80045f6:	300c      	adds	r0, #12
 80045f8:	f000 ff9e 	bl	8005538 <memcpy>
 80045fc:	2201      	movs	r2, #1
 80045fe:	4639      	mov	r1, r7
 8004600:	4628      	mov	r0, r5
 8004602:	f000 fc03 	bl	8004e0c <__lshift>
 8004606:	46b0      	mov	r8, r6
 8004608:	4606      	mov	r6, r0
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	9a03      	ldr	r2, [sp, #12]
 800460e:	3301      	adds	r3, #1
 8004610:	9308      	str	r3, [sp, #32]
 8004612:	9b06      	ldr	r3, [sp, #24]
 8004614:	4413      	add	r3, r2
 8004616:	930b      	str	r3, [sp, #44]	; 0x2c
 8004618:	9b04      	ldr	r3, [sp, #16]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	930a      	str	r3, [sp, #40]	; 0x28
 8004620:	9b08      	ldr	r3, [sp, #32]
 8004622:	4621      	mov	r1, r4
 8004624:	3b01      	subs	r3, #1
 8004626:	4650      	mov	r0, sl
 8004628:	9304      	str	r3, [sp, #16]
 800462a:	f7ff fa77 	bl	8003b1c <quorem>
 800462e:	4641      	mov	r1, r8
 8004630:	9006      	str	r0, [sp, #24]
 8004632:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004636:	4650      	mov	r0, sl
 8004638:	f000 fc54 	bl	8004ee4 <__mcmp>
 800463c:	4632      	mov	r2, r6
 800463e:	9009      	str	r0, [sp, #36]	; 0x24
 8004640:	4621      	mov	r1, r4
 8004642:	4628      	mov	r0, r5
 8004644:	f000 fc6a 	bl	8004f1c <__mdiff>
 8004648:	68c2      	ldr	r2, [r0, #12]
 800464a:	4607      	mov	r7, r0
 800464c:	bb02      	cbnz	r2, 8004690 <_dtoa_r+0xa60>
 800464e:	4601      	mov	r1, r0
 8004650:	4650      	mov	r0, sl
 8004652:	f000 fc47 	bl	8004ee4 <__mcmp>
 8004656:	4602      	mov	r2, r0
 8004658:	4639      	mov	r1, r7
 800465a:	4628      	mov	r0, r5
 800465c:	920c      	str	r2, [sp, #48]	; 0x30
 800465e:	f000 fa07 	bl	8004a70 <_Bfree>
 8004662:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004664:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004666:	9f08      	ldr	r7, [sp, #32]
 8004668:	ea43 0102 	orr.w	r1, r3, r2
 800466c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800466e:	4319      	orrs	r1, r3
 8004670:	d110      	bne.n	8004694 <_dtoa_r+0xa64>
 8004672:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004676:	d029      	beq.n	80046cc <_dtoa_r+0xa9c>
 8004678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800467a:	2b00      	cmp	r3, #0
 800467c:	dd02      	ble.n	8004684 <_dtoa_r+0xa54>
 800467e:	9b06      	ldr	r3, [sp, #24]
 8004680:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004684:	9b04      	ldr	r3, [sp, #16]
 8004686:	f883 9000 	strb.w	r9, [r3]
 800468a:	e777      	b.n	800457c <_dtoa_r+0x94c>
 800468c:	4630      	mov	r0, r6
 800468e:	e7ba      	b.n	8004606 <_dtoa_r+0x9d6>
 8004690:	2201      	movs	r2, #1
 8004692:	e7e1      	b.n	8004658 <_dtoa_r+0xa28>
 8004694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	db04      	blt.n	80046a4 <_dtoa_r+0xa74>
 800469a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800469c:	430b      	orrs	r3, r1
 800469e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80046a0:	430b      	orrs	r3, r1
 80046a2:	d120      	bne.n	80046e6 <_dtoa_r+0xab6>
 80046a4:	2a00      	cmp	r2, #0
 80046a6:	dded      	ble.n	8004684 <_dtoa_r+0xa54>
 80046a8:	4651      	mov	r1, sl
 80046aa:	2201      	movs	r2, #1
 80046ac:	4628      	mov	r0, r5
 80046ae:	f000 fbad 	bl	8004e0c <__lshift>
 80046b2:	4621      	mov	r1, r4
 80046b4:	4682      	mov	sl, r0
 80046b6:	f000 fc15 	bl	8004ee4 <__mcmp>
 80046ba:	2800      	cmp	r0, #0
 80046bc:	dc03      	bgt.n	80046c6 <_dtoa_r+0xa96>
 80046be:	d1e1      	bne.n	8004684 <_dtoa_r+0xa54>
 80046c0:	f019 0f01 	tst.w	r9, #1
 80046c4:	d0de      	beq.n	8004684 <_dtoa_r+0xa54>
 80046c6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80046ca:	d1d8      	bne.n	800467e <_dtoa_r+0xa4e>
 80046cc:	2339      	movs	r3, #57	; 0x39
 80046ce:	9a04      	ldr	r2, [sp, #16]
 80046d0:	7013      	strb	r3, [r2, #0]
 80046d2:	463b      	mov	r3, r7
 80046d4:	461f      	mov	r7, r3
 80046d6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80046da:	3b01      	subs	r3, #1
 80046dc:	2a39      	cmp	r2, #57	; 0x39
 80046de:	d06b      	beq.n	80047b8 <_dtoa_r+0xb88>
 80046e0:	3201      	adds	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	e74a      	b.n	800457c <_dtoa_r+0x94c>
 80046e6:	2a00      	cmp	r2, #0
 80046e8:	dd07      	ble.n	80046fa <_dtoa_r+0xaca>
 80046ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80046ee:	d0ed      	beq.n	80046cc <_dtoa_r+0xa9c>
 80046f0:	9a04      	ldr	r2, [sp, #16]
 80046f2:	f109 0301 	add.w	r3, r9, #1
 80046f6:	7013      	strb	r3, [r2, #0]
 80046f8:	e740      	b.n	800457c <_dtoa_r+0x94c>
 80046fa:	9b08      	ldr	r3, [sp, #32]
 80046fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046fe:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004702:	4293      	cmp	r3, r2
 8004704:	d042      	beq.n	800478c <_dtoa_r+0xb5c>
 8004706:	4651      	mov	r1, sl
 8004708:	2300      	movs	r3, #0
 800470a:	220a      	movs	r2, #10
 800470c:	4628      	mov	r0, r5
 800470e:	f000 f9d1 	bl	8004ab4 <__multadd>
 8004712:	45b0      	cmp	r8, r6
 8004714:	4682      	mov	sl, r0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	f04f 020a 	mov.w	r2, #10
 800471e:	4641      	mov	r1, r8
 8004720:	4628      	mov	r0, r5
 8004722:	d107      	bne.n	8004734 <_dtoa_r+0xb04>
 8004724:	f000 f9c6 	bl	8004ab4 <__multadd>
 8004728:	4680      	mov	r8, r0
 800472a:	4606      	mov	r6, r0
 800472c:	9b08      	ldr	r3, [sp, #32]
 800472e:	3301      	adds	r3, #1
 8004730:	9308      	str	r3, [sp, #32]
 8004732:	e775      	b.n	8004620 <_dtoa_r+0x9f0>
 8004734:	f000 f9be 	bl	8004ab4 <__multadd>
 8004738:	4631      	mov	r1, r6
 800473a:	4680      	mov	r8, r0
 800473c:	2300      	movs	r3, #0
 800473e:	220a      	movs	r2, #10
 8004740:	4628      	mov	r0, r5
 8004742:	f000 f9b7 	bl	8004ab4 <__multadd>
 8004746:	4606      	mov	r6, r0
 8004748:	e7f0      	b.n	800472c <_dtoa_r+0xafc>
 800474a:	9b08      	ldr	r3, [sp, #32]
 800474c:	9306      	str	r3, [sp, #24]
 800474e:	9f03      	ldr	r7, [sp, #12]
 8004750:	4621      	mov	r1, r4
 8004752:	4650      	mov	r0, sl
 8004754:	f7ff f9e2 	bl	8003b1c <quorem>
 8004758:	9b03      	ldr	r3, [sp, #12]
 800475a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800475e:	f807 9b01 	strb.w	r9, [r7], #1
 8004762:	1afa      	subs	r2, r7, r3
 8004764:	9b06      	ldr	r3, [sp, #24]
 8004766:	4293      	cmp	r3, r2
 8004768:	dd07      	ble.n	800477a <_dtoa_r+0xb4a>
 800476a:	4651      	mov	r1, sl
 800476c:	2300      	movs	r3, #0
 800476e:	220a      	movs	r2, #10
 8004770:	4628      	mov	r0, r5
 8004772:	f000 f99f 	bl	8004ab4 <__multadd>
 8004776:	4682      	mov	sl, r0
 8004778:	e7ea      	b.n	8004750 <_dtoa_r+0xb20>
 800477a:	9b06      	ldr	r3, [sp, #24]
 800477c:	f04f 0800 	mov.w	r8, #0
 8004780:	2b00      	cmp	r3, #0
 8004782:	bfcc      	ite	gt
 8004784:	461f      	movgt	r7, r3
 8004786:	2701      	movle	r7, #1
 8004788:	9b03      	ldr	r3, [sp, #12]
 800478a:	441f      	add	r7, r3
 800478c:	4651      	mov	r1, sl
 800478e:	2201      	movs	r2, #1
 8004790:	4628      	mov	r0, r5
 8004792:	f000 fb3b 	bl	8004e0c <__lshift>
 8004796:	4621      	mov	r1, r4
 8004798:	4682      	mov	sl, r0
 800479a:	f000 fba3 	bl	8004ee4 <__mcmp>
 800479e:	2800      	cmp	r0, #0
 80047a0:	dc97      	bgt.n	80046d2 <_dtoa_r+0xaa2>
 80047a2:	d102      	bne.n	80047aa <_dtoa_r+0xb7a>
 80047a4:	f019 0f01 	tst.w	r9, #1
 80047a8:	d193      	bne.n	80046d2 <_dtoa_r+0xaa2>
 80047aa:	463b      	mov	r3, r7
 80047ac:	461f      	mov	r7, r3
 80047ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047b2:	2a30      	cmp	r2, #48	; 0x30
 80047b4:	d0fa      	beq.n	80047ac <_dtoa_r+0xb7c>
 80047b6:	e6e1      	b.n	800457c <_dtoa_r+0x94c>
 80047b8:	9a03      	ldr	r2, [sp, #12]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d18a      	bne.n	80046d4 <_dtoa_r+0xaa4>
 80047be:	2331      	movs	r3, #49	; 0x31
 80047c0:	f10b 0b01 	add.w	fp, fp, #1
 80047c4:	e797      	b.n	80046f6 <_dtoa_r+0xac6>
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <_dtoa_r+0xbc0>)
 80047c8:	f7ff ba9f 	b.w	8003d0a <_dtoa_r+0xda>
 80047cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f47f aa77 	bne.w	8003cc2 <_dtoa_r+0x92>
 80047d4:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <_dtoa_r+0xbc4>)
 80047d6:	f7ff ba98 	b.w	8003d0a <_dtoa_r+0xda>
 80047da:	9b06      	ldr	r3, [sp, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	dcb6      	bgt.n	800474e <_dtoa_r+0xb1e>
 80047e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	f73f aeb5 	bgt.w	8004552 <_dtoa_r+0x922>
 80047e8:	e7b1      	b.n	800474e <_dtoa_r+0xb1e>
 80047ea:	bf00      	nop
 80047ec:	08005d1e 	.word	0x08005d1e
 80047f0:	08005c7e 	.word	0x08005c7e
 80047f4:	08005ca2 	.word	0x08005ca2

080047f8 <_free_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4605      	mov	r5, r0
 80047fc:	2900      	cmp	r1, #0
 80047fe:	d040      	beq.n	8004882 <_free_r+0x8a>
 8004800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004804:	1f0c      	subs	r4, r1, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	bfb8      	it	lt
 800480a:	18e4      	addlt	r4, r4, r3
 800480c:	f000 f8e4 	bl	80049d8 <__malloc_lock>
 8004810:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <_free_r+0x8c>)
 8004812:	6813      	ldr	r3, [r2, #0]
 8004814:	b933      	cbnz	r3, 8004824 <_free_r+0x2c>
 8004816:	6063      	str	r3, [r4, #4]
 8004818:	6014      	str	r4, [r2, #0]
 800481a:	4628      	mov	r0, r5
 800481c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004820:	f000 b8e0 	b.w	80049e4 <__malloc_unlock>
 8004824:	42a3      	cmp	r3, r4
 8004826:	d908      	bls.n	800483a <_free_r+0x42>
 8004828:	6820      	ldr	r0, [r4, #0]
 800482a:	1821      	adds	r1, r4, r0
 800482c:	428b      	cmp	r3, r1
 800482e:	bf01      	itttt	eq
 8004830:	6819      	ldreq	r1, [r3, #0]
 8004832:	685b      	ldreq	r3, [r3, #4]
 8004834:	1809      	addeq	r1, r1, r0
 8004836:	6021      	streq	r1, [r4, #0]
 8004838:	e7ed      	b.n	8004816 <_free_r+0x1e>
 800483a:	461a      	mov	r2, r3
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	b10b      	cbz	r3, 8004844 <_free_r+0x4c>
 8004840:	42a3      	cmp	r3, r4
 8004842:	d9fa      	bls.n	800483a <_free_r+0x42>
 8004844:	6811      	ldr	r1, [r2, #0]
 8004846:	1850      	adds	r0, r2, r1
 8004848:	42a0      	cmp	r0, r4
 800484a:	d10b      	bne.n	8004864 <_free_r+0x6c>
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	4401      	add	r1, r0
 8004850:	1850      	adds	r0, r2, r1
 8004852:	4283      	cmp	r3, r0
 8004854:	6011      	str	r1, [r2, #0]
 8004856:	d1e0      	bne.n	800481a <_free_r+0x22>
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	4408      	add	r0, r1
 800485e:	6010      	str	r0, [r2, #0]
 8004860:	6053      	str	r3, [r2, #4]
 8004862:	e7da      	b.n	800481a <_free_r+0x22>
 8004864:	d902      	bls.n	800486c <_free_r+0x74>
 8004866:	230c      	movs	r3, #12
 8004868:	602b      	str	r3, [r5, #0]
 800486a:	e7d6      	b.n	800481a <_free_r+0x22>
 800486c:	6820      	ldr	r0, [r4, #0]
 800486e:	1821      	adds	r1, r4, r0
 8004870:	428b      	cmp	r3, r1
 8004872:	bf01      	itttt	eq
 8004874:	6819      	ldreq	r1, [r3, #0]
 8004876:	685b      	ldreq	r3, [r3, #4]
 8004878:	1809      	addeq	r1, r1, r0
 800487a:	6021      	streq	r1, [r4, #0]
 800487c:	6063      	str	r3, [r4, #4]
 800487e:	6054      	str	r4, [r2, #4]
 8004880:	e7cb      	b.n	800481a <_free_r+0x22>
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	20000478 	.word	0x20000478

08004888 <malloc>:
 8004888:	4b02      	ldr	r3, [pc, #8]	; (8004894 <malloc+0xc>)
 800488a:	4601      	mov	r1, r0
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	f000 b823 	b.w	80048d8 <_malloc_r>
 8004892:	bf00      	nop
 8004894:	20000064 	.word	0x20000064

08004898 <sbrk_aligned>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4e0e      	ldr	r6, [pc, #56]	; (80048d4 <sbrk_aligned+0x3c>)
 800489c:	460c      	mov	r4, r1
 800489e:	6831      	ldr	r1, [r6, #0]
 80048a0:	4605      	mov	r5, r0
 80048a2:	b911      	cbnz	r1, 80048aa <sbrk_aligned+0x12>
 80048a4:	f000 fe38 	bl	8005518 <_sbrk_r>
 80048a8:	6030      	str	r0, [r6, #0]
 80048aa:	4621      	mov	r1, r4
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 fe33 	bl	8005518 <_sbrk_r>
 80048b2:	1c43      	adds	r3, r0, #1
 80048b4:	d00a      	beq.n	80048cc <sbrk_aligned+0x34>
 80048b6:	1cc4      	adds	r4, r0, #3
 80048b8:	f024 0403 	bic.w	r4, r4, #3
 80048bc:	42a0      	cmp	r0, r4
 80048be:	d007      	beq.n	80048d0 <sbrk_aligned+0x38>
 80048c0:	1a21      	subs	r1, r4, r0
 80048c2:	4628      	mov	r0, r5
 80048c4:	f000 fe28 	bl	8005518 <_sbrk_r>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d101      	bne.n	80048d0 <sbrk_aligned+0x38>
 80048cc:	f04f 34ff 	mov.w	r4, #4294967295
 80048d0:	4620      	mov	r0, r4
 80048d2:	bd70      	pop	{r4, r5, r6, pc}
 80048d4:	2000047c 	.word	0x2000047c

080048d8 <_malloc_r>:
 80048d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048dc:	1ccd      	adds	r5, r1, #3
 80048de:	f025 0503 	bic.w	r5, r5, #3
 80048e2:	3508      	adds	r5, #8
 80048e4:	2d0c      	cmp	r5, #12
 80048e6:	bf38      	it	cc
 80048e8:	250c      	movcc	r5, #12
 80048ea:	2d00      	cmp	r5, #0
 80048ec:	4607      	mov	r7, r0
 80048ee:	db01      	blt.n	80048f4 <_malloc_r+0x1c>
 80048f0:	42a9      	cmp	r1, r5
 80048f2:	d905      	bls.n	8004900 <_malloc_r+0x28>
 80048f4:	230c      	movs	r3, #12
 80048f6:	2600      	movs	r6, #0
 80048f8:	603b      	str	r3, [r7, #0]
 80048fa:	4630      	mov	r0, r6
 80048fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004900:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049d4 <_malloc_r+0xfc>
 8004904:	f000 f868 	bl	80049d8 <__malloc_lock>
 8004908:	f8d8 3000 	ldr.w	r3, [r8]
 800490c:	461c      	mov	r4, r3
 800490e:	bb5c      	cbnz	r4, 8004968 <_malloc_r+0x90>
 8004910:	4629      	mov	r1, r5
 8004912:	4638      	mov	r0, r7
 8004914:	f7ff ffc0 	bl	8004898 <sbrk_aligned>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	4604      	mov	r4, r0
 800491c:	d155      	bne.n	80049ca <_malloc_r+0xf2>
 800491e:	f8d8 4000 	ldr.w	r4, [r8]
 8004922:	4626      	mov	r6, r4
 8004924:	2e00      	cmp	r6, #0
 8004926:	d145      	bne.n	80049b4 <_malloc_r+0xdc>
 8004928:	2c00      	cmp	r4, #0
 800492a:	d048      	beq.n	80049be <_malloc_r+0xe6>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	4631      	mov	r1, r6
 8004930:	4638      	mov	r0, r7
 8004932:	eb04 0903 	add.w	r9, r4, r3
 8004936:	f000 fdef 	bl	8005518 <_sbrk_r>
 800493a:	4581      	cmp	r9, r0
 800493c:	d13f      	bne.n	80049be <_malloc_r+0xe6>
 800493e:	6821      	ldr	r1, [r4, #0]
 8004940:	4638      	mov	r0, r7
 8004942:	1a6d      	subs	r5, r5, r1
 8004944:	4629      	mov	r1, r5
 8004946:	f7ff ffa7 	bl	8004898 <sbrk_aligned>
 800494a:	3001      	adds	r0, #1
 800494c:	d037      	beq.n	80049be <_malloc_r+0xe6>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	442b      	add	r3, r5
 8004952:	6023      	str	r3, [r4, #0]
 8004954:	f8d8 3000 	ldr.w	r3, [r8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d038      	beq.n	80049ce <_malloc_r+0xf6>
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	42a2      	cmp	r2, r4
 8004960:	d12b      	bne.n	80049ba <_malloc_r+0xe2>
 8004962:	2200      	movs	r2, #0
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	e00f      	b.n	8004988 <_malloc_r+0xb0>
 8004968:	6822      	ldr	r2, [r4, #0]
 800496a:	1b52      	subs	r2, r2, r5
 800496c:	d41f      	bmi.n	80049ae <_malloc_r+0xd6>
 800496e:	2a0b      	cmp	r2, #11
 8004970:	d917      	bls.n	80049a2 <_malloc_r+0xca>
 8004972:	1961      	adds	r1, r4, r5
 8004974:	42a3      	cmp	r3, r4
 8004976:	6025      	str	r5, [r4, #0]
 8004978:	bf18      	it	ne
 800497a:	6059      	strne	r1, [r3, #4]
 800497c:	6863      	ldr	r3, [r4, #4]
 800497e:	bf08      	it	eq
 8004980:	f8c8 1000 	streq.w	r1, [r8]
 8004984:	5162      	str	r2, [r4, r5]
 8004986:	604b      	str	r3, [r1, #4]
 8004988:	4638      	mov	r0, r7
 800498a:	f104 060b 	add.w	r6, r4, #11
 800498e:	f000 f829 	bl	80049e4 <__malloc_unlock>
 8004992:	f026 0607 	bic.w	r6, r6, #7
 8004996:	1d23      	adds	r3, r4, #4
 8004998:	1af2      	subs	r2, r6, r3
 800499a:	d0ae      	beq.n	80048fa <_malloc_r+0x22>
 800499c:	1b9b      	subs	r3, r3, r6
 800499e:	50a3      	str	r3, [r4, r2]
 80049a0:	e7ab      	b.n	80048fa <_malloc_r+0x22>
 80049a2:	42a3      	cmp	r3, r4
 80049a4:	6862      	ldr	r2, [r4, #4]
 80049a6:	d1dd      	bne.n	8004964 <_malloc_r+0x8c>
 80049a8:	f8c8 2000 	str.w	r2, [r8]
 80049ac:	e7ec      	b.n	8004988 <_malloc_r+0xb0>
 80049ae:	4623      	mov	r3, r4
 80049b0:	6864      	ldr	r4, [r4, #4]
 80049b2:	e7ac      	b.n	800490e <_malloc_r+0x36>
 80049b4:	4634      	mov	r4, r6
 80049b6:	6876      	ldr	r6, [r6, #4]
 80049b8:	e7b4      	b.n	8004924 <_malloc_r+0x4c>
 80049ba:	4613      	mov	r3, r2
 80049bc:	e7cc      	b.n	8004958 <_malloc_r+0x80>
 80049be:	230c      	movs	r3, #12
 80049c0:	4638      	mov	r0, r7
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	f000 f80e 	bl	80049e4 <__malloc_unlock>
 80049c8:	e797      	b.n	80048fa <_malloc_r+0x22>
 80049ca:	6025      	str	r5, [r4, #0]
 80049cc:	e7dc      	b.n	8004988 <_malloc_r+0xb0>
 80049ce:	605b      	str	r3, [r3, #4]
 80049d0:	deff      	udf	#255	; 0xff
 80049d2:	bf00      	nop
 80049d4:	20000478 	.word	0x20000478

080049d8 <__malloc_lock>:
 80049d8:	4801      	ldr	r0, [pc, #4]	; (80049e0 <__malloc_lock+0x8>)
 80049da:	f7ff b88f 	b.w	8003afc <__retarget_lock_acquire_recursive>
 80049de:	bf00      	nop
 80049e0:	20000474 	.word	0x20000474

080049e4 <__malloc_unlock>:
 80049e4:	4801      	ldr	r0, [pc, #4]	; (80049ec <__malloc_unlock+0x8>)
 80049e6:	f7ff b88a 	b.w	8003afe <__retarget_lock_release_recursive>
 80049ea:	bf00      	nop
 80049ec:	20000474 	.word	0x20000474

080049f0 <_Balloc>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	69c6      	ldr	r6, [r0, #28]
 80049f4:	4604      	mov	r4, r0
 80049f6:	460d      	mov	r5, r1
 80049f8:	b976      	cbnz	r6, 8004a18 <_Balloc+0x28>
 80049fa:	2010      	movs	r0, #16
 80049fc:	f7ff ff44 	bl	8004888 <malloc>
 8004a00:	4602      	mov	r2, r0
 8004a02:	61e0      	str	r0, [r4, #28]
 8004a04:	b920      	cbnz	r0, 8004a10 <_Balloc+0x20>
 8004a06:	216b      	movs	r1, #107	; 0x6b
 8004a08:	4b17      	ldr	r3, [pc, #92]	; (8004a68 <_Balloc+0x78>)
 8004a0a:	4818      	ldr	r0, [pc, #96]	; (8004a6c <_Balloc+0x7c>)
 8004a0c:	f000 fda2 	bl	8005554 <__assert_func>
 8004a10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a14:	6006      	str	r6, [r0, #0]
 8004a16:	60c6      	str	r6, [r0, #12]
 8004a18:	69e6      	ldr	r6, [r4, #28]
 8004a1a:	68f3      	ldr	r3, [r6, #12]
 8004a1c:	b183      	cbz	r3, 8004a40 <_Balloc+0x50>
 8004a1e:	69e3      	ldr	r3, [r4, #28]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a26:	b9b8      	cbnz	r0, 8004a58 <_Balloc+0x68>
 8004a28:	2101      	movs	r1, #1
 8004a2a:	fa01 f605 	lsl.w	r6, r1, r5
 8004a2e:	1d72      	adds	r2, r6, #5
 8004a30:	4620      	mov	r0, r4
 8004a32:	0092      	lsls	r2, r2, #2
 8004a34:	f000 fdac 	bl	8005590 <_calloc_r>
 8004a38:	b160      	cbz	r0, 8004a54 <_Balloc+0x64>
 8004a3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a3e:	e00e      	b.n	8004a5e <_Balloc+0x6e>
 8004a40:	2221      	movs	r2, #33	; 0x21
 8004a42:	2104      	movs	r1, #4
 8004a44:	4620      	mov	r0, r4
 8004a46:	f000 fda3 	bl	8005590 <_calloc_r>
 8004a4a:	69e3      	ldr	r3, [r4, #28]
 8004a4c:	60f0      	str	r0, [r6, #12]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e4      	bne.n	8004a1e <_Balloc+0x2e>
 8004a54:	2000      	movs	r0, #0
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	6802      	ldr	r2, [r0, #0]
 8004a5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004a64:	e7f7      	b.n	8004a56 <_Balloc+0x66>
 8004a66:	bf00      	nop
 8004a68:	08005caf 	.word	0x08005caf
 8004a6c:	08005d2f 	.word	0x08005d2f

08004a70 <_Bfree>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	69c6      	ldr	r6, [r0, #28]
 8004a74:	4605      	mov	r5, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	b976      	cbnz	r6, 8004a98 <_Bfree+0x28>
 8004a7a:	2010      	movs	r0, #16
 8004a7c:	f7ff ff04 	bl	8004888 <malloc>
 8004a80:	4602      	mov	r2, r0
 8004a82:	61e8      	str	r0, [r5, #28]
 8004a84:	b920      	cbnz	r0, 8004a90 <_Bfree+0x20>
 8004a86:	218f      	movs	r1, #143	; 0x8f
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <_Bfree+0x3c>)
 8004a8a:	4809      	ldr	r0, [pc, #36]	; (8004ab0 <_Bfree+0x40>)
 8004a8c:	f000 fd62 	bl	8005554 <__assert_func>
 8004a90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a94:	6006      	str	r6, [r0, #0]
 8004a96:	60c6      	str	r6, [r0, #12]
 8004a98:	b13c      	cbz	r4, 8004aaa <_Bfree+0x3a>
 8004a9a:	69eb      	ldr	r3, [r5, #28]
 8004a9c:	6862      	ldr	r2, [r4, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004aa4:	6021      	str	r1, [r4, #0]
 8004aa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
 8004aac:	08005caf 	.word	0x08005caf
 8004ab0:	08005d2f 	.word	0x08005d2f

08004ab4 <__multadd>:
 8004ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab8:	4607      	mov	r7, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	461e      	mov	r6, r3
 8004abe:	2000      	movs	r0, #0
 8004ac0:	690d      	ldr	r5, [r1, #16]
 8004ac2:	f101 0c14 	add.w	ip, r1, #20
 8004ac6:	f8dc 3000 	ldr.w	r3, [ip]
 8004aca:	3001      	adds	r0, #1
 8004acc:	b299      	uxth	r1, r3
 8004ace:	fb02 6101 	mla	r1, r2, r1, r6
 8004ad2:	0c1e      	lsrs	r6, r3, #16
 8004ad4:	0c0b      	lsrs	r3, r1, #16
 8004ad6:	fb02 3306 	mla	r3, r2, r6, r3
 8004ada:	b289      	uxth	r1, r1
 8004adc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ae0:	4285      	cmp	r5, r0
 8004ae2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004ae6:	f84c 1b04 	str.w	r1, [ip], #4
 8004aea:	dcec      	bgt.n	8004ac6 <__multadd+0x12>
 8004aec:	b30e      	cbz	r6, 8004b32 <__multadd+0x7e>
 8004aee:	68a3      	ldr	r3, [r4, #8]
 8004af0:	42ab      	cmp	r3, r5
 8004af2:	dc19      	bgt.n	8004b28 <__multadd+0x74>
 8004af4:	6861      	ldr	r1, [r4, #4]
 8004af6:	4638      	mov	r0, r7
 8004af8:	3101      	adds	r1, #1
 8004afa:	f7ff ff79 	bl	80049f0 <_Balloc>
 8004afe:	4680      	mov	r8, r0
 8004b00:	b928      	cbnz	r0, 8004b0e <__multadd+0x5a>
 8004b02:	4602      	mov	r2, r0
 8004b04:	21ba      	movs	r1, #186	; 0xba
 8004b06:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <__multadd+0x84>)
 8004b08:	480c      	ldr	r0, [pc, #48]	; (8004b3c <__multadd+0x88>)
 8004b0a:	f000 fd23 	bl	8005554 <__assert_func>
 8004b0e:	6922      	ldr	r2, [r4, #16]
 8004b10:	f104 010c 	add.w	r1, r4, #12
 8004b14:	3202      	adds	r2, #2
 8004b16:	0092      	lsls	r2, r2, #2
 8004b18:	300c      	adds	r0, #12
 8004b1a:	f000 fd0d 	bl	8005538 <memcpy>
 8004b1e:	4621      	mov	r1, r4
 8004b20:	4638      	mov	r0, r7
 8004b22:	f7ff ffa5 	bl	8004a70 <_Bfree>
 8004b26:	4644      	mov	r4, r8
 8004b28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b2c:	3501      	adds	r5, #1
 8004b2e:	615e      	str	r6, [r3, #20]
 8004b30:	6125      	str	r5, [r4, #16]
 8004b32:	4620      	mov	r0, r4
 8004b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b38:	08005d1e 	.word	0x08005d1e
 8004b3c:	08005d2f 	.word	0x08005d2f

08004b40 <__hi0bits>:
 8004b40:	0c02      	lsrs	r2, r0, #16
 8004b42:	0412      	lsls	r2, r2, #16
 8004b44:	4603      	mov	r3, r0
 8004b46:	b9ca      	cbnz	r2, 8004b7c <__hi0bits+0x3c>
 8004b48:	0403      	lsls	r3, r0, #16
 8004b4a:	2010      	movs	r0, #16
 8004b4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004b50:	bf04      	itt	eq
 8004b52:	021b      	lsleq	r3, r3, #8
 8004b54:	3008      	addeq	r0, #8
 8004b56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004b5a:	bf04      	itt	eq
 8004b5c:	011b      	lsleq	r3, r3, #4
 8004b5e:	3004      	addeq	r0, #4
 8004b60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004b64:	bf04      	itt	eq
 8004b66:	009b      	lsleq	r3, r3, #2
 8004b68:	3002      	addeq	r0, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	db05      	blt.n	8004b7a <__hi0bits+0x3a>
 8004b6e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004b72:	f100 0001 	add.w	r0, r0, #1
 8004b76:	bf08      	it	eq
 8004b78:	2020      	moveq	r0, #32
 8004b7a:	4770      	bx	lr
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e7e5      	b.n	8004b4c <__hi0bits+0xc>

08004b80 <__lo0bits>:
 8004b80:	6803      	ldr	r3, [r0, #0]
 8004b82:	4602      	mov	r2, r0
 8004b84:	f013 0007 	ands.w	r0, r3, #7
 8004b88:	d00b      	beq.n	8004ba2 <__lo0bits+0x22>
 8004b8a:	07d9      	lsls	r1, r3, #31
 8004b8c:	d421      	bmi.n	8004bd2 <__lo0bits+0x52>
 8004b8e:	0798      	lsls	r0, r3, #30
 8004b90:	bf49      	itett	mi
 8004b92:	085b      	lsrmi	r3, r3, #1
 8004b94:	089b      	lsrpl	r3, r3, #2
 8004b96:	2001      	movmi	r0, #1
 8004b98:	6013      	strmi	r3, [r2, #0]
 8004b9a:	bf5c      	itt	pl
 8004b9c:	2002      	movpl	r0, #2
 8004b9e:	6013      	strpl	r3, [r2, #0]
 8004ba0:	4770      	bx	lr
 8004ba2:	b299      	uxth	r1, r3
 8004ba4:	b909      	cbnz	r1, 8004baa <__lo0bits+0x2a>
 8004ba6:	2010      	movs	r0, #16
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	b2d9      	uxtb	r1, r3
 8004bac:	b909      	cbnz	r1, 8004bb2 <__lo0bits+0x32>
 8004bae:	3008      	adds	r0, #8
 8004bb0:	0a1b      	lsrs	r3, r3, #8
 8004bb2:	0719      	lsls	r1, r3, #28
 8004bb4:	bf04      	itt	eq
 8004bb6:	091b      	lsreq	r3, r3, #4
 8004bb8:	3004      	addeq	r0, #4
 8004bba:	0799      	lsls	r1, r3, #30
 8004bbc:	bf04      	itt	eq
 8004bbe:	089b      	lsreq	r3, r3, #2
 8004bc0:	3002      	addeq	r0, #2
 8004bc2:	07d9      	lsls	r1, r3, #31
 8004bc4:	d403      	bmi.n	8004bce <__lo0bits+0x4e>
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	f100 0001 	add.w	r0, r0, #1
 8004bcc:	d003      	beq.n	8004bd6 <__lo0bits+0x56>
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	4770      	bx	lr
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	4770      	bx	lr
 8004bd6:	2020      	movs	r0, #32
 8004bd8:	4770      	bx	lr
	...

08004bdc <__i2b>:
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	460c      	mov	r4, r1
 8004be0:	2101      	movs	r1, #1
 8004be2:	f7ff ff05 	bl	80049f0 <_Balloc>
 8004be6:	4602      	mov	r2, r0
 8004be8:	b928      	cbnz	r0, 8004bf6 <__i2b+0x1a>
 8004bea:	f240 1145 	movw	r1, #325	; 0x145
 8004bee:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <__i2b+0x24>)
 8004bf0:	4804      	ldr	r0, [pc, #16]	; (8004c04 <__i2b+0x28>)
 8004bf2:	f000 fcaf 	bl	8005554 <__assert_func>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	6144      	str	r4, [r0, #20]
 8004bfa:	6103      	str	r3, [r0, #16]
 8004bfc:	bd10      	pop	{r4, pc}
 8004bfe:	bf00      	nop
 8004c00:	08005d1e 	.word	0x08005d1e
 8004c04:	08005d2f 	.word	0x08005d2f

08004c08 <__multiply>:
 8004c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0c:	4691      	mov	r9, r2
 8004c0e:	690a      	ldr	r2, [r1, #16]
 8004c10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c14:	460c      	mov	r4, r1
 8004c16:	429a      	cmp	r2, r3
 8004c18:	bfbe      	ittt	lt
 8004c1a:	460b      	movlt	r3, r1
 8004c1c:	464c      	movlt	r4, r9
 8004c1e:	4699      	movlt	r9, r3
 8004c20:	6927      	ldr	r7, [r4, #16]
 8004c22:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c26:	68a3      	ldr	r3, [r4, #8]
 8004c28:	6861      	ldr	r1, [r4, #4]
 8004c2a:	eb07 060a 	add.w	r6, r7, sl
 8004c2e:	42b3      	cmp	r3, r6
 8004c30:	b085      	sub	sp, #20
 8004c32:	bfb8      	it	lt
 8004c34:	3101      	addlt	r1, #1
 8004c36:	f7ff fedb 	bl	80049f0 <_Balloc>
 8004c3a:	b930      	cbnz	r0, 8004c4a <__multiply+0x42>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004c42:	4b43      	ldr	r3, [pc, #268]	; (8004d50 <__multiply+0x148>)
 8004c44:	4843      	ldr	r0, [pc, #268]	; (8004d54 <__multiply+0x14c>)
 8004c46:	f000 fc85 	bl	8005554 <__assert_func>
 8004c4a:	f100 0514 	add.w	r5, r0, #20
 8004c4e:	462b      	mov	r3, r5
 8004c50:	2200      	movs	r2, #0
 8004c52:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004c56:	4543      	cmp	r3, r8
 8004c58:	d321      	bcc.n	8004c9e <__multiply+0x96>
 8004c5a:	f104 0314 	add.w	r3, r4, #20
 8004c5e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004c62:	f109 0314 	add.w	r3, r9, #20
 8004c66:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004c6a:	9202      	str	r2, [sp, #8]
 8004c6c:	1b3a      	subs	r2, r7, r4
 8004c6e:	3a15      	subs	r2, #21
 8004c70:	f022 0203 	bic.w	r2, r2, #3
 8004c74:	3204      	adds	r2, #4
 8004c76:	f104 0115 	add.w	r1, r4, #21
 8004c7a:	428f      	cmp	r7, r1
 8004c7c:	bf38      	it	cc
 8004c7e:	2204      	movcc	r2, #4
 8004c80:	9201      	str	r2, [sp, #4]
 8004c82:	9a02      	ldr	r2, [sp, #8]
 8004c84:	9303      	str	r3, [sp, #12]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d80c      	bhi.n	8004ca4 <__multiply+0x9c>
 8004c8a:	2e00      	cmp	r6, #0
 8004c8c:	dd03      	ble.n	8004c96 <__multiply+0x8e>
 8004c8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d05a      	beq.n	8004d4c <__multiply+0x144>
 8004c96:	6106      	str	r6, [r0, #16]
 8004c98:	b005      	add	sp, #20
 8004c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9e:	f843 2b04 	str.w	r2, [r3], #4
 8004ca2:	e7d8      	b.n	8004c56 <__multiply+0x4e>
 8004ca4:	f8b3 a000 	ldrh.w	sl, [r3]
 8004ca8:	f1ba 0f00 	cmp.w	sl, #0
 8004cac:	d023      	beq.n	8004cf6 <__multiply+0xee>
 8004cae:	46a9      	mov	r9, r5
 8004cb0:	f04f 0c00 	mov.w	ip, #0
 8004cb4:	f104 0e14 	add.w	lr, r4, #20
 8004cb8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004cbc:	f8d9 1000 	ldr.w	r1, [r9]
 8004cc0:	fa1f fb82 	uxth.w	fp, r2
 8004cc4:	b289      	uxth	r1, r1
 8004cc6:	fb0a 110b 	mla	r1, sl, fp, r1
 8004cca:	4461      	add	r1, ip
 8004ccc:	f8d9 c000 	ldr.w	ip, [r9]
 8004cd0:	0c12      	lsrs	r2, r2, #16
 8004cd2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004cd6:	fb0a c202 	mla	r2, sl, r2, ip
 8004cda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004cde:	b289      	uxth	r1, r1
 8004ce0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ce4:	4577      	cmp	r7, lr
 8004ce6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004cea:	f849 1b04 	str.w	r1, [r9], #4
 8004cee:	d8e3      	bhi.n	8004cb8 <__multiply+0xb0>
 8004cf0:	9a01      	ldr	r2, [sp, #4]
 8004cf2:	f845 c002 	str.w	ip, [r5, r2]
 8004cf6:	9a03      	ldr	r2, [sp, #12]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004cfe:	f1b9 0f00 	cmp.w	r9, #0
 8004d02:	d021      	beq.n	8004d48 <__multiply+0x140>
 8004d04:	46ae      	mov	lr, r5
 8004d06:	f04f 0a00 	mov.w	sl, #0
 8004d0a:	6829      	ldr	r1, [r5, #0]
 8004d0c:	f104 0c14 	add.w	ip, r4, #20
 8004d10:	f8bc b000 	ldrh.w	fp, [ip]
 8004d14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004d18:	b289      	uxth	r1, r1
 8004d1a:	fb09 220b 	mla	r2, r9, fp, r2
 8004d1e:	4452      	add	r2, sl
 8004d20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d24:	f84e 1b04 	str.w	r1, [lr], #4
 8004d28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004d2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004d30:	f8be 1000 	ldrh.w	r1, [lr]
 8004d34:	4567      	cmp	r7, ip
 8004d36:	fb09 110a 	mla	r1, r9, sl, r1
 8004d3a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004d3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004d42:	d8e5      	bhi.n	8004d10 <__multiply+0x108>
 8004d44:	9a01      	ldr	r2, [sp, #4]
 8004d46:	50a9      	str	r1, [r5, r2]
 8004d48:	3504      	adds	r5, #4
 8004d4a:	e79a      	b.n	8004c82 <__multiply+0x7a>
 8004d4c:	3e01      	subs	r6, #1
 8004d4e:	e79c      	b.n	8004c8a <__multiply+0x82>
 8004d50:	08005d1e 	.word	0x08005d1e
 8004d54:	08005d2f 	.word	0x08005d2f

08004d58 <__pow5mult>:
 8004d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d5c:	4615      	mov	r5, r2
 8004d5e:	f012 0203 	ands.w	r2, r2, #3
 8004d62:	4606      	mov	r6, r0
 8004d64:	460f      	mov	r7, r1
 8004d66:	d007      	beq.n	8004d78 <__pow5mult+0x20>
 8004d68:	4c25      	ldr	r4, [pc, #148]	; (8004e00 <__pow5mult+0xa8>)
 8004d6a:	3a01      	subs	r2, #1
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004d72:	f7ff fe9f 	bl	8004ab4 <__multadd>
 8004d76:	4607      	mov	r7, r0
 8004d78:	10ad      	asrs	r5, r5, #2
 8004d7a:	d03d      	beq.n	8004df8 <__pow5mult+0xa0>
 8004d7c:	69f4      	ldr	r4, [r6, #28]
 8004d7e:	b97c      	cbnz	r4, 8004da0 <__pow5mult+0x48>
 8004d80:	2010      	movs	r0, #16
 8004d82:	f7ff fd81 	bl	8004888 <malloc>
 8004d86:	4602      	mov	r2, r0
 8004d88:	61f0      	str	r0, [r6, #28]
 8004d8a:	b928      	cbnz	r0, 8004d98 <__pow5mult+0x40>
 8004d8c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004d90:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <__pow5mult+0xac>)
 8004d92:	481d      	ldr	r0, [pc, #116]	; (8004e08 <__pow5mult+0xb0>)
 8004d94:	f000 fbde 	bl	8005554 <__assert_func>
 8004d98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d9c:	6004      	str	r4, [r0, #0]
 8004d9e:	60c4      	str	r4, [r0, #12]
 8004da0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004da4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004da8:	b94c      	cbnz	r4, 8004dbe <__pow5mult+0x66>
 8004daa:	f240 2171 	movw	r1, #625	; 0x271
 8004dae:	4630      	mov	r0, r6
 8004db0:	f7ff ff14 	bl	8004bdc <__i2b>
 8004db4:	2300      	movs	r3, #0
 8004db6:	4604      	mov	r4, r0
 8004db8:	f8c8 0008 	str.w	r0, [r8, #8]
 8004dbc:	6003      	str	r3, [r0, #0]
 8004dbe:	f04f 0900 	mov.w	r9, #0
 8004dc2:	07eb      	lsls	r3, r5, #31
 8004dc4:	d50a      	bpl.n	8004ddc <__pow5mult+0x84>
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	4622      	mov	r2, r4
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f7ff ff1c 	bl	8004c08 <__multiply>
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f7ff fe4b 	bl	8004a70 <_Bfree>
 8004dda:	4647      	mov	r7, r8
 8004ddc:	106d      	asrs	r5, r5, #1
 8004dde:	d00b      	beq.n	8004df8 <__pow5mult+0xa0>
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	b938      	cbnz	r0, 8004df4 <__pow5mult+0x9c>
 8004de4:	4622      	mov	r2, r4
 8004de6:	4621      	mov	r1, r4
 8004de8:	4630      	mov	r0, r6
 8004dea:	f7ff ff0d 	bl	8004c08 <__multiply>
 8004dee:	6020      	str	r0, [r4, #0]
 8004df0:	f8c0 9000 	str.w	r9, [r0]
 8004df4:	4604      	mov	r4, r0
 8004df6:	e7e4      	b.n	8004dc2 <__pow5mult+0x6a>
 8004df8:	4638      	mov	r0, r7
 8004dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dfe:	bf00      	nop
 8004e00:	08005e78 	.word	0x08005e78
 8004e04:	08005caf 	.word	0x08005caf
 8004e08:	08005d2f 	.word	0x08005d2f

08004e0c <__lshift>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	460c      	mov	r4, r1
 8004e12:	4607      	mov	r7, r0
 8004e14:	4691      	mov	r9, r2
 8004e16:	6923      	ldr	r3, [r4, #16]
 8004e18:	6849      	ldr	r1, [r1, #4]
 8004e1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e1e:	68a3      	ldr	r3, [r4, #8]
 8004e20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e24:	f108 0601 	add.w	r6, r8, #1
 8004e28:	42b3      	cmp	r3, r6
 8004e2a:	db0b      	blt.n	8004e44 <__lshift+0x38>
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7ff fddf 	bl	80049f0 <_Balloc>
 8004e32:	4605      	mov	r5, r0
 8004e34:	b948      	cbnz	r0, 8004e4a <__lshift+0x3e>
 8004e36:	4602      	mov	r2, r0
 8004e38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004e3c:	4b27      	ldr	r3, [pc, #156]	; (8004edc <__lshift+0xd0>)
 8004e3e:	4828      	ldr	r0, [pc, #160]	; (8004ee0 <__lshift+0xd4>)
 8004e40:	f000 fb88 	bl	8005554 <__assert_func>
 8004e44:	3101      	adds	r1, #1
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	e7ee      	b.n	8004e28 <__lshift+0x1c>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f100 0114 	add.w	r1, r0, #20
 8004e50:	f100 0210 	add.w	r2, r0, #16
 8004e54:	4618      	mov	r0, r3
 8004e56:	4553      	cmp	r3, sl
 8004e58:	db33      	blt.n	8004ec2 <__lshift+0xb6>
 8004e5a:	6920      	ldr	r0, [r4, #16]
 8004e5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e60:	f104 0314 	add.w	r3, r4, #20
 8004e64:	f019 091f 	ands.w	r9, r9, #31
 8004e68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004e6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004e70:	d02b      	beq.n	8004eca <__lshift+0xbe>
 8004e72:	468a      	mov	sl, r1
 8004e74:	2200      	movs	r2, #0
 8004e76:	f1c9 0e20 	rsb	lr, r9, #32
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	fa00 f009 	lsl.w	r0, r0, r9
 8004e80:	4310      	orrs	r0, r2
 8004e82:	f84a 0b04 	str.w	r0, [sl], #4
 8004e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e8a:	459c      	cmp	ip, r3
 8004e8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004e90:	d8f3      	bhi.n	8004e7a <__lshift+0x6e>
 8004e92:	ebac 0304 	sub.w	r3, ip, r4
 8004e96:	3b15      	subs	r3, #21
 8004e98:	f023 0303 	bic.w	r3, r3, #3
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	f104 0015 	add.w	r0, r4, #21
 8004ea2:	4584      	cmp	ip, r0
 8004ea4:	bf38      	it	cc
 8004ea6:	2304      	movcc	r3, #4
 8004ea8:	50ca      	str	r2, [r1, r3]
 8004eaa:	b10a      	cbz	r2, 8004eb0 <__lshift+0xa4>
 8004eac:	f108 0602 	add.w	r6, r8, #2
 8004eb0:	3e01      	subs	r6, #1
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	612e      	str	r6, [r5, #16]
 8004eb8:	f7ff fdda 	bl	8004a70 <_Bfree>
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec2:	f842 0f04 	str.w	r0, [r2, #4]!
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	e7c5      	b.n	8004e56 <__lshift+0x4a>
 8004eca:	3904      	subs	r1, #4
 8004ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ed0:	459c      	cmp	ip, r3
 8004ed2:	f841 2f04 	str.w	r2, [r1, #4]!
 8004ed6:	d8f9      	bhi.n	8004ecc <__lshift+0xc0>
 8004ed8:	e7ea      	b.n	8004eb0 <__lshift+0xa4>
 8004eda:	bf00      	nop
 8004edc:	08005d1e 	.word	0x08005d1e
 8004ee0:	08005d2f 	.word	0x08005d2f

08004ee4 <__mcmp>:
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	690a      	ldr	r2, [r1, #16]
 8004ee8:	6900      	ldr	r0, [r0, #16]
 8004eea:	b530      	push	{r4, r5, lr}
 8004eec:	1a80      	subs	r0, r0, r2
 8004eee:	d10d      	bne.n	8004f0c <__mcmp+0x28>
 8004ef0:	3314      	adds	r3, #20
 8004ef2:	3114      	adds	r1, #20
 8004ef4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004ef8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004efc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f04:	4295      	cmp	r5, r2
 8004f06:	d002      	beq.n	8004f0e <__mcmp+0x2a>
 8004f08:	d304      	bcc.n	8004f14 <__mcmp+0x30>
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	bd30      	pop	{r4, r5, pc}
 8004f0e:	42a3      	cmp	r3, r4
 8004f10:	d3f4      	bcc.n	8004efc <__mcmp+0x18>
 8004f12:	e7fb      	b.n	8004f0c <__mcmp+0x28>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	e7f8      	b.n	8004f0c <__mcmp+0x28>
	...

08004f1c <__mdiff>:
 8004f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	460d      	mov	r5, r1
 8004f22:	4607      	mov	r7, r0
 8004f24:	4611      	mov	r1, r2
 8004f26:	4628      	mov	r0, r5
 8004f28:	4614      	mov	r4, r2
 8004f2a:	f7ff ffdb 	bl	8004ee4 <__mcmp>
 8004f2e:	1e06      	subs	r6, r0, #0
 8004f30:	d111      	bne.n	8004f56 <__mdiff+0x3a>
 8004f32:	4631      	mov	r1, r6
 8004f34:	4638      	mov	r0, r7
 8004f36:	f7ff fd5b 	bl	80049f0 <_Balloc>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	b928      	cbnz	r0, 8004f4a <__mdiff+0x2e>
 8004f3e:	f240 2137 	movw	r1, #567	; 0x237
 8004f42:	4b3a      	ldr	r3, [pc, #232]	; (800502c <__mdiff+0x110>)
 8004f44:	483a      	ldr	r0, [pc, #232]	; (8005030 <__mdiff+0x114>)
 8004f46:	f000 fb05 	bl	8005554 <__assert_func>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004f50:	4610      	mov	r0, r2
 8004f52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f56:	bfa4      	itt	ge
 8004f58:	4623      	movge	r3, r4
 8004f5a:	462c      	movge	r4, r5
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	6861      	ldr	r1, [r4, #4]
 8004f60:	bfa6      	itte	ge
 8004f62:	461d      	movge	r5, r3
 8004f64:	2600      	movge	r6, #0
 8004f66:	2601      	movlt	r6, #1
 8004f68:	f7ff fd42 	bl	80049f0 <_Balloc>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	b918      	cbnz	r0, 8004f78 <__mdiff+0x5c>
 8004f70:	f240 2145 	movw	r1, #581	; 0x245
 8004f74:	4b2d      	ldr	r3, [pc, #180]	; (800502c <__mdiff+0x110>)
 8004f76:	e7e5      	b.n	8004f44 <__mdiff+0x28>
 8004f78:	f102 0814 	add.w	r8, r2, #20
 8004f7c:	46c2      	mov	sl, r8
 8004f7e:	f04f 0c00 	mov.w	ip, #0
 8004f82:	6927      	ldr	r7, [r4, #16]
 8004f84:	60c6      	str	r6, [r0, #12]
 8004f86:	692e      	ldr	r6, [r5, #16]
 8004f88:	f104 0014 	add.w	r0, r4, #20
 8004f8c:	f105 0914 	add.w	r9, r5, #20
 8004f90:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004f94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004f98:	3410      	adds	r4, #16
 8004f9a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004f9e:	f859 3b04 	ldr.w	r3, [r9], #4
 8004fa2:	fa1f f18b 	uxth.w	r1, fp
 8004fa6:	4461      	add	r1, ip
 8004fa8:	fa1f fc83 	uxth.w	ip, r3
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	eba1 010c 	sub.w	r1, r1, ip
 8004fb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004fb6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004fba:	b289      	uxth	r1, r1
 8004fbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004fc0:	454e      	cmp	r6, r9
 8004fc2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004fc6:	f84a 1b04 	str.w	r1, [sl], #4
 8004fca:	d8e6      	bhi.n	8004f9a <__mdiff+0x7e>
 8004fcc:	1b73      	subs	r3, r6, r5
 8004fce:	3b15      	subs	r3, #21
 8004fd0:	f023 0303 	bic.w	r3, r3, #3
 8004fd4:	3515      	adds	r5, #21
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	42ae      	cmp	r6, r5
 8004fda:	bf38      	it	cc
 8004fdc:	2304      	movcc	r3, #4
 8004fde:	4418      	add	r0, r3
 8004fe0:	4443      	add	r3, r8
 8004fe2:	461e      	mov	r6, r3
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	4575      	cmp	r5, lr
 8004fe8:	d30e      	bcc.n	8005008 <__mdiff+0xec>
 8004fea:	f10e 0103 	add.w	r1, lr, #3
 8004fee:	1a09      	subs	r1, r1, r0
 8004ff0:	f021 0103 	bic.w	r1, r1, #3
 8004ff4:	3803      	subs	r0, #3
 8004ff6:	4586      	cmp	lr, r0
 8004ff8:	bf38      	it	cc
 8004ffa:	2100      	movcc	r1, #0
 8004ffc:	440b      	add	r3, r1
 8004ffe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005002:	b189      	cbz	r1, 8005028 <__mdiff+0x10c>
 8005004:	6117      	str	r7, [r2, #16]
 8005006:	e7a3      	b.n	8004f50 <__mdiff+0x34>
 8005008:	f855 8b04 	ldr.w	r8, [r5], #4
 800500c:	fa1f f188 	uxth.w	r1, r8
 8005010:	4461      	add	r1, ip
 8005012:	140c      	asrs	r4, r1, #16
 8005014:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005018:	b289      	uxth	r1, r1
 800501a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800501e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005022:	f846 1b04 	str.w	r1, [r6], #4
 8005026:	e7de      	b.n	8004fe6 <__mdiff+0xca>
 8005028:	3f01      	subs	r7, #1
 800502a:	e7e8      	b.n	8004ffe <__mdiff+0xe2>
 800502c:	08005d1e 	.word	0x08005d1e
 8005030:	08005d2f 	.word	0x08005d2f

08005034 <__d2b>:
 8005034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005036:	2101      	movs	r1, #1
 8005038:	4617      	mov	r7, r2
 800503a:	461c      	mov	r4, r3
 800503c:	9e08      	ldr	r6, [sp, #32]
 800503e:	f7ff fcd7 	bl	80049f0 <_Balloc>
 8005042:	4605      	mov	r5, r0
 8005044:	b930      	cbnz	r0, 8005054 <__d2b+0x20>
 8005046:	4602      	mov	r2, r0
 8005048:	f240 310f 	movw	r1, #783	; 0x30f
 800504c:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <__d2b+0xa4>)
 800504e:	4823      	ldr	r0, [pc, #140]	; (80050dc <__d2b+0xa8>)
 8005050:	f000 fa80 	bl	8005554 <__assert_func>
 8005054:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005058:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800505c:	bb24      	cbnz	r4, 80050a8 <__d2b+0x74>
 800505e:	2f00      	cmp	r7, #0
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	d026      	beq.n	80050b2 <__d2b+0x7e>
 8005064:	4668      	mov	r0, sp
 8005066:	9700      	str	r7, [sp, #0]
 8005068:	f7ff fd8a 	bl	8004b80 <__lo0bits>
 800506c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005070:	b1e8      	cbz	r0, 80050ae <__d2b+0x7a>
 8005072:	f1c0 0320 	rsb	r3, r0, #32
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	430b      	orrs	r3, r1
 800507c:	40c2      	lsrs	r2, r0
 800507e:	616b      	str	r3, [r5, #20]
 8005080:	9201      	str	r2, [sp, #4]
 8005082:	9b01      	ldr	r3, [sp, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	bf14      	ite	ne
 8005088:	2102      	movne	r1, #2
 800508a:	2101      	moveq	r1, #1
 800508c:	61ab      	str	r3, [r5, #24]
 800508e:	6129      	str	r1, [r5, #16]
 8005090:	b1bc      	cbz	r4, 80050c2 <__d2b+0x8e>
 8005092:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005096:	4404      	add	r4, r0
 8005098:	6034      	str	r4, [r6, #0]
 800509a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800509e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a0:	6018      	str	r0, [r3, #0]
 80050a2:	4628      	mov	r0, r5
 80050a4:	b003      	add	sp, #12
 80050a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ac:	e7d7      	b.n	800505e <__d2b+0x2a>
 80050ae:	6169      	str	r1, [r5, #20]
 80050b0:	e7e7      	b.n	8005082 <__d2b+0x4e>
 80050b2:	a801      	add	r0, sp, #4
 80050b4:	f7ff fd64 	bl	8004b80 <__lo0bits>
 80050b8:	9b01      	ldr	r3, [sp, #4]
 80050ba:	2101      	movs	r1, #1
 80050bc:	616b      	str	r3, [r5, #20]
 80050be:	3020      	adds	r0, #32
 80050c0:	e7e5      	b.n	800508e <__d2b+0x5a>
 80050c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80050c6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80050ca:	6030      	str	r0, [r6, #0]
 80050cc:	6918      	ldr	r0, [r3, #16]
 80050ce:	f7ff fd37 	bl	8004b40 <__hi0bits>
 80050d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80050d6:	e7e2      	b.n	800509e <__d2b+0x6a>
 80050d8:	08005d1e 	.word	0x08005d1e
 80050dc:	08005d2f 	.word	0x08005d2f

080050e0 <__ssputs_r>:
 80050e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e4:	461f      	mov	r7, r3
 80050e6:	688e      	ldr	r6, [r1, #8]
 80050e8:	4682      	mov	sl, r0
 80050ea:	42be      	cmp	r6, r7
 80050ec:	460c      	mov	r4, r1
 80050ee:	4690      	mov	r8, r2
 80050f0:	680b      	ldr	r3, [r1, #0]
 80050f2:	d82c      	bhi.n	800514e <__ssputs_r+0x6e>
 80050f4:	898a      	ldrh	r2, [r1, #12]
 80050f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050fa:	d026      	beq.n	800514a <__ssputs_r+0x6a>
 80050fc:	6965      	ldr	r5, [r4, #20]
 80050fe:	6909      	ldr	r1, [r1, #16]
 8005100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005104:	eba3 0901 	sub.w	r9, r3, r1
 8005108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800510c:	1c7b      	adds	r3, r7, #1
 800510e:	444b      	add	r3, r9
 8005110:	106d      	asrs	r5, r5, #1
 8005112:	429d      	cmp	r5, r3
 8005114:	bf38      	it	cc
 8005116:	461d      	movcc	r5, r3
 8005118:	0553      	lsls	r3, r2, #21
 800511a:	d527      	bpl.n	800516c <__ssputs_r+0x8c>
 800511c:	4629      	mov	r1, r5
 800511e:	f7ff fbdb 	bl	80048d8 <_malloc_r>
 8005122:	4606      	mov	r6, r0
 8005124:	b360      	cbz	r0, 8005180 <__ssputs_r+0xa0>
 8005126:	464a      	mov	r2, r9
 8005128:	6921      	ldr	r1, [r4, #16]
 800512a:	f000 fa05 	bl	8005538 <memcpy>
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	6126      	str	r6, [r4, #16]
 800513c:	444e      	add	r6, r9
 800513e:	6026      	str	r6, [r4, #0]
 8005140:	463e      	mov	r6, r7
 8005142:	6165      	str	r5, [r4, #20]
 8005144:	eba5 0509 	sub.w	r5, r5, r9
 8005148:	60a5      	str	r5, [r4, #8]
 800514a:	42be      	cmp	r6, r7
 800514c:	d900      	bls.n	8005150 <__ssputs_r+0x70>
 800514e:	463e      	mov	r6, r7
 8005150:	4632      	mov	r2, r6
 8005152:	4641      	mov	r1, r8
 8005154:	6820      	ldr	r0, [r4, #0]
 8005156:	f000 f9c5 	bl	80054e4 <memmove>
 800515a:	2000      	movs	r0, #0
 800515c:	68a3      	ldr	r3, [r4, #8]
 800515e:	1b9b      	subs	r3, r3, r6
 8005160:	60a3      	str	r3, [r4, #8]
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	4433      	add	r3, r6
 8005166:	6023      	str	r3, [r4, #0]
 8005168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800516c:	462a      	mov	r2, r5
 800516e:	f000 fa35 	bl	80055dc <_realloc_r>
 8005172:	4606      	mov	r6, r0
 8005174:	2800      	cmp	r0, #0
 8005176:	d1e0      	bne.n	800513a <__ssputs_r+0x5a>
 8005178:	4650      	mov	r0, sl
 800517a:	6921      	ldr	r1, [r4, #16]
 800517c:	f7ff fb3c 	bl	80047f8 <_free_r>
 8005180:	230c      	movs	r3, #12
 8005182:	f8ca 3000 	str.w	r3, [sl]
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005190:	81a3      	strh	r3, [r4, #12]
 8005192:	e7e9      	b.n	8005168 <__ssputs_r+0x88>

08005194 <_svfiprintf_r>:
 8005194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005198:	4698      	mov	r8, r3
 800519a:	898b      	ldrh	r3, [r1, #12]
 800519c:	4607      	mov	r7, r0
 800519e:	061b      	lsls	r3, r3, #24
 80051a0:	460d      	mov	r5, r1
 80051a2:	4614      	mov	r4, r2
 80051a4:	b09d      	sub	sp, #116	; 0x74
 80051a6:	d50e      	bpl.n	80051c6 <_svfiprintf_r+0x32>
 80051a8:	690b      	ldr	r3, [r1, #16]
 80051aa:	b963      	cbnz	r3, 80051c6 <_svfiprintf_r+0x32>
 80051ac:	2140      	movs	r1, #64	; 0x40
 80051ae:	f7ff fb93 	bl	80048d8 <_malloc_r>
 80051b2:	6028      	str	r0, [r5, #0]
 80051b4:	6128      	str	r0, [r5, #16]
 80051b6:	b920      	cbnz	r0, 80051c2 <_svfiprintf_r+0x2e>
 80051b8:	230c      	movs	r3, #12
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	e0d0      	b.n	8005364 <_svfiprintf_r+0x1d0>
 80051c2:	2340      	movs	r3, #64	; 0x40
 80051c4:	616b      	str	r3, [r5, #20]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ca:	2320      	movs	r3, #32
 80051cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051d0:	2330      	movs	r3, #48	; 0x30
 80051d2:	f04f 0901 	mov.w	r9, #1
 80051d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051da:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800537c <_svfiprintf_r+0x1e8>
 80051de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051e2:	4623      	mov	r3, r4
 80051e4:	469a      	mov	sl, r3
 80051e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ea:	b10a      	cbz	r2, 80051f0 <_svfiprintf_r+0x5c>
 80051ec:	2a25      	cmp	r2, #37	; 0x25
 80051ee:	d1f9      	bne.n	80051e4 <_svfiprintf_r+0x50>
 80051f0:	ebba 0b04 	subs.w	fp, sl, r4
 80051f4:	d00b      	beq.n	800520e <_svfiprintf_r+0x7a>
 80051f6:	465b      	mov	r3, fp
 80051f8:	4622      	mov	r2, r4
 80051fa:	4629      	mov	r1, r5
 80051fc:	4638      	mov	r0, r7
 80051fe:	f7ff ff6f 	bl	80050e0 <__ssputs_r>
 8005202:	3001      	adds	r0, #1
 8005204:	f000 80a9 	beq.w	800535a <_svfiprintf_r+0x1c6>
 8005208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800520a:	445a      	add	r2, fp
 800520c:	9209      	str	r2, [sp, #36]	; 0x24
 800520e:	f89a 3000 	ldrb.w	r3, [sl]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 80a1 	beq.w	800535a <_svfiprintf_r+0x1c6>
 8005218:	2300      	movs	r3, #0
 800521a:	f04f 32ff 	mov.w	r2, #4294967295
 800521e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005222:	f10a 0a01 	add.w	sl, sl, #1
 8005226:	9304      	str	r3, [sp, #16]
 8005228:	9307      	str	r3, [sp, #28]
 800522a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800522e:	931a      	str	r3, [sp, #104]	; 0x68
 8005230:	4654      	mov	r4, sl
 8005232:	2205      	movs	r2, #5
 8005234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005238:	4850      	ldr	r0, [pc, #320]	; (800537c <_svfiprintf_r+0x1e8>)
 800523a:	f7fe fc61 	bl	8003b00 <memchr>
 800523e:	9a04      	ldr	r2, [sp, #16]
 8005240:	b9d8      	cbnz	r0, 800527a <_svfiprintf_r+0xe6>
 8005242:	06d0      	lsls	r0, r2, #27
 8005244:	bf44      	itt	mi
 8005246:	2320      	movmi	r3, #32
 8005248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800524c:	0711      	lsls	r1, r2, #28
 800524e:	bf44      	itt	mi
 8005250:	232b      	movmi	r3, #43	; 0x2b
 8005252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005256:	f89a 3000 	ldrb.w	r3, [sl]
 800525a:	2b2a      	cmp	r3, #42	; 0x2a
 800525c:	d015      	beq.n	800528a <_svfiprintf_r+0xf6>
 800525e:	4654      	mov	r4, sl
 8005260:	2000      	movs	r0, #0
 8005262:	f04f 0c0a 	mov.w	ip, #10
 8005266:	9a07      	ldr	r2, [sp, #28]
 8005268:	4621      	mov	r1, r4
 800526a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800526e:	3b30      	subs	r3, #48	; 0x30
 8005270:	2b09      	cmp	r3, #9
 8005272:	d94d      	bls.n	8005310 <_svfiprintf_r+0x17c>
 8005274:	b1b0      	cbz	r0, 80052a4 <_svfiprintf_r+0x110>
 8005276:	9207      	str	r2, [sp, #28]
 8005278:	e014      	b.n	80052a4 <_svfiprintf_r+0x110>
 800527a:	eba0 0308 	sub.w	r3, r0, r8
 800527e:	fa09 f303 	lsl.w	r3, r9, r3
 8005282:	4313      	orrs	r3, r2
 8005284:	46a2      	mov	sl, r4
 8005286:	9304      	str	r3, [sp, #16]
 8005288:	e7d2      	b.n	8005230 <_svfiprintf_r+0x9c>
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	1d19      	adds	r1, r3, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	9103      	str	r1, [sp, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	bfbb      	ittet	lt
 8005296:	425b      	neglt	r3, r3
 8005298:	f042 0202 	orrlt.w	r2, r2, #2
 800529c:	9307      	strge	r3, [sp, #28]
 800529e:	9307      	strlt	r3, [sp, #28]
 80052a0:	bfb8      	it	lt
 80052a2:	9204      	strlt	r2, [sp, #16]
 80052a4:	7823      	ldrb	r3, [r4, #0]
 80052a6:	2b2e      	cmp	r3, #46	; 0x2e
 80052a8:	d10c      	bne.n	80052c4 <_svfiprintf_r+0x130>
 80052aa:	7863      	ldrb	r3, [r4, #1]
 80052ac:	2b2a      	cmp	r3, #42	; 0x2a
 80052ae:	d134      	bne.n	800531a <_svfiprintf_r+0x186>
 80052b0:	9b03      	ldr	r3, [sp, #12]
 80052b2:	3402      	adds	r4, #2
 80052b4:	1d1a      	adds	r2, r3, #4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	9203      	str	r2, [sp, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	bfb8      	it	lt
 80052be:	f04f 33ff 	movlt.w	r3, #4294967295
 80052c2:	9305      	str	r3, [sp, #20]
 80052c4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005380 <_svfiprintf_r+0x1ec>
 80052c8:	2203      	movs	r2, #3
 80052ca:	4650      	mov	r0, sl
 80052cc:	7821      	ldrb	r1, [r4, #0]
 80052ce:	f7fe fc17 	bl	8003b00 <memchr>
 80052d2:	b138      	cbz	r0, 80052e4 <_svfiprintf_r+0x150>
 80052d4:	2240      	movs	r2, #64	; 0x40
 80052d6:	9b04      	ldr	r3, [sp, #16]
 80052d8:	eba0 000a 	sub.w	r0, r0, sl
 80052dc:	4082      	lsls	r2, r0
 80052de:	4313      	orrs	r3, r2
 80052e0:	3401      	adds	r4, #1
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e8:	2206      	movs	r2, #6
 80052ea:	4826      	ldr	r0, [pc, #152]	; (8005384 <_svfiprintf_r+0x1f0>)
 80052ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052f0:	f7fe fc06 	bl	8003b00 <memchr>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d038      	beq.n	800536a <_svfiprintf_r+0x1d6>
 80052f8:	4b23      	ldr	r3, [pc, #140]	; (8005388 <_svfiprintf_r+0x1f4>)
 80052fa:	bb1b      	cbnz	r3, 8005344 <_svfiprintf_r+0x1b0>
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	3307      	adds	r3, #7
 8005300:	f023 0307 	bic.w	r3, r3, #7
 8005304:	3308      	adds	r3, #8
 8005306:	9303      	str	r3, [sp, #12]
 8005308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530a:	4433      	add	r3, r6
 800530c:	9309      	str	r3, [sp, #36]	; 0x24
 800530e:	e768      	b.n	80051e2 <_svfiprintf_r+0x4e>
 8005310:	460c      	mov	r4, r1
 8005312:	2001      	movs	r0, #1
 8005314:	fb0c 3202 	mla	r2, ip, r2, r3
 8005318:	e7a6      	b.n	8005268 <_svfiprintf_r+0xd4>
 800531a:	2300      	movs	r3, #0
 800531c:	f04f 0c0a 	mov.w	ip, #10
 8005320:	4619      	mov	r1, r3
 8005322:	3401      	adds	r4, #1
 8005324:	9305      	str	r3, [sp, #20]
 8005326:	4620      	mov	r0, r4
 8005328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800532c:	3a30      	subs	r2, #48	; 0x30
 800532e:	2a09      	cmp	r2, #9
 8005330:	d903      	bls.n	800533a <_svfiprintf_r+0x1a6>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0c6      	beq.n	80052c4 <_svfiprintf_r+0x130>
 8005336:	9105      	str	r1, [sp, #20]
 8005338:	e7c4      	b.n	80052c4 <_svfiprintf_r+0x130>
 800533a:	4604      	mov	r4, r0
 800533c:	2301      	movs	r3, #1
 800533e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005342:	e7f0      	b.n	8005326 <_svfiprintf_r+0x192>
 8005344:	ab03      	add	r3, sp, #12
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	462a      	mov	r2, r5
 800534a:	4638      	mov	r0, r7
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <_svfiprintf_r+0x1f8>)
 800534e:	a904      	add	r1, sp, #16
 8005350:	f7fd fe3c 	bl	8002fcc <_printf_float>
 8005354:	1c42      	adds	r2, r0, #1
 8005356:	4606      	mov	r6, r0
 8005358:	d1d6      	bne.n	8005308 <_svfiprintf_r+0x174>
 800535a:	89ab      	ldrh	r3, [r5, #12]
 800535c:	065b      	lsls	r3, r3, #25
 800535e:	f53f af2d 	bmi.w	80051bc <_svfiprintf_r+0x28>
 8005362:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005364:	b01d      	add	sp, #116	; 0x74
 8005366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536a:	ab03      	add	r3, sp, #12
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	462a      	mov	r2, r5
 8005370:	4638      	mov	r0, r7
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <_svfiprintf_r+0x1f8>)
 8005374:	a904      	add	r1, sp, #16
 8005376:	f7fe f8c9 	bl	800350c <_printf_i>
 800537a:	e7eb      	b.n	8005354 <_svfiprintf_r+0x1c0>
 800537c:	08005e84 	.word	0x08005e84
 8005380:	08005e8a 	.word	0x08005e8a
 8005384:	08005e8e 	.word	0x08005e8e
 8005388:	08002fcd 	.word	0x08002fcd
 800538c:	080050e1 	.word	0x080050e1

08005390 <__sflush_r>:
 8005390:	898a      	ldrh	r2, [r1, #12]
 8005392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005394:	4605      	mov	r5, r0
 8005396:	0710      	lsls	r0, r2, #28
 8005398:	460c      	mov	r4, r1
 800539a:	d457      	bmi.n	800544c <__sflush_r+0xbc>
 800539c:	684b      	ldr	r3, [r1, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	dc04      	bgt.n	80053ac <__sflush_r+0x1c>
 80053a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	dc01      	bgt.n	80053ac <__sflush_r+0x1c>
 80053a8:	2000      	movs	r0, #0
 80053aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053ae:	2e00      	cmp	r6, #0
 80053b0:	d0fa      	beq.n	80053a8 <__sflush_r+0x18>
 80053b2:	2300      	movs	r3, #0
 80053b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053b8:	682f      	ldr	r7, [r5, #0]
 80053ba:	6a21      	ldr	r1, [r4, #32]
 80053bc:	602b      	str	r3, [r5, #0]
 80053be:	d032      	beq.n	8005426 <__sflush_r+0x96>
 80053c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	075a      	lsls	r2, r3, #29
 80053c6:	d505      	bpl.n	80053d4 <__sflush_r+0x44>
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	1ac0      	subs	r0, r0, r3
 80053cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053ce:	b10b      	cbz	r3, 80053d4 <__sflush_r+0x44>
 80053d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053d2:	1ac0      	subs	r0, r0, r3
 80053d4:	2300      	movs	r3, #0
 80053d6:	4602      	mov	r2, r0
 80053d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053da:	4628      	mov	r0, r5
 80053dc:	6a21      	ldr	r1, [r4, #32]
 80053de:	47b0      	blx	r6
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	d106      	bne.n	80053f4 <__sflush_r+0x64>
 80053e6:	6829      	ldr	r1, [r5, #0]
 80053e8:	291d      	cmp	r1, #29
 80053ea:	d82b      	bhi.n	8005444 <__sflush_r+0xb4>
 80053ec:	4a28      	ldr	r2, [pc, #160]	; (8005490 <__sflush_r+0x100>)
 80053ee:	410a      	asrs	r2, r1
 80053f0:	07d6      	lsls	r6, r2, #31
 80053f2:	d427      	bmi.n	8005444 <__sflush_r+0xb4>
 80053f4:	2200      	movs	r2, #0
 80053f6:	6062      	str	r2, [r4, #4]
 80053f8:	6922      	ldr	r2, [r4, #16]
 80053fa:	04d9      	lsls	r1, r3, #19
 80053fc:	6022      	str	r2, [r4, #0]
 80053fe:	d504      	bpl.n	800540a <__sflush_r+0x7a>
 8005400:	1c42      	adds	r2, r0, #1
 8005402:	d101      	bne.n	8005408 <__sflush_r+0x78>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b903      	cbnz	r3, 800540a <__sflush_r+0x7a>
 8005408:	6560      	str	r0, [r4, #84]	; 0x54
 800540a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800540c:	602f      	str	r7, [r5, #0]
 800540e:	2900      	cmp	r1, #0
 8005410:	d0ca      	beq.n	80053a8 <__sflush_r+0x18>
 8005412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005416:	4299      	cmp	r1, r3
 8005418:	d002      	beq.n	8005420 <__sflush_r+0x90>
 800541a:	4628      	mov	r0, r5
 800541c:	f7ff f9ec 	bl	80047f8 <_free_r>
 8005420:	2000      	movs	r0, #0
 8005422:	6360      	str	r0, [r4, #52]	; 0x34
 8005424:	e7c1      	b.n	80053aa <__sflush_r+0x1a>
 8005426:	2301      	movs	r3, #1
 8005428:	4628      	mov	r0, r5
 800542a:	47b0      	blx	r6
 800542c:	1c41      	adds	r1, r0, #1
 800542e:	d1c8      	bne.n	80053c2 <__sflush_r+0x32>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0c5      	beq.n	80053c2 <__sflush_r+0x32>
 8005436:	2b1d      	cmp	r3, #29
 8005438:	d001      	beq.n	800543e <__sflush_r+0xae>
 800543a:	2b16      	cmp	r3, #22
 800543c:	d101      	bne.n	8005442 <__sflush_r+0xb2>
 800543e:	602f      	str	r7, [r5, #0]
 8005440:	e7b2      	b.n	80053a8 <__sflush_r+0x18>
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	e7ae      	b.n	80053aa <__sflush_r+0x1a>
 800544c:	690f      	ldr	r7, [r1, #16]
 800544e:	2f00      	cmp	r7, #0
 8005450:	d0aa      	beq.n	80053a8 <__sflush_r+0x18>
 8005452:	0793      	lsls	r3, r2, #30
 8005454:	bf18      	it	ne
 8005456:	2300      	movne	r3, #0
 8005458:	680e      	ldr	r6, [r1, #0]
 800545a:	bf08      	it	eq
 800545c:	694b      	ldreq	r3, [r1, #20]
 800545e:	1bf6      	subs	r6, r6, r7
 8005460:	600f      	str	r7, [r1, #0]
 8005462:	608b      	str	r3, [r1, #8]
 8005464:	2e00      	cmp	r6, #0
 8005466:	dd9f      	ble.n	80053a8 <__sflush_r+0x18>
 8005468:	4633      	mov	r3, r6
 800546a:	463a      	mov	r2, r7
 800546c:	4628      	mov	r0, r5
 800546e:	6a21      	ldr	r1, [r4, #32]
 8005470:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005474:	47e0      	blx	ip
 8005476:	2800      	cmp	r0, #0
 8005478:	dc06      	bgt.n	8005488 <__sflush_r+0xf8>
 800547a:	89a3      	ldrh	r3, [r4, #12]
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005484:	81a3      	strh	r3, [r4, #12]
 8005486:	e790      	b.n	80053aa <__sflush_r+0x1a>
 8005488:	4407      	add	r7, r0
 800548a:	1a36      	subs	r6, r6, r0
 800548c:	e7ea      	b.n	8005464 <__sflush_r+0xd4>
 800548e:	bf00      	nop
 8005490:	dfbffffe 	.word	0xdfbffffe

08005494 <_fflush_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	690b      	ldr	r3, [r1, #16]
 8005498:	4605      	mov	r5, r0
 800549a:	460c      	mov	r4, r1
 800549c:	b913      	cbnz	r3, 80054a4 <_fflush_r+0x10>
 800549e:	2500      	movs	r5, #0
 80054a0:	4628      	mov	r0, r5
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	b118      	cbz	r0, 80054ae <_fflush_r+0x1a>
 80054a6:	6a03      	ldr	r3, [r0, #32]
 80054a8:	b90b      	cbnz	r3, 80054ae <_fflush_r+0x1a>
 80054aa:	f7fe f9cb 	bl	8003844 <__sinit>
 80054ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f3      	beq.n	800549e <_fflush_r+0xa>
 80054b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054b8:	07d0      	lsls	r0, r2, #31
 80054ba:	d404      	bmi.n	80054c6 <_fflush_r+0x32>
 80054bc:	0599      	lsls	r1, r3, #22
 80054be:	d402      	bmi.n	80054c6 <_fflush_r+0x32>
 80054c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054c2:	f7fe fb1b 	bl	8003afc <__retarget_lock_acquire_recursive>
 80054c6:	4628      	mov	r0, r5
 80054c8:	4621      	mov	r1, r4
 80054ca:	f7ff ff61 	bl	8005390 <__sflush_r>
 80054ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054d0:	4605      	mov	r5, r0
 80054d2:	07da      	lsls	r2, r3, #31
 80054d4:	d4e4      	bmi.n	80054a0 <_fflush_r+0xc>
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	059b      	lsls	r3, r3, #22
 80054da:	d4e1      	bmi.n	80054a0 <_fflush_r+0xc>
 80054dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054de:	f7fe fb0e 	bl	8003afe <__retarget_lock_release_recursive>
 80054e2:	e7dd      	b.n	80054a0 <_fflush_r+0xc>

080054e4 <memmove>:
 80054e4:	4288      	cmp	r0, r1
 80054e6:	b510      	push	{r4, lr}
 80054e8:	eb01 0402 	add.w	r4, r1, r2
 80054ec:	d902      	bls.n	80054f4 <memmove+0x10>
 80054ee:	4284      	cmp	r4, r0
 80054f0:	4623      	mov	r3, r4
 80054f2:	d807      	bhi.n	8005504 <memmove+0x20>
 80054f4:	1e43      	subs	r3, r0, #1
 80054f6:	42a1      	cmp	r1, r4
 80054f8:	d008      	beq.n	800550c <memmove+0x28>
 80054fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005502:	e7f8      	b.n	80054f6 <memmove+0x12>
 8005504:	4601      	mov	r1, r0
 8005506:	4402      	add	r2, r0
 8005508:	428a      	cmp	r2, r1
 800550a:	d100      	bne.n	800550e <memmove+0x2a>
 800550c:	bd10      	pop	{r4, pc}
 800550e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005516:	e7f7      	b.n	8005508 <memmove+0x24>

08005518 <_sbrk_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	2300      	movs	r3, #0
 800551c:	4d05      	ldr	r5, [pc, #20]	; (8005534 <_sbrk_r+0x1c>)
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb fe9a 	bl	800125c <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_sbrk_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_sbrk_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	20000470 	.word	0x20000470

08005538 <memcpy>:
 8005538:	440a      	add	r2, r1
 800553a:	4291      	cmp	r1, r2
 800553c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005540:	d100      	bne.n	8005544 <memcpy+0xc>
 8005542:	4770      	bx	lr
 8005544:	b510      	push	{r4, lr}
 8005546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554a:	4291      	cmp	r1, r2
 800554c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005550:	d1f9      	bne.n	8005546 <memcpy+0xe>
 8005552:	bd10      	pop	{r4, pc}

08005554 <__assert_func>:
 8005554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005556:	4614      	mov	r4, r2
 8005558:	461a      	mov	r2, r3
 800555a:	4b09      	ldr	r3, [pc, #36]	; (8005580 <__assert_func+0x2c>)
 800555c:	4605      	mov	r5, r0
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68d8      	ldr	r0, [r3, #12]
 8005562:	b14c      	cbz	r4, 8005578 <__assert_func+0x24>
 8005564:	4b07      	ldr	r3, [pc, #28]	; (8005584 <__assert_func+0x30>)
 8005566:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800556a:	9100      	str	r1, [sp, #0]
 800556c:	462b      	mov	r3, r5
 800556e:	4906      	ldr	r1, [pc, #24]	; (8005588 <__assert_func+0x34>)
 8005570:	f000 f870 	bl	8005654 <fiprintf>
 8005574:	f000 f880 	bl	8005678 <abort>
 8005578:	4b04      	ldr	r3, [pc, #16]	; (800558c <__assert_func+0x38>)
 800557a:	461c      	mov	r4, r3
 800557c:	e7f3      	b.n	8005566 <__assert_func+0x12>
 800557e:	bf00      	nop
 8005580:	20000064 	.word	0x20000064
 8005584:	08005e9f 	.word	0x08005e9f
 8005588:	08005eac 	.word	0x08005eac
 800558c:	08005c21 	.word	0x08005c21

08005590 <_calloc_r>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	fba1 5402 	umull	r5, r4, r1, r2
 8005596:	b934      	cbnz	r4, 80055a6 <_calloc_r+0x16>
 8005598:	4629      	mov	r1, r5
 800559a:	f7ff f99d 	bl	80048d8 <_malloc_r>
 800559e:	4606      	mov	r6, r0
 80055a0:	b928      	cbnz	r0, 80055ae <_calloc_r+0x1e>
 80055a2:	4630      	mov	r0, r6
 80055a4:	bd70      	pop	{r4, r5, r6, pc}
 80055a6:	220c      	movs	r2, #12
 80055a8:	2600      	movs	r6, #0
 80055aa:	6002      	str	r2, [r0, #0]
 80055ac:	e7f9      	b.n	80055a2 <_calloc_r+0x12>
 80055ae:	462a      	mov	r2, r5
 80055b0:	4621      	mov	r1, r4
 80055b2:	f7fe fa14 	bl	80039de <memset>
 80055b6:	e7f4      	b.n	80055a2 <_calloc_r+0x12>

080055b8 <__ascii_mbtowc>:
 80055b8:	b082      	sub	sp, #8
 80055ba:	b901      	cbnz	r1, 80055be <__ascii_mbtowc+0x6>
 80055bc:	a901      	add	r1, sp, #4
 80055be:	b142      	cbz	r2, 80055d2 <__ascii_mbtowc+0x1a>
 80055c0:	b14b      	cbz	r3, 80055d6 <__ascii_mbtowc+0x1e>
 80055c2:	7813      	ldrb	r3, [r2, #0]
 80055c4:	600b      	str	r3, [r1, #0]
 80055c6:	7812      	ldrb	r2, [r2, #0]
 80055c8:	1e10      	subs	r0, r2, #0
 80055ca:	bf18      	it	ne
 80055cc:	2001      	movne	r0, #1
 80055ce:	b002      	add	sp, #8
 80055d0:	4770      	bx	lr
 80055d2:	4610      	mov	r0, r2
 80055d4:	e7fb      	b.n	80055ce <__ascii_mbtowc+0x16>
 80055d6:	f06f 0001 	mvn.w	r0, #1
 80055da:	e7f8      	b.n	80055ce <__ascii_mbtowc+0x16>

080055dc <_realloc_r>:
 80055dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e0:	4680      	mov	r8, r0
 80055e2:	4614      	mov	r4, r2
 80055e4:	460e      	mov	r6, r1
 80055e6:	b921      	cbnz	r1, 80055f2 <_realloc_r+0x16>
 80055e8:	4611      	mov	r1, r2
 80055ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ee:	f7ff b973 	b.w	80048d8 <_malloc_r>
 80055f2:	b92a      	cbnz	r2, 8005600 <_realloc_r+0x24>
 80055f4:	f7ff f900 	bl	80047f8 <_free_r>
 80055f8:	4625      	mov	r5, r4
 80055fa:	4628      	mov	r0, r5
 80055fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005600:	f000 f841 	bl	8005686 <_malloc_usable_size_r>
 8005604:	4284      	cmp	r4, r0
 8005606:	4607      	mov	r7, r0
 8005608:	d802      	bhi.n	8005610 <_realloc_r+0x34>
 800560a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800560e:	d812      	bhi.n	8005636 <_realloc_r+0x5a>
 8005610:	4621      	mov	r1, r4
 8005612:	4640      	mov	r0, r8
 8005614:	f7ff f960 	bl	80048d8 <_malloc_r>
 8005618:	4605      	mov	r5, r0
 800561a:	2800      	cmp	r0, #0
 800561c:	d0ed      	beq.n	80055fa <_realloc_r+0x1e>
 800561e:	42bc      	cmp	r4, r7
 8005620:	4622      	mov	r2, r4
 8005622:	4631      	mov	r1, r6
 8005624:	bf28      	it	cs
 8005626:	463a      	movcs	r2, r7
 8005628:	f7ff ff86 	bl	8005538 <memcpy>
 800562c:	4631      	mov	r1, r6
 800562e:	4640      	mov	r0, r8
 8005630:	f7ff f8e2 	bl	80047f8 <_free_r>
 8005634:	e7e1      	b.n	80055fa <_realloc_r+0x1e>
 8005636:	4635      	mov	r5, r6
 8005638:	e7df      	b.n	80055fa <_realloc_r+0x1e>

0800563a <__ascii_wctomb>:
 800563a:	4603      	mov	r3, r0
 800563c:	4608      	mov	r0, r1
 800563e:	b141      	cbz	r1, 8005652 <__ascii_wctomb+0x18>
 8005640:	2aff      	cmp	r2, #255	; 0xff
 8005642:	d904      	bls.n	800564e <__ascii_wctomb+0x14>
 8005644:	228a      	movs	r2, #138	; 0x8a
 8005646:	f04f 30ff 	mov.w	r0, #4294967295
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	4770      	bx	lr
 800564e:	2001      	movs	r0, #1
 8005650:	700a      	strb	r2, [r1, #0]
 8005652:	4770      	bx	lr

08005654 <fiprintf>:
 8005654:	b40e      	push	{r1, r2, r3}
 8005656:	b503      	push	{r0, r1, lr}
 8005658:	4601      	mov	r1, r0
 800565a:	ab03      	add	r3, sp, #12
 800565c:	4805      	ldr	r0, [pc, #20]	; (8005674 <fiprintf+0x20>)
 800565e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005662:	6800      	ldr	r0, [r0, #0]
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	f000 f83d 	bl	80056e4 <_vfiprintf_r>
 800566a:	b002      	add	sp, #8
 800566c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005670:	b003      	add	sp, #12
 8005672:	4770      	bx	lr
 8005674:	20000064 	.word	0x20000064

08005678 <abort>:
 8005678:	2006      	movs	r0, #6
 800567a:	b508      	push	{r3, lr}
 800567c:	f000 fa0a 	bl	8005a94 <raise>
 8005680:	2001      	movs	r0, #1
 8005682:	f7fb fdbd 	bl	8001200 <_exit>

08005686 <_malloc_usable_size_r>:
 8005686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568a:	1f18      	subs	r0, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	bfbc      	itt	lt
 8005690:	580b      	ldrlt	r3, [r1, r0]
 8005692:	18c0      	addlt	r0, r0, r3
 8005694:	4770      	bx	lr

08005696 <__sfputc_r>:
 8005696:	6893      	ldr	r3, [r2, #8]
 8005698:	b410      	push	{r4}
 800569a:	3b01      	subs	r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	6093      	str	r3, [r2, #8]
 80056a0:	da07      	bge.n	80056b2 <__sfputc_r+0x1c>
 80056a2:	6994      	ldr	r4, [r2, #24]
 80056a4:	42a3      	cmp	r3, r4
 80056a6:	db01      	blt.n	80056ac <__sfputc_r+0x16>
 80056a8:	290a      	cmp	r1, #10
 80056aa:	d102      	bne.n	80056b2 <__sfputc_r+0x1c>
 80056ac:	bc10      	pop	{r4}
 80056ae:	f000 b933 	b.w	8005918 <__swbuf_r>
 80056b2:	6813      	ldr	r3, [r2, #0]
 80056b4:	1c58      	adds	r0, r3, #1
 80056b6:	6010      	str	r0, [r2, #0]
 80056b8:	7019      	strb	r1, [r3, #0]
 80056ba:	4608      	mov	r0, r1
 80056bc:	bc10      	pop	{r4}
 80056be:	4770      	bx	lr

080056c0 <__sfputs_r>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	4606      	mov	r6, r0
 80056c4:	460f      	mov	r7, r1
 80056c6:	4614      	mov	r4, r2
 80056c8:	18d5      	adds	r5, r2, r3
 80056ca:	42ac      	cmp	r4, r5
 80056cc:	d101      	bne.n	80056d2 <__sfputs_r+0x12>
 80056ce:	2000      	movs	r0, #0
 80056d0:	e007      	b.n	80056e2 <__sfputs_r+0x22>
 80056d2:	463a      	mov	r2, r7
 80056d4:	4630      	mov	r0, r6
 80056d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056da:	f7ff ffdc 	bl	8005696 <__sfputc_r>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	d1f3      	bne.n	80056ca <__sfputs_r+0xa>
 80056e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080056e4 <_vfiprintf_r>:
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	460d      	mov	r5, r1
 80056ea:	4614      	mov	r4, r2
 80056ec:	4698      	mov	r8, r3
 80056ee:	4606      	mov	r6, r0
 80056f0:	b09d      	sub	sp, #116	; 0x74
 80056f2:	b118      	cbz	r0, 80056fc <_vfiprintf_r+0x18>
 80056f4:	6a03      	ldr	r3, [r0, #32]
 80056f6:	b90b      	cbnz	r3, 80056fc <_vfiprintf_r+0x18>
 80056f8:	f7fe f8a4 	bl	8003844 <__sinit>
 80056fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056fe:	07d9      	lsls	r1, r3, #31
 8005700:	d405      	bmi.n	800570e <_vfiprintf_r+0x2a>
 8005702:	89ab      	ldrh	r3, [r5, #12]
 8005704:	059a      	lsls	r2, r3, #22
 8005706:	d402      	bmi.n	800570e <_vfiprintf_r+0x2a>
 8005708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800570a:	f7fe f9f7 	bl	8003afc <__retarget_lock_acquire_recursive>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	071b      	lsls	r3, r3, #28
 8005712:	d501      	bpl.n	8005718 <_vfiprintf_r+0x34>
 8005714:	692b      	ldr	r3, [r5, #16]
 8005716:	b99b      	cbnz	r3, 8005740 <_vfiprintf_r+0x5c>
 8005718:	4629      	mov	r1, r5
 800571a:	4630      	mov	r0, r6
 800571c:	f000 f93a 	bl	8005994 <__swsetup_r>
 8005720:	b170      	cbz	r0, 8005740 <_vfiprintf_r+0x5c>
 8005722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005724:	07dc      	lsls	r4, r3, #31
 8005726:	d504      	bpl.n	8005732 <_vfiprintf_r+0x4e>
 8005728:	f04f 30ff 	mov.w	r0, #4294967295
 800572c:	b01d      	add	sp, #116	; 0x74
 800572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005732:	89ab      	ldrh	r3, [r5, #12]
 8005734:	0598      	lsls	r0, r3, #22
 8005736:	d4f7      	bmi.n	8005728 <_vfiprintf_r+0x44>
 8005738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800573a:	f7fe f9e0 	bl	8003afe <__retarget_lock_release_recursive>
 800573e:	e7f3      	b.n	8005728 <_vfiprintf_r+0x44>
 8005740:	2300      	movs	r3, #0
 8005742:	9309      	str	r3, [sp, #36]	; 0x24
 8005744:	2320      	movs	r3, #32
 8005746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800574a:	2330      	movs	r3, #48	; 0x30
 800574c:	f04f 0901 	mov.w	r9, #1
 8005750:	f8cd 800c 	str.w	r8, [sp, #12]
 8005754:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005904 <_vfiprintf_r+0x220>
 8005758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800575c:	4623      	mov	r3, r4
 800575e:	469a      	mov	sl, r3
 8005760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005764:	b10a      	cbz	r2, 800576a <_vfiprintf_r+0x86>
 8005766:	2a25      	cmp	r2, #37	; 0x25
 8005768:	d1f9      	bne.n	800575e <_vfiprintf_r+0x7a>
 800576a:	ebba 0b04 	subs.w	fp, sl, r4
 800576e:	d00b      	beq.n	8005788 <_vfiprintf_r+0xa4>
 8005770:	465b      	mov	r3, fp
 8005772:	4622      	mov	r2, r4
 8005774:	4629      	mov	r1, r5
 8005776:	4630      	mov	r0, r6
 8005778:	f7ff ffa2 	bl	80056c0 <__sfputs_r>
 800577c:	3001      	adds	r0, #1
 800577e:	f000 80a9 	beq.w	80058d4 <_vfiprintf_r+0x1f0>
 8005782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005784:	445a      	add	r2, fp
 8005786:	9209      	str	r2, [sp, #36]	; 0x24
 8005788:	f89a 3000 	ldrb.w	r3, [sl]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 80a1 	beq.w	80058d4 <_vfiprintf_r+0x1f0>
 8005792:	2300      	movs	r3, #0
 8005794:	f04f 32ff 	mov.w	r2, #4294967295
 8005798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800579c:	f10a 0a01 	add.w	sl, sl, #1
 80057a0:	9304      	str	r3, [sp, #16]
 80057a2:	9307      	str	r3, [sp, #28]
 80057a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057a8:	931a      	str	r3, [sp, #104]	; 0x68
 80057aa:	4654      	mov	r4, sl
 80057ac:	2205      	movs	r2, #5
 80057ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b2:	4854      	ldr	r0, [pc, #336]	; (8005904 <_vfiprintf_r+0x220>)
 80057b4:	f7fe f9a4 	bl	8003b00 <memchr>
 80057b8:	9a04      	ldr	r2, [sp, #16]
 80057ba:	b9d8      	cbnz	r0, 80057f4 <_vfiprintf_r+0x110>
 80057bc:	06d1      	lsls	r1, r2, #27
 80057be:	bf44      	itt	mi
 80057c0:	2320      	movmi	r3, #32
 80057c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057c6:	0713      	lsls	r3, r2, #28
 80057c8:	bf44      	itt	mi
 80057ca:	232b      	movmi	r3, #43	; 0x2b
 80057cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057d0:	f89a 3000 	ldrb.w	r3, [sl]
 80057d4:	2b2a      	cmp	r3, #42	; 0x2a
 80057d6:	d015      	beq.n	8005804 <_vfiprintf_r+0x120>
 80057d8:	4654      	mov	r4, sl
 80057da:	2000      	movs	r0, #0
 80057dc:	f04f 0c0a 	mov.w	ip, #10
 80057e0:	9a07      	ldr	r2, [sp, #28]
 80057e2:	4621      	mov	r1, r4
 80057e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057e8:	3b30      	subs	r3, #48	; 0x30
 80057ea:	2b09      	cmp	r3, #9
 80057ec:	d94d      	bls.n	800588a <_vfiprintf_r+0x1a6>
 80057ee:	b1b0      	cbz	r0, 800581e <_vfiprintf_r+0x13a>
 80057f0:	9207      	str	r2, [sp, #28]
 80057f2:	e014      	b.n	800581e <_vfiprintf_r+0x13a>
 80057f4:	eba0 0308 	sub.w	r3, r0, r8
 80057f8:	fa09 f303 	lsl.w	r3, r9, r3
 80057fc:	4313      	orrs	r3, r2
 80057fe:	46a2      	mov	sl, r4
 8005800:	9304      	str	r3, [sp, #16]
 8005802:	e7d2      	b.n	80057aa <_vfiprintf_r+0xc6>
 8005804:	9b03      	ldr	r3, [sp, #12]
 8005806:	1d19      	adds	r1, r3, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	9103      	str	r1, [sp, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	bfbb      	ittet	lt
 8005810:	425b      	neglt	r3, r3
 8005812:	f042 0202 	orrlt.w	r2, r2, #2
 8005816:	9307      	strge	r3, [sp, #28]
 8005818:	9307      	strlt	r3, [sp, #28]
 800581a:	bfb8      	it	lt
 800581c:	9204      	strlt	r2, [sp, #16]
 800581e:	7823      	ldrb	r3, [r4, #0]
 8005820:	2b2e      	cmp	r3, #46	; 0x2e
 8005822:	d10c      	bne.n	800583e <_vfiprintf_r+0x15a>
 8005824:	7863      	ldrb	r3, [r4, #1]
 8005826:	2b2a      	cmp	r3, #42	; 0x2a
 8005828:	d134      	bne.n	8005894 <_vfiprintf_r+0x1b0>
 800582a:	9b03      	ldr	r3, [sp, #12]
 800582c:	3402      	adds	r4, #2
 800582e:	1d1a      	adds	r2, r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	9203      	str	r2, [sp, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	bfb8      	it	lt
 8005838:	f04f 33ff 	movlt.w	r3, #4294967295
 800583c:	9305      	str	r3, [sp, #20]
 800583e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005908 <_vfiprintf_r+0x224>
 8005842:	2203      	movs	r2, #3
 8005844:	4650      	mov	r0, sl
 8005846:	7821      	ldrb	r1, [r4, #0]
 8005848:	f7fe f95a 	bl	8003b00 <memchr>
 800584c:	b138      	cbz	r0, 800585e <_vfiprintf_r+0x17a>
 800584e:	2240      	movs	r2, #64	; 0x40
 8005850:	9b04      	ldr	r3, [sp, #16]
 8005852:	eba0 000a 	sub.w	r0, r0, sl
 8005856:	4082      	lsls	r2, r0
 8005858:	4313      	orrs	r3, r2
 800585a:	3401      	adds	r4, #1
 800585c:	9304      	str	r3, [sp, #16]
 800585e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005862:	2206      	movs	r2, #6
 8005864:	4829      	ldr	r0, [pc, #164]	; (800590c <_vfiprintf_r+0x228>)
 8005866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800586a:	f7fe f949 	bl	8003b00 <memchr>
 800586e:	2800      	cmp	r0, #0
 8005870:	d03f      	beq.n	80058f2 <_vfiprintf_r+0x20e>
 8005872:	4b27      	ldr	r3, [pc, #156]	; (8005910 <_vfiprintf_r+0x22c>)
 8005874:	bb1b      	cbnz	r3, 80058be <_vfiprintf_r+0x1da>
 8005876:	9b03      	ldr	r3, [sp, #12]
 8005878:	3307      	adds	r3, #7
 800587a:	f023 0307 	bic.w	r3, r3, #7
 800587e:	3308      	adds	r3, #8
 8005880:	9303      	str	r3, [sp, #12]
 8005882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005884:	443b      	add	r3, r7
 8005886:	9309      	str	r3, [sp, #36]	; 0x24
 8005888:	e768      	b.n	800575c <_vfiprintf_r+0x78>
 800588a:	460c      	mov	r4, r1
 800588c:	2001      	movs	r0, #1
 800588e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005892:	e7a6      	b.n	80057e2 <_vfiprintf_r+0xfe>
 8005894:	2300      	movs	r3, #0
 8005896:	f04f 0c0a 	mov.w	ip, #10
 800589a:	4619      	mov	r1, r3
 800589c:	3401      	adds	r4, #1
 800589e:	9305      	str	r3, [sp, #20]
 80058a0:	4620      	mov	r0, r4
 80058a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058a6:	3a30      	subs	r2, #48	; 0x30
 80058a8:	2a09      	cmp	r2, #9
 80058aa:	d903      	bls.n	80058b4 <_vfiprintf_r+0x1d0>
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0c6      	beq.n	800583e <_vfiprintf_r+0x15a>
 80058b0:	9105      	str	r1, [sp, #20]
 80058b2:	e7c4      	b.n	800583e <_vfiprintf_r+0x15a>
 80058b4:	4604      	mov	r4, r0
 80058b6:	2301      	movs	r3, #1
 80058b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80058bc:	e7f0      	b.n	80058a0 <_vfiprintf_r+0x1bc>
 80058be:	ab03      	add	r3, sp, #12
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	462a      	mov	r2, r5
 80058c4:	4630      	mov	r0, r6
 80058c6:	4b13      	ldr	r3, [pc, #76]	; (8005914 <_vfiprintf_r+0x230>)
 80058c8:	a904      	add	r1, sp, #16
 80058ca:	f7fd fb7f 	bl	8002fcc <_printf_float>
 80058ce:	4607      	mov	r7, r0
 80058d0:	1c78      	adds	r0, r7, #1
 80058d2:	d1d6      	bne.n	8005882 <_vfiprintf_r+0x19e>
 80058d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058d6:	07d9      	lsls	r1, r3, #31
 80058d8:	d405      	bmi.n	80058e6 <_vfiprintf_r+0x202>
 80058da:	89ab      	ldrh	r3, [r5, #12]
 80058dc:	059a      	lsls	r2, r3, #22
 80058de:	d402      	bmi.n	80058e6 <_vfiprintf_r+0x202>
 80058e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058e2:	f7fe f90c 	bl	8003afe <__retarget_lock_release_recursive>
 80058e6:	89ab      	ldrh	r3, [r5, #12]
 80058e8:	065b      	lsls	r3, r3, #25
 80058ea:	f53f af1d 	bmi.w	8005728 <_vfiprintf_r+0x44>
 80058ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058f0:	e71c      	b.n	800572c <_vfiprintf_r+0x48>
 80058f2:	ab03      	add	r3, sp, #12
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	462a      	mov	r2, r5
 80058f8:	4630      	mov	r0, r6
 80058fa:	4b06      	ldr	r3, [pc, #24]	; (8005914 <_vfiprintf_r+0x230>)
 80058fc:	a904      	add	r1, sp, #16
 80058fe:	f7fd fe05 	bl	800350c <_printf_i>
 8005902:	e7e4      	b.n	80058ce <_vfiprintf_r+0x1ea>
 8005904:	08005e84 	.word	0x08005e84
 8005908:	08005e8a 	.word	0x08005e8a
 800590c:	08005e8e 	.word	0x08005e8e
 8005910:	08002fcd 	.word	0x08002fcd
 8005914:	080056c1 	.word	0x080056c1

08005918 <__swbuf_r>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	460e      	mov	r6, r1
 800591c:	4614      	mov	r4, r2
 800591e:	4605      	mov	r5, r0
 8005920:	b118      	cbz	r0, 800592a <__swbuf_r+0x12>
 8005922:	6a03      	ldr	r3, [r0, #32]
 8005924:	b90b      	cbnz	r3, 800592a <__swbuf_r+0x12>
 8005926:	f7fd ff8d 	bl	8003844 <__sinit>
 800592a:	69a3      	ldr	r3, [r4, #24]
 800592c:	60a3      	str	r3, [r4, #8]
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	071a      	lsls	r2, r3, #28
 8005932:	d525      	bpl.n	8005980 <__swbuf_r+0x68>
 8005934:	6923      	ldr	r3, [r4, #16]
 8005936:	b31b      	cbz	r3, 8005980 <__swbuf_r+0x68>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	6922      	ldr	r2, [r4, #16]
 800593c:	b2f6      	uxtb	r6, r6
 800593e:	1a98      	subs	r0, r3, r2
 8005940:	6963      	ldr	r3, [r4, #20]
 8005942:	4637      	mov	r7, r6
 8005944:	4283      	cmp	r3, r0
 8005946:	dc04      	bgt.n	8005952 <__swbuf_r+0x3a>
 8005948:	4621      	mov	r1, r4
 800594a:	4628      	mov	r0, r5
 800594c:	f7ff fda2 	bl	8005494 <_fflush_r>
 8005950:	b9e0      	cbnz	r0, 800598c <__swbuf_r+0x74>
 8005952:	68a3      	ldr	r3, [r4, #8]
 8005954:	3b01      	subs	r3, #1
 8005956:	60a3      	str	r3, [r4, #8]
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	6022      	str	r2, [r4, #0]
 800595e:	701e      	strb	r6, [r3, #0]
 8005960:	6962      	ldr	r2, [r4, #20]
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	429a      	cmp	r2, r3
 8005966:	d004      	beq.n	8005972 <__swbuf_r+0x5a>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	07db      	lsls	r3, r3, #31
 800596c:	d506      	bpl.n	800597c <__swbuf_r+0x64>
 800596e:	2e0a      	cmp	r6, #10
 8005970:	d104      	bne.n	800597c <__swbuf_r+0x64>
 8005972:	4621      	mov	r1, r4
 8005974:	4628      	mov	r0, r5
 8005976:	f7ff fd8d 	bl	8005494 <_fflush_r>
 800597a:	b938      	cbnz	r0, 800598c <__swbuf_r+0x74>
 800597c:	4638      	mov	r0, r7
 800597e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005980:	4621      	mov	r1, r4
 8005982:	4628      	mov	r0, r5
 8005984:	f000 f806 	bl	8005994 <__swsetup_r>
 8005988:	2800      	cmp	r0, #0
 800598a:	d0d5      	beq.n	8005938 <__swbuf_r+0x20>
 800598c:	f04f 37ff 	mov.w	r7, #4294967295
 8005990:	e7f4      	b.n	800597c <__swbuf_r+0x64>
	...

08005994 <__swsetup_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4b2a      	ldr	r3, [pc, #168]	; (8005a40 <__swsetup_r+0xac>)
 8005998:	4605      	mov	r5, r0
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	460c      	mov	r4, r1
 800599e:	b118      	cbz	r0, 80059a8 <__swsetup_r+0x14>
 80059a0:	6a03      	ldr	r3, [r0, #32]
 80059a2:	b90b      	cbnz	r3, 80059a8 <__swsetup_r+0x14>
 80059a4:	f7fd ff4e 	bl	8003844 <__sinit>
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059ae:	0718      	lsls	r0, r3, #28
 80059b0:	d422      	bmi.n	80059f8 <__swsetup_r+0x64>
 80059b2:	06d9      	lsls	r1, r3, #27
 80059b4:	d407      	bmi.n	80059c6 <__swsetup_r+0x32>
 80059b6:	2309      	movs	r3, #9
 80059b8:	602b      	str	r3, [r5, #0]
 80059ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059be:	f04f 30ff 	mov.w	r0, #4294967295
 80059c2:	81a3      	strh	r3, [r4, #12]
 80059c4:	e034      	b.n	8005a30 <__swsetup_r+0x9c>
 80059c6:	0758      	lsls	r0, r3, #29
 80059c8:	d512      	bpl.n	80059f0 <__swsetup_r+0x5c>
 80059ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059cc:	b141      	cbz	r1, 80059e0 <__swsetup_r+0x4c>
 80059ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059d2:	4299      	cmp	r1, r3
 80059d4:	d002      	beq.n	80059dc <__swsetup_r+0x48>
 80059d6:	4628      	mov	r0, r5
 80059d8:	f7fe ff0e 	bl	80047f8 <_free_r>
 80059dc:	2300      	movs	r3, #0
 80059de:	6363      	str	r3, [r4, #52]	; 0x34
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059e6:	81a3      	strh	r3, [r4, #12]
 80059e8:	2300      	movs	r3, #0
 80059ea:	6063      	str	r3, [r4, #4]
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	6023      	str	r3, [r4, #0]
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	f043 0308 	orr.w	r3, r3, #8
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	b94b      	cbnz	r3, 8005a10 <__swsetup_r+0x7c>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a06:	d003      	beq.n	8005a10 <__swsetup_r+0x7c>
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f000 f883 	bl	8005b16 <__smakebuf_r>
 8005a10:	89a0      	ldrh	r0, [r4, #12]
 8005a12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a16:	f010 0301 	ands.w	r3, r0, #1
 8005a1a:	d00a      	beq.n	8005a32 <__swsetup_r+0x9e>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60a3      	str	r3, [r4, #8]
 8005a20:	6963      	ldr	r3, [r4, #20]
 8005a22:	425b      	negs	r3, r3
 8005a24:	61a3      	str	r3, [r4, #24]
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	b943      	cbnz	r3, 8005a3c <__swsetup_r+0xa8>
 8005a2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a2e:	d1c4      	bne.n	80059ba <__swsetup_r+0x26>
 8005a30:	bd38      	pop	{r3, r4, r5, pc}
 8005a32:	0781      	lsls	r1, r0, #30
 8005a34:	bf58      	it	pl
 8005a36:	6963      	ldrpl	r3, [r4, #20]
 8005a38:	60a3      	str	r3, [r4, #8]
 8005a3a:	e7f4      	b.n	8005a26 <__swsetup_r+0x92>
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	e7f7      	b.n	8005a30 <__swsetup_r+0x9c>
 8005a40:	20000064 	.word	0x20000064

08005a44 <_raise_r>:
 8005a44:	291f      	cmp	r1, #31
 8005a46:	b538      	push	{r3, r4, r5, lr}
 8005a48:	4604      	mov	r4, r0
 8005a4a:	460d      	mov	r5, r1
 8005a4c:	d904      	bls.n	8005a58 <_raise_r+0x14>
 8005a4e:	2316      	movs	r3, #22
 8005a50:	6003      	str	r3, [r0, #0]
 8005a52:	f04f 30ff 	mov.w	r0, #4294967295
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005a5a:	b112      	cbz	r2, 8005a62 <_raise_r+0x1e>
 8005a5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a60:	b94b      	cbnz	r3, 8005a76 <_raise_r+0x32>
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 f830 	bl	8005ac8 <_getpid_r>
 8005a68:	462a      	mov	r2, r5
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a72:	f000 b817 	b.w	8005aa4 <_kill_r>
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d00a      	beq.n	8005a90 <_raise_r+0x4c>
 8005a7a:	1c59      	adds	r1, r3, #1
 8005a7c:	d103      	bne.n	8005a86 <_raise_r+0x42>
 8005a7e:	2316      	movs	r3, #22
 8005a80:	6003      	str	r3, [r0, #0]
 8005a82:	2001      	movs	r0, #1
 8005a84:	e7e7      	b.n	8005a56 <_raise_r+0x12>
 8005a86:	2400      	movs	r4, #0
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005a8e:	4798      	blx	r3
 8005a90:	2000      	movs	r0, #0
 8005a92:	e7e0      	b.n	8005a56 <_raise_r+0x12>

08005a94 <raise>:
 8005a94:	4b02      	ldr	r3, [pc, #8]	; (8005aa0 <raise+0xc>)
 8005a96:	4601      	mov	r1, r0
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	f7ff bfd3 	b.w	8005a44 <_raise_r>
 8005a9e:	bf00      	nop
 8005aa0:	20000064 	.word	0x20000064

08005aa4 <_kill_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4d06      	ldr	r5, [pc, #24]	; (8005ac4 <_kill_r+0x20>)
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	f7fb fb9d 	bl	80011f0 <_kill>
 8005ab6:	1c43      	adds	r3, r0, #1
 8005ab8:	d102      	bne.n	8005ac0 <_kill_r+0x1c>
 8005aba:	682b      	ldr	r3, [r5, #0]
 8005abc:	b103      	cbz	r3, 8005ac0 <_kill_r+0x1c>
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	bd38      	pop	{r3, r4, r5, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000470 	.word	0x20000470

08005ac8 <_getpid_r>:
 8005ac8:	f7fb bb90 	b.w	80011ec <_getpid>

08005acc <__swhatbuf_r>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	460c      	mov	r4, r1
 8005ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad4:	4615      	mov	r5, r2
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	461e      	mov	r6, r3
 8005ada:	b096      	sub	sp, #88	; 0x58
 8005adc:	da0c      	bge.n	8005af8 <__swhatbuf_r+0x2c>
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ae6:	bf0c      	ite	eq
 8005ae8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005aec:	2340      	movne	r3, #64	; 0x40
 8005aee:	2000      	movs	r0, #0
 8005af0:	6031      	str	r1, [r6, #0]
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	b016      	add	sp, #88	; 0x58
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	466a      	mov	r2, sp
 8005afa:	f000 f849 	bl	8005b90 <_fstat_r>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	dbed      	blt.n	8005ade <__swhatbuf_r+0x12>
 8005b02:	9901      	ldr	r1, [sp, #4]
 8005b04:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005b08:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005b0c:	4259      	negs	r1, r3
 8005b0e:	4159      	adcs	r1, r3
 8005b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b14:	e7eb      	b.n	8005aee <__swhatbuf_r+0x22>

08005b16 <__smakebuf_r>:
 8005b16:	898b      	ldrh	r3, [r1, #12]
 8005b18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b1a:	079d      	lsls	r5, r3, #30
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	d507      	bpl.n	8005b32 <__smakebuf_r+0x1c>
 8005b22:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	6123      	str	r3, [r4, #16]
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	6163      	str	r3, [r4, #20]
 8005b2e:	b002      	add	sp, #8
 8005b30:	bd70      	pop	{r4, r5, r6, pc}
 8005b32:	466a      	mov	r2, sp
 8005b34:	ab01      	add	r3, sp, #4
 8005b36:	f7ff ffc9 	bl	8005acc <__swhatbuf_r>
 8005b3a:	9900      	ldr	r1, [sp, #0]
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f7fe feca 	bl	80048d8 <_malloc_r>
 8005b44:	b948      	cbnz	r0, 8005b5a <__smakebuf_r+0x44>
 8005b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b4a:	059a      	lsls	r2, r3, #22
 8005b4c:	d4ef      	bmi.n	8005b2e <__smakebuf_r+0x18>
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	f043 0302 	orr.w	r3, r3, #2
 8005b56:	81a3      	strh	r3, [r4, #12]
 8005b58:	e7e3      	b.n	8005b22 <__smakebuf_r+0xc>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	6020      	str	r0, [r4, #0]
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	9b00      	ldr	r3, [sp, #0]
 8005b66:	6120      	str	r0, [r4, #16]
 8005b68:	6163      	str	r3, [r4, #20]
 8005b6a:	9b01      	ldr	r3, [sp, #4]
 8005b6c:	b15b      	cbz	r3, 8005b86 <__smakebuf_r+0x70>
 8005b6e:	4630      	mov	r0, r6
 8005b70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b74:	f000 f81e 	bl	8005bb4 <_isatty_r>
 8005b78:	b128      	cbz	r0, 8005b86 <__smakebuf_r+0x70>
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	f023 0303 	bic.w	r3, r3, #3
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	81a3      	strh	r3, [r4, #12]
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	431d      	orrs	r5, r3
 8005b8a:	81a5      	strh	r5, [r4, #12]
 8005b8c:	e7cf      	b.n	8005b2e <__smakebuf_r+0x18>
	...

08005b90 <_fstat_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	2300      	movs	r3, #0
 8005b94:	4d06      	ldr	r5, [pc, #24]	; (8005bb0 <_fstat_r+0x20>)
 8005b96:	4604      	mov	r4, r0
 8005b98:	4608      	mov	r0, r1
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	602b      	str	r3, [r5, #0]
 8005b9e:	f7fb fb54 	bl	800124a <_fstat>
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	d102      	bne.n	8005bac <_fstat_r+0x1c>
 8005ba6:	682b      	ldr	r3, [r5, #0]
 8005ba8:	b103      	cbz	r3, 8005bac <_fstat_r+0x1c>
 8005baa:	6023      	str	r3, [r4, #0]
 8005bac:	bd38      	pop	{r3, r4, r5, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000470 	.word	0x20000470

08005bb4 <_isatty_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	4d05      	ldr	r5, [pc, #20]	; (8005bd0 <_isatty_r+0x1c>)
 8005bba:	4604      	mov	r4, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	f7fb fb48 	bl	8001254 <_isatty>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_isatty_r+0x1a>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_isatty_r+0x1a>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	20000470 	.word	0x20000470

08005bd4 <_init>:
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	bf00      	nop
 8005bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bda:	bc08      	pop	{r3}
 8005bdc:	469e      	mov	lr, r3
 8005bde:	4770      	bx	lr

08005be0 <_fini>:
 8005be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be2:	bf00      	nop
 8005be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be6:	bc08      	pop	{r3}
 8005be8:	469e      	mov	lr, r3
 8005bea:	4770      	bx	lr
